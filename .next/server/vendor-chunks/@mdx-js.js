"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mdx-js";
exports.ids = ["vendor-chunks/@mdx-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/compile.js":
/*!*************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/compile.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compile: () => (/* binding */ compile),\n/* harmony export */   compileSync: () => (/* binding */ compileSync)\n/* harmony export */ });\n/* harmony import */ var _util_resolve_file_and_options_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/resolve-file-and-options.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/core.js\");\n/**\n * @import {Compatible, VFile} from 'vfile'\n * @import {ProcessorOptions} from './core.js'\n */ /**\n * @typedef {Omit<ProcessorOptions, 'format'>} CoreProcessorOptions\n *   Core configuration.\n *\n * @typedef ExtraOptions\n *   Extra configuration.\n * @property {'detect' | 'md' | 'mdx' | null | undefined} [format='detect']\n *   Format of `file` (default: `'detect'`).\n *\n * @typedef {CoreProcessorOptions & ExtraOptions} CompileOptions\n *   Configuration for `compile`.\n *\n *   `CompileOptions` is the same as `ProcessorOptions` with the exception that\n *   the `format` option supports a `'detect'` value, which is the default.\n *   The `'detect'` format means to use `'md'` for files with an extension in\n *   `mdExtensions` and `'mdx'` otherwise.\n */ \n\n/**\n * Compile MDX to JS.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   MDX document to parse.\n * @param {Readonly<CompileOptions> | null | undefined} [compileOptions]\n *   Compile configuration (optional).\n * @return {Promise<VFile>}\n *   Promise to compiled file.\n */ function compile(vfileCompatible, compileOptions) {\n    const { file, options } = (0,_util_resolve_file_and_options_js__WEBPACK_IMPORTED_MODULE_0__.resolveFileAndOptions)(vfileCompatible, compileOptions);\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.createProcessor)(options).process(file);\n}\n/**\n * Synchronously compile MDX to JS.\n *\n * When possible please use the async `compile`.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   MDX document to parse.\n * @param {Readonly<CompileOptions> | null | undefined} [compileOptions]\n *   Compile configuration (optional).\n * @return {VFile}\n *   Compiled file.\n */ function compileSync(vfileCompatible, compileOptions) {\n    const { file, options } = (0,_util_resolve_file_and_options_js__WEBPACK_IMPORTED_MODULE_0__.resolveFileAndOptions)(vfileCompatible, compileOptions);\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.createProcessor)(options).processSync(file);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL2NvbXBpbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Q0FHQyxHQUVEOzs7Ozs7Ozs7Ozs7Ozs7O0NBZ0JDLEdBRXVFO0FBQy9CO0FBRXpDOzs7Ozs7Ozs7Q0FTQyxHQUNNLFNBQVNFLFFBQVFDLGVBQWUsRUFBRUMsY0FBYztJQUNyRCxNQUFNLEVBQUNDLElBQUksRUFBRUMsT0FBTyxFQUFDLEdBQUdOLHdGQUFxQkEsQ0FBQ0csaUJBQWlCQztJQUMvRCxPQUFPSCx5REFBZUEsQ0FBQ0ssU0FBU0MsT0FBTyxDQUFDRjtBQUMxQztBQUVBOzs7Ozs7Ozs7OztDQVdDLEdBQ00sU0FBU0csWUFBWUwsZUFBZSxFQUFFQyxjQUFjO0lBQ3pELE1BQU0sRUFBQ0MsSUFBSSxFQUFFQyxPQUFPLEVBQUMsR0FBR04sd0ZBQXFCQSxDQUFDRyxpQkFBaUJDO0lBQy9ELE9BQU9ILHlEQUFlQSxDQUFDSyxTQUFTRyxXQUFXLENBQUNKO0FBQzlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYW5hLWxpcXVpZGl0eS1wb29sLy4vbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9jb21waWxlLmpzP2NhODMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtDb21wYXRpYmxlLCBWRmlsZX0gZnJvbSAndmZpbGUnXG4gKiBAaW1wb3J0IHtQcm9jZXNzb3JPcHRpb25zfSBmcm9tICcuL2NvcmUuanMnXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T21pdDxQcm9jZXNzb3JPcHRpb25zLCAnZm9ybWF0Jz59IENvcmVQcm9jZXNzb3JPcHRpb25zXG4gKiAgIENvcmUgY29uZmlndXJhdGlvbi5cbiAqXG4gKiBAdHlwZWRlZiBFeHRyYU9wdGlvbnNcbiAqICAgRXh0cmEgY29uZmlndXJhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7J2RldGVjdCcgfCAnbWQnIHwgJ21keCcgfCBudWxsIHwgdW5kZWZpbmVkfSBbZm9ybWF0PSdkZXRlY3QnXVxuICogICBGb3JtYXQgb2YgYGZpbGVgIChkZWZhdWx0OiBgJ2RldGVjdCdgKS5cbiAqXG4gKiBAdHlwZWRlZiB7Q29yZVByb2Nlc3Nvck9wdGlvbnMgJiBFeHRyYU9wdGlvbnN9IENvbXBpbGVPcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24gZm9yIGBjb21waWxlYC5cbiAqXG4gKiAgIGBDb21waWxlT3B0aW9uc2AgaXMgdGhlIHNhbWUgYXMgYFByb2Nlc3Nvck9wdGlvbnNgIHdpdGggdGhlIGV4Y2VwdGlvbiB0aGF0XG4gKiAgIHRoZSBgZm9ybWF0YCBvcHRpb24gc3VwcG9ydHMgYSBgJ2RldGVjdCdgIHZhbHVlLCB3aGljaCBpcyB0aGUgZGVmYXVsdC5cbiAqICAgVGhlIGAnZGV0ZWN0J2AgZm9ybWF0IG1lYW5zIHRvIHVzZSBgJ21kJ2AgZm9yIGZpbGVzIHdpdGggYW4gZXh0ZW5zaW9uIGluXG4gKiAgIGBtZEV4dGVuc2lvbnNgIGFuZCBgJ21keCdgIG90aGVyd2lzZS5cbiAqL1xuXG5pbXBvcnQge3Jlc29sdmVGaWxlQW5kT3B0aW9uc30gZnJvbSAnLi91dGlsL3Jlc29sdmUtZmlsZS1hbmQtb3B0aW9ucy5qcydcbmltcG9ydCB7Y3JlYXRlUHJvY2Vzc29yfSBmcm9tICcuL2NvcmUuanMnXG5cbi8qKlxuICogQ29tcGlsZSBNRFggdG8gSlMuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxDb21wYXRpYmxlPn0gdmZpbGVDb21wYXRpYmxlXG4gKiAgIE1EWCBkb2N1bWVudCB0byBwYXJzZS5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGlsZU9wdGlvbnM+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBpbGVPcHRpb25zXVxuICogICBDb21waWxlIGNvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm4ge1Byb21pc2U8VkZpbGU+fVxuICogICBQcm9taXNlIHRvIGNvbXBpbGVkIGZpbGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlKHZmaWxlQ29tcGF0aWJsZSwgY29tcGlsZU9wdGlvbnMpIHtcbiAgY29uc3Qge2ZpbGUsIG9wdGlvbnN9ID0gcmVzb2x2ZUZpbGVBbmRPcHRpb25zKHZmaWxlQ29tcGF0aWJsZSwgY29tcGlsZU9wdGlvbnMpXG4gIHJldHVybiBjcmVhdGVQcm9jZXNzb3Iob3B0aW9ucykucHJvY2VzcyhmaWxlKVxufVxuXG4vKipcbiAqIFN5bmNocm9ub3VzbHkgY29tcGlsZSBNRFggdG8gSlMuXG4gKlxuICogV2hlbiBwb3NzaWJsZSBwbGVhc2UgdXNlIHRoZSBhc3luYyBgY29tcGlsZWAuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxDb21wYXRpYmxlPn0gdmZpbGVDb21wYXRpYmxlXG4gKiAgIE1EWCBkb2N1bWVudCB0byBwYXJzZS5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGlsZU9wdGlvbnM+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbXBpbGVPcHRpb25zXVxuICogICBDb21waWxlIGNvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm4ge1ZGaWxlfVxuICogICBDb21waWxlZCBmaWxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZVN5bmModmZpbGVDb21wYXRpYmxlLCBjb21waWxlT3B0aW9ucykge1xuICBjb25zdCB7ZmlsZSwgb3B0aW9uc30gPSByZXNvbHZlRmlsZUFuZE9wdGlvbnModmZpbGVDb21wYXRpYmxlLCBjb21waWxlT3B0aW9ucylcbiAgcmV0dXJuIGNyZWF0ZVByb2Nlc3NvcihvcHRpb25zKS5wcm9jZXNzU3luYyhmaWxlKVxufVxuIl0sIm5hbWVzIjpbInJlc29sdmVGaWxlQW5kT3B0aW9ucyIsImNyZWF0ZVByb2Nlc3NvciIsImNvbXBpbGUiLCJ2ZmlsZUNvbXBhdGlibGUiLCJjb21waWxlT3B0aW9ucyIsImZpbGUiLCJvcHRpb25zIiwicHJvY2VzcyIsImNvbXBpbGVTeW5jIiwicHJvY2Vzc1N5bmMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/compile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/core.js":
/*!**********************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/core.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createProcessor: () => (/* binding */ createProcessor)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var recma_build_jsx__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! recma-build-jsx */ \"(ssr)/./node_modules/recma-build-jsx/lib/index.js\");\n/* harmony import */ var recma_jsx__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! recma-jsx */ \"(ssr)/./node_modules/recma-jsx/lib/index.js\");\n/* harmony import */ var recma_stringify__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! recma-stringify */ \"(ssr)/./node_modules/recma-stringify/lib/index.js\");\n/* harmony import */ var rehype_recma__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rehype-recma */ \"(ssr)/./node_modules/rehype-recma/lib/index.js\");\n/* harmony import */ var remark_mdx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! remark-mdx */ \"(ssr)/./node_modules/remark-mdx/lib/index.js\");\n/* harmony import */ var remark_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! remark-parse */ \"(ssr)/./node_modules/remark-parse/lib/index.js\");\n/* harmony import */ var remark_rehype__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! remark-rehype */ \"(ssr)/./node_modules/remark-rehype/lib/index.js\");\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unified */ \"(ssr)/./node_modules/unified/lib/index.js\");\n/* harmony import */ var _plugin_recma_build_jsx_transform_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./plugin/recma-build-jsx-transform.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js\");\n/* harmony import */ var _plugin_recma_document_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./plugin/recma-document.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-document.js\");\n/* harmony import */ var _plugin_recma_jsx_rewrite_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./plugin/recma-jsx-rewrite.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js\");\n/* harmony import */ var _plugin_rehype_remove_raw_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./plugin/rehype-remove-raw.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js\");\n/* harmony import */ var _plugin_remark_mark_and_unravel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./plugin/remark-mark-and-unravel.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js\");\n/* harmony import */ var _node_types_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node-types.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/node-types.js\");\n/**\n * @import {Program} from 'estree-jsx'\n * @import {Root} from 'mdast'\n * @import {Options as RehypeRecmaOptions} from 'rehype-recma'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {SourceMapGenerator} from 'source-map'\n * @import {PluggableList, Processor} from 'unified'\n */ /**\n * @typedef ProcessorOptions\n *   Configuration for `createProcessor`.\n * @property {typeof SourceMapGenerator | null | undefined} [SourceMapGenerator]\n *   Add a source map (object form) as the `map` field on the resulting file\n *   (optional).\n * @property {URL | string | null | undefined} [baseUrl]\n *   Use this URL as `import.meta.url` and resolve `import` and `export … from`\n *   relative to it (optional, example: `import.meta.url`).\n * @property {boolean | null | undefined} [development=false]\n *   Whether to add extra info to error messages in generated code and use the\n *   development automatic JSX runtime (`Fragment` and `jsxDEV` from\n *   `/jsx-dev-runtime`) (default: `false`);\n *   when using the webpack loader (`@mdx-js/loader`) or the Rollup integration\n *   (`@mdx-js/rollup`) through Vite, this is automatically inferred from how\n *   you configure those tools.\n * @property {RehypeRecmaOptions['elementAttributeNameCase']} [elementAttributeNameCase='react']\n *   Casing to use for attribute names (default: `'react'`);\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`;\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`;\n *   for JSX components written in MDX, the author has to be aware of which\n *   framework they use and write code accordingly;\n *   for AST nodes generated by this project, this option configures it\n * @property {'md' | 'mdx' | null | undefined} [format='mdx']\n *   format of the file (default: `'mdx'`);\n *   `'md'` means treat as markdown and `'mdx'` means treat as MDX.\n * @property {boolean | null | undefined} [jsx=false]\n *   Whether to keep JSX (default: `false`);\n *   the default is to compile JSX away so that the resulting file is\n *   immediately runnable.\n * @property {string | null | undefined} [jsxImportSource='react']\n *   Place to import automatic JSX runtimes from (default: `'react'`);\n *   when in the `automatic` runtime, this is used to define an import for\n *   `Fragment`, `jsx`, `jsxDEV`, and `jsxs`.\n * @property {'automatic' | 'classic' | null | undefined} [jsxRuntime='automatic']\n *   JSX runtime to use (default: `'automatic'`);\n *   the automatic runtime compiles to `import _jsx from\n *   '$importSource/jsx-runtime'\\n_jsx('p')`;\n *   the classic runtime compiles to calls such as `h('p')`.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {ReadonlyArray<string> | null | undefined} [mdExtensions]\n *   List of markdown extensions, with dot (default: `['.md', '.markdown', …]`);\n *   affects integrations.\n * @property {ReadonlyArray<string> | null | undefined} [mdxExtensions]\n *   List of MDX extensions, with dot (default: `['.mdx']`);\n *   affects integrations.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Output format to generate (default: `'program'`);\n *   in most cases `'program'` should be used, it results in a whole program;\n *   internally `evaluate` uses `'function-body'` to compile to\n *   code that can be passed to `run`;\n *   in some cases, you might want what `evaluate` does in separate steps, such\n *   as when compiling on the server and running on the client.\n * @property {string | null | undefined} [pragma='React.createElement']\n *   Pragma for JSX, used in the classic runtime as an identifier for function\n *   calls: `<x />` to `React.createElement('x')` (default:\n *   `'React.createElement'`);\n *   when changing this, you should also define `pragmaFrag` and\n *   `pragmaImportSource` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [pragmaFrag='React.Fragment']\n *   Pragma for fragment symbol, used in the classic runtime as an identifier\n *   for unnamed calls: `<>` to `React.createElement(React.Fragment)` (default:\n *   `'React.Fragment'`);\n *   when changing this, you should also define `pragma` and\n *   `pragmaImportSource` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [pragmaImportSource='react']\n *   Where to import the identifier of `pragma` from, used in the classic\n *   runtime (default: `'react'`);\n *   to illustrate, when `pragma` is `'a.b'` and `pragmaImportSource` is `'c'`\n *   the following will be generated: `import a from 'c'` and things such as\n *   `a.b('h1', {})`.\n *   when changing this, you should also define `pragma` and `pragmaFrag` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [providerImportSource]\n *   Place to import a provider from (optional, example: `'@mdx-js/react'`);\n *   normally it’s used for runtimes that support context (React, Preact), but\n *   it can be used to inject components into the compiled code;\n *   the module must export and identifier `useMDXComponents` which is called\n *   without arguments to get an object of components (`MDXComponents` from\n *   `mdx/types.js`).\n * @property {PluggableList | null | undefined} [recmaPlugins]\n *   List of recma plugins (optional);\n *   this is a new ecosystem, currently in beta, to transform esast trees\n *   (JavaScript)\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins (optional).\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins (optional).\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype` (optional);\n *   the option `allowDangerousHtml` will always be set to `true` and the MDX\n *   nodes (see `nodeTypes`) are passed through;\n *   In particular, you might want to pass configuration for footnotes if your\n *   content is not in English.\n * @property {RehypeRecmaOptions['stylePropertyNameCase']} [stylePropertyNameCase='dom']\n *   Casing to use for property names in `style` objects (default: `'dom'`);\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`;\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`;\n *   for JSX components written in MDX, the author has to be aware of which\n *   framework they use and write code accordingly;\n *   for AST nodes generated by this project, this option configures it\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` properties on `td` and `th` into CSS `style`\n *   properties (default: `true`).\n */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst removedOptions = [\n    \"compilers\",\n    \"filepath\",\n    \"hastPlugins\",\n    \"mdPlugins\",\n    \"skipExport\",\n    \"wrapExport\"\n];\nlet warned = false;\n/**\n * Create a processor to compile markdown or MDX to JavaScript.\n *\n * > **Note**: `format: 'detect'` is not allowed in `ProcessorOptions`.\n *\n * @param {Readonly<ProcessorOptions> | null | undefined} [options]\n *   Configuration (optional).\n * @return {Processor<Root, Program, Program, Program, string>}\n *   Processor.\n */ function createProcessor(options) {\n    const settings = options || {};\n    let index = -1;\n    while(++index < removedOptions.length){\n        const key = removedOptions[index];\n        if (key in settings) {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Unexpected removed option `\" + key + \"`; see <https://mdxjs.com/migrating/v2/> on how to migrate\");\n        }\n    }\n    // @ts-expect-error: throw an error for a runtime value which is not allowed\n    // by the types.\n    if (settings.format === \"detect\") {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Unexpected `format: 'detect'`, which is not supported by `createProcessor`, expected `'mdx'` or `'md'`\");\n    }\n    if ((settings.jsxRuntime === \"classic\" || settings.pragma || settings.pragmaFrag || settings.pragmaImportSource) && !warned) {\n        warned = true;\n        console.warn(\"Unexpected deprecated option `jsxRuntime: 'classic'`, `pragma`, `pragmaFrag`, or `pragmaImportSource`; see <https://mdxjs.com/migrating/v3/> on how to migrate\");\n    }\n    const pipeline = (0,unified__WEBPACK_IMPORTED_MODULE_1__.unified)().use(remark_parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n    if (settings.format !== \"md\") {\n        pipeline.use(remark_mdx__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n    }\n    const remarkRehypeOptions = settings.remarkRehypeOptions || {};\n    pipeline.use(_plugin_remark_mark_and_unravel_js__WEBPACK_IMPORTED_MODULE_4__.remarkMarkAndUnravel).use(settings.remarkPlugins || []).use(remark_rehype__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        ...remarkRehypeOptions,\n        allowDangerousHtml: true,\n        passThrough: [\n            ...remarkRehypeOptions.passThrough || [],\n            ..._node_types_js__WEBPACK_IMPORTED_MODULE_6__.nodeTypes\n        ]\n    }).use(settings.rehypePlugins || []);\n    if (settings.format === \"md\") {\n        pipeline.use(_plugin_rehype_remove_raw_js__WEBPACK_IMPORTED_MODULE_7__.rehypeRemoveRaw);\n    }\n    pipeline// @ts-expect-error: `Program` is close enough to a `Node`,\n    // but type inference has trouble with it and bridges.\n    .use(rehype_recma__WEBPACK_IMPORTED_MODULE_8__[\"default\"], settings).use(_plugin_recma_document_js__WEBPACK_IMPORTED_MODULE_9__.recmaDocument, settings).use(_plugin_recma_jsx_rewrite_js__WEBPACK_IMPORTED_MODULE_10__.recmaJsxRewrite, settings);\n    if (!settings.jsx) {\n        pipeline.use(recma_build_jsx__WEBPACK_IMPORTED_MODULE_11__[\"default\"], settings).use(_plugin_recma_build_jsx_transform_js__WEBPACK_IMPORTED_MODULE_12__.recmaBuildJsxTransform, settings);\n    }\n    pipeline.use(recma_jsx__WEBPACK_IMPORTED_MODULE_13__[\"default\"]).use(recma_stringify__WEBPACK_IMPORTED_MODULE_14__[\"default\"], settings).use(settings.recmaPlugins || []);\n    // @ts-expect-error: TS doesn’t get the plugins we added with if-statements.\n    return pipeline;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/evaluate.js":
/*!**************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/evaluate.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   evaluate: () => (/* binding */ evaluate),\n/* harmony export */   evaluateSync: () => (/* binding */ evaluateSync)\n/* harmony export */ });\n/* harmony import */ var _util_resolve_evaluate_options_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/resolve-evaluate-options.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/resolve-evaluate-options.js\");\n/* harmony import */ var _compile_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./compile.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/compile.js\");\n/* harmony import */ var _run_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./run.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/run.js\");\n/**\n * @import {MDXModule} from 'mdx/types.js'\n * @import {Compatible} from 'vfile'\n * @import {EvaluateOptions} from './util/resolve-evaluate-options.js'\n */ \n\n\n/**\n * Compile and run MDX.\n *\n * When you trust your content, `evaluate` can work.\n * When possible, use `compile`, write to a file, and then run with Node or use\n * one of the integrations.\n *\n * > ☢️ **Danger**: it’s called **evaluate** because it `eval`s JavaScript.\n *\n * ###### Notes\n *\n * Compiling (and running) MDX takes time.\n *\n * If you are live-rendering a string of MDX that often changes using a virtual\n * DOM based framework (such as React), one performance improvement is to call\n * the `MDXContent` component yourself.\n * The reason is that the `evaluate` creates a new function each time, which\n * cannot be diffed:\n *\n * ```diff\n *  const {default: MDXContent} = await evaluate('…')\n *\n * -<MDXContent {...props} />\n * +MDXContent(props)\n * ```\n *\n * @param {Readonly<Compatible>} file\n *   MDX document to parse.\n * @param {Readonly<EvaluateOptions>} options\n *   Configuration (**required**).\n * @return {Promise<MDXModule>}\n *   Promise to a module;\n *   the result is an object with a `default` field set to the component;\n *   anything else that was exported is available too.\n\n */ async function evaluate(file, options) {\n    const { compiletime, runtime } = (0,_util_resolve_evaluate_options_js__WEBPACK_IMPORTED_MODULE_0__.resolveEvaluateOptions)(options);\n    return (0,_run_js__WEBPACK_IMPORTED_MODULE_1__.run)(await (0,_compile_js__WEBPACK_IMPORTED_MODULE_2__.compile)(file, compiletime), runtime);\n}\n/**\n * Compile and run MDX, synchronously.\n *\n * When possible please use the async `evaluate`.\n *\n * > ☢️ **Danger**: it’s called **evaluate** because it `eval`s JavaScript.\n *\n * @param {Readonly<Compatible>} file\n *   MDX document to parse.\n * @param {Readonly<EvaluateOptions>} options\n *   Configuration (**required**).\n * @return {MDXModule}\n *   Module.\n */ function evaluateSync(file, options) {\n    const { compiletime, runtime } = (0,_util_resolve_evaluate_options_js__WEBPACK_IMPORTED_MODULE_0__.resolveEvaluateOptions)(options);\n    return (0,_run_js__WEBPACK_IMPORTED_MODULE_1__.runSync)((0,_compile_js__WEBPACK_IMPORTED_MODULE_2__.compileSync)(file, compiletime), runtime);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL2V2YWx1YXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7Q0FJQyxHQUV3RTtBQUN4QjtBQUNaO0FBRXJDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQW1DQyxHQUNNLGVBQWVLLFNBQVNDLElBQUksRUFBRUMsT0FBTztJQUMxQyxNQUFNLEVBQUNDLFdBQVcsRUFBRUMsT0FBTyxFQUFDLEdBQUdULHlGQUFzQkEsQ0FBQ087SUFDdEQsT0FBT0osNENBQUdBLENBQUMsTUFBTUYsb0RBQU9BLENBQUNLLE1BQU1FLGNBQWNDO0FBQy9DO0FBRUE7Ozs7Ozs7Ozs7Ozs7Q0FhQyxHQUNNLFNBQVNDLGFBQWFKLElBQUksRUFBRUMsT0FBTztJQUN4QyxNQUFNLEVBQUNDLFdBQVcsRUFBRUMsT0FBTyxFQUFDLEdBQUdULHlGQUFzQkEsQ0FBQ087SUFDdEQsT0FBT0gsZ0RBQU9BLENBQUNGLHdEQUFXQSxDQUFDSSxNQUFNRSxjQUFjQztBQUNqRCIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFuYS1saXF1aWRpdHktcG9vbC8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvZXZhbHVhdGUuanM/Zjg2MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWE1vZHVsZX0gZnJvbSAnbWR4L3R5cGVzLmpzJ1xuICogQGltcG9ydCB7Q29tcGF0aWJsZX0gZnJvbSAndmZpbGUnXG4gKiBAaW1wb3J0IHtFdmFsdWF0ZU9wdGlvbnN9IGZyb20gJy4vdXRpbC9yZXNvbHZlLWV2YWx1YXRlLW9wdGlvbnMuanMnXG4gKi9cblxuaW1wb3J0IHtyZXNvbHZlRXZhbHVhdGVPcHRpb25zfSBmcm9tICcuL3V0aWwvcmVzb2x2ZS1ldmFsdWF0ZS1vcHRpb25zLmpzJ1xuaW1wb3J0IHtjb21waWxlLCBjb21waWxlU3luY30gZnJvbSAnLi9jb21waWxlLmpzJ1xuaW1wb3J0IHtydW4sIHJ1blN5bmN9IGZyb20gJy4vcnVuLmpzJ1xuXG4vKipcbiAqIENvbXBpbGUgYW5kIHJ1biBNRFguXG4gKlxuICogV2hlbiB5b3UgdHJ1c3QgeW91ciBjb250ZW50LCBgZXZhbHVhdGVgIGNhbiB3b3JrLlxuICogV2hlbiBwb3NzaWJsZSwgdXNlIGBjb21waWxlYCwgd3JpdGUgdG8gYSBmaWxlLCBhbmQgdGhlbiBydW4gd2l0aCBOb2RlIG9yIHVzZVxuICogb25lIG9mIHRoZSBpbnRlZ3JhdGlvbnMuXG4gKlxuICogPiDimKLvuI8gKipEYW5nZXIqKjogaXTigJlzIGNhbGxlZCAqKmV2YWx1YXRlKiogYmVjYXVzZSBpdCBgZXZhbGBzIEphdmFTY3JpcHQuXG4gKlxuICogIyMjIyMjIE5vdGVzXG4gKlxuICogQ29tcGlsaW5nIChhbmQgcnVubmluZykgTURYIHRha2VzIHRpbWUuXG4gKlxuICogSWYgeW91IGFyZSBsaXZlLXJlbmRlcmluZyBhIHN0cmluZyBvZiBNRFggdGhhdCBvZnRlbiBjaGFuZ2VzIHVzaW5nIGEgdmlydHVhbFxuICogRE9NIGJhc2VkIGZyYW1ld29yayAoc3VjaCBhcyBSZWFjdCksIG9uZSBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudCBpcyB0byBjYWxsXG4gKiB0aGUgYE1EWENvbnRlbnRgIGNvbXBvbmVudCB5b3Vyc2VsZi5cbiAqIFRoZSByZWFzb24gaXMgdGhhdCB0aGUgYGV2YWx1YXRlYCBjcmVhdGVzIGEgbmV3IGZ1bmN0aW9uIGVhY2ggdGltZSwgd2hpY2hcbiAqIGNhbm5vdCBiZSBkaWZmZWQ6XG4gKlxuICogYGBgZGlmZlxuICogIGNvbnN0IHtkZWZhdWx0OiBNRFhDb250ZW50fSA9IGF3YWl0IGV2YWx1YXRlKCfigKYnKVxuICpcbiAqIC08TURYQ29udGVudCB7Li4ucHJvcHN9IC8+XG4gKiArTURYQ29udGVudChwcm9wcylcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGF0aWJsZT59IGZpbGVcbiAqICAgTURYIGRvY3VtZW50IHRvIHBhcnNlLlxuICogQHBhcmFtIHtSZWFkb25seTxFdmFsdWF0ZU9wdGlvbnM+fSBvcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24gKCoqcmVxdWlyZWQqKikuXG4gKiBAcmV0dXJuIHtQcm9taXNlPE1EWE1vZHVsZT59XG4gKiAgIFByb21pc2UgdG8gYSBtb2R1bGU7XG4gKiAgIHRoZSByZXN1bHQgaXMgYW4gb2JqZWN0IHdpdGggYSBgZGVmYXVsdGAgZmllbGQgc2V0IHRvIHRoZSBjb21wb25lbnQ7XG4gKiAgIGFueXRoaW5nIGVsc2UgdGhhdCB3YXMgZXhwb3J0ZWQgaXMgYXZhaWxhYmxlIHRvby5cblxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXZhbHVhdGUoZmlsZSwgb3B0aW9ucykge1xuICBjb25zdCB7Y29tcGlsZXRpbWUsIHJ1bnRpbWV9ID0gcmVzb2x2ZUV2YWx1YXRlT3B0aW9ucyhvcHRpb25zKVxuICByZXR1cm4gcnVuKGF3YWl0IGNvbXBpbGUoZmlsZSwgY29tcGlsZXRpbWUpLCBydW50aW1lKVxufVxuXG4vKipcbiAqIENvbXBpbGUgYW5kIHJ1biBNRFgsIHN5bmNocm9ub3VzbHkuXG4gKlxuICogV2hlbiBwb3NzaWJsZSBwbGVhc2UgdXNlIHRoZSBhc3luYyBgZXZhbHVhdGVgLlxuICpcbiAqID4g4pii77iPICoqRGFuZ2VyKio6IGl04oCZcyBjYWxsZWQgKipldmFsdWF0ZSoqIGJlY2F1c2UgaXQgYGV2YWxgcyBKYXZhU2NyaXB0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGF0aWJsZT59IGZpbGVcbiAqICAgTURYIGRvY3VtZW50IHRvIHBhcnNlLlxuICogQHBhcmFtIHtSZWFkb25seTxFdmFsdWF0ZU9wdGlvbnM+fSBvcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24gKCoqcmVxdWlyZWQqKikuXG4gKiBAcmV0dXJuIHtNRFhNb2R1bGV9XG4gKiAgIE1vZHVsZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV2YWx1YXRlU3luYyhmaWxlLCBvcHRpb25zKSB7XG4gIGNvbnN0IHtjb21waWxldGltZSwgcnVudGltZX0gPSByZXNvbHZlRXZhbHVhdGVPcHRpb25zKG9wdGlvbnMpXG4gIHJldHVybiBydW5TeW5jKGNvbXBpbGVTeW5jKGZpbGUsIGNvbXBpbGV0aW1lKSwgcnVudGltZSlcbn1cbiJdLCJuYW1lcyI6WyJyZXNvbHZlRXZhbHVhdGVPcHRpb25zIiwiY29tcGlsZSIsImNvbXBpbGVTeW5jIiwicnVuIiwicnVuU3luYyIsImV2YWx1YXRlIiwiZmlsZSIsIm9wdGlvbnMiLCJjb21waWxldGltZSIsInJ1bnRpbWUiLCJldmFsdWF0ZVN5bmMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/evaluate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/node-types.js":
/*!****************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/node-types.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   nodeTypes: () => (/* binding */ nodeTypes)\n/* harmony export */ });\n/**\n * List of node types made by `mdast-util-mdx`, which have to be passed\n * through untouched from the mdast tree to the hast tree.\n */ const nodeTypes = /** @type {const} */ [\n    \"mdxFlowExpression\",\n    \"mdxJsxFlowElement\",\n    \"mdxJsxTextElement\",\n    \"mdxTextExpression\",\n    \"mdxjsEsm\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL25vZGUtdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Q0FHQyxHQUNNLE1BQU1BLFlBQVksa0JBQWtCLEdBQUk7SUFDN0M7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNELENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb2xhbmEtbGlxdWlkaXR5LXBvb2wvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL25vZGUtdHlwZXMuanM/ZWVhZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpc3Qgb2Ygbm9kZSB0eXBlcyBtYWRlIGJ5IGBtZGFzdC11dGlsLW1keGAsIHdoaWNoIGhhdmUgdG8gYmUgcGFzc2VkXG4gKiB0aHJvdWdoIHVudG91Y2hlZCBmcm9tIHRoZSBtZGFzdCB0cmVlIHRvIHRoZSBoYXN0IHRyZWUuXG4gKi9cbmV4cG9ydCBjb25zdCBub2RlVHlwZXMgPSAvKiogQHR5cGUge2NvbnN0fSAqLyAoW1xuICAnbWR4Rmxvd0V4cHJlc3Npb24nLFxuICAnbWR4SnN4Rmxvd0VsZW1lbnQnLFxuICAnbWR4SnN4VGV4dEVsZW1lbnQnLFxuICAnbWR4VGV4dEV4cHJlc3Npb24nLFxuICAnbWR4anNFc20nXG5dKVxuIl0sIm5hbWVzIjpbIm5vZGVUeXBlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/node-types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaBuildJsxTransform: () => (/* binding */ recmaBuildJsxTransform)\n/* harmony export */ });\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @import {Program} from 'estree-jsx'\n */ /**\n * @typedef Options\n *   Configuration for internal plugin `recma-build-jsx-transform`.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Whether to keep the import of the automatic runtime or get it from\n *   `arguments[0]` instead (default: `'program'`).\n */ \n\n/**\n * Plugin to change the tree after compiling JSX away.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */ function recmaBuildJsxTransform(options) {\n    /* c8 ignore next -- always given in `@mdx-js/mdx` */ const { outputFormat } = options || {};\n    /**\n   * @param {Program} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */ return function(tree) {\n        // Remove the pragma comment that we injected ourselves as it is no longer\n        // needed.\n        if (tree.comments) {\n            tree.comments = tree.comments.filter(function(d) {\n                return !d.data?._mdxIsPragmaComment;\n            });\n        }\n        // When compiling to a function body, replace the import that was just\n        // generated, and get `jsx`, `jsxs`, and `Fragment` from `arguments[0]`\n        // instead.\n        if (outputFormat === \"function-body\") {\n            let index = 0;\n            // Skip directives: JS currently only has `use strict`, but Acorn allows\n            // arbitrary ones.\n            // Practically things like `use client` could be used?\n            while(index < tree.body.length){\n                const child = tree.body[index];\n                if (\"directive\" in child && child.directive) {\n                    index++;\n                } else {\n                    break;\n                }\n            }\n            const declaration = tree.body[index];\n            if (declaration && declaration.type === \"ImportDeclaration\" && typeof declaration.source.value === \"string\" && /\\/jsx-(dev-)?runtime$/.test(declaration.source.value)) {\n                tree.body[index] = {\n                    type: \"VariableDeclaration\",\n                    kind: \"const\",\n                    declarations: (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_0__.specifiersToDeclarations)(declaration.specifiers, (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_1__.toIdOrMemberExpression)([\n                        \"arguments\",\n                        0\n                    ]))\n                };\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZWNtYS1idWlsZC1qc3gtdHJhbnNmb3JtLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztDQUVDLEdBRUQ7Ozs7OztDQU1DLEdBRXlGO0FBQ0Y7QUFFeEY7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNFLHVCQUF1QkMsT0FBTztJQUM1QyxtREFBbUQsR0FDbkQsTUFBTSxFQUFDQyxZQUFZLEVBQUMsR0FBR0QsV0FBVyxDQUFDO0lBRW5DOzs7OztHQUtDLEdBQ0QsT0FBTyxTQUFVRSxJQUFJO1FBQ25CLDBFQUEwRTtRQUMxRSxVQUFVO1FBQ1YsSUFBSUEsS0FBS0MsUUFBUSxFQUFFO1lBQ2pCRCxLQUFLQyxRQUFRLEdBQUdELEtBQUtDLFFBQVEsQ0FBQ0MsTUFBTSxDQUFDLFNBQVVDLENBQUM7Z0JBQzlDLE9BQU8sQ0FBQ0EsRUFBRUMsSUFBSSxFQUFFQztZQUNsQjtRQUNGO1FBRUEsc0VBQXNFO1FBQ3RFLHVFQUF1RTtRQUN2RSxXQUFXO1FBQ1gsSUFBSU4saUJBQWlCLGlCQUFpQjtZQUNwQyxJQUFJTyxRQUFRO1lBRVosd0VBQXdFO1lBQ3hFLGtCQUFrQjtZQUNsQixzREFBc0Q7WUFDdEQsTUFBT0EsUUFBUU4sS0FBS08sSUFBSSxDQUFDQyxNQUFNLENBQUU7Z0JBQy9CLE1BQU1DLFFBQVFULEtBQUtPLElBQUksQ0FBQ0QsTUFBTTtnQkFDOUIsSUFBSSxlQUFlRyxTQUFTQSxNQUFNQyxTQUFTLEVBQUU7b0JBQzNDSjtnQkFDRixPQUFPO29CQUNMO2dCQUNGO1lBQ0Y7WUFFQSxNQUFNSyxjQUFjWCxLQUFLTyxJQUFJLENBQUNELE1BQU07WUFFcEMsSUFDRUssZUFDQUEsWUFBWUMsSUFBSSxLQUFLLHVCQUNyQixPQUFPRCxZQUFZRSxNQUFNLENBQUNDLEtBQUssS0FBSyxZQUNwQyx3QkFBd0JDLElBQUksQ0FBQ0osWUFBWUUsTUFBTSxDQUFDQyxLQUFLLEdBQ3JEO2dCQUNBZCxLQUFLTyxJQUFJLENBQUNELE1BQU0sR0FBRztvQkFDakJNLE1BQU07b0JBQ05JLE1BQU07b0JBQ05DLGNBQWN0Qix5R0FBd0JBLENBQ3BDZ0IsWUFBWU8sVUFBVSxFQUN0QnRCLHVHQUFzQkEsQ0FBQzt3QkFBQzt3QkFBYTtxQkFBRTtnQkFFM0M7WUFDRjtRQUNGO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFuYS1saXF1aWRpdHktcG9vbC8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvcGx1Z2luL3JlY21hLWJ1aWxkLWpzeC10cmFuc2Zvcm0uanM/MDk0MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1Byb2dyYW19IGZyb20gJ2VzdHJlZS1qc3gnXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBPcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24gZm9yIGludGVybmFsIHBsdWdpbiBgcmVjbWEtYnVpbGQtanN4LXRyYW5zZm9ybWAuXG4gKiBAcHJvcGVydHkgeydmdW5jdGlvbi1ib2R5JyB8ICdwcm9ncmFtJyB8IG51bGwgfCB1bmRlZmluZWR9IFtvdXRwdXRGb3JtYXQ9J3Byb2dyYW0nXVxuICogICBXaGV0aGVyIHRvIGtlZXAgdGhlIGltcG9ydCBvZiB0aGUgYXV0b21hdGljIHJ1bnRpbWUgb3IgZ2V0IGl0IGZyb21cbiAqICAgYGFyZ3VtZW50c1swXWAgaW5zdGVhZCAoZGVmYXVsdDogYCdwcm9ncmFtJ2ApLlxuICovXG5cbmltcG9ydCB7c3BlY2lmaWVyc1RvRGVjbGFyYXRpb25zfSBmcm9tICcuLi91dGlsL2VzdHJlZS11dGlsLXNwZWNpZmllcnMtdG8tZGVjbGFyYXRpb25zLmpzJ1xuaW1wb3J0IHt0b0lkT3JNZW1iZXJFeHByZXNzaW9ufSBmcm9tICcuLi91dGlsL2VzdHJlZS11dGlsLXRvLWlkLW9yLW1lbWJlci1leHByZXNzaW9uLmpzJ1xuXG4vKipcbiAqIFBsdWdpbiB0byBjaGFuZ2UgdGhlIHRyZWUgYWZ0ZXIgY29tcGlsaW5nIEpTWCBhd2F5LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8T3B0aW9ucz4gfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0aW9uc11cbiAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICogQHJldHVybnNcbiAqICAgVHJhbnNmb3JtLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVjbWFCdWlsZEpzeFRyYW5zZm9ybShvcHRpb25zKSB7XG4gIC8qIGM4IGlnbm9yZSBuZXh0IC0tIGFsd2F5cyBnaXZlbiBpbiBgQG1keC1qcy9tZHhgICovXG4gIGNvbnN0IHtvdXRwdXRGb3JtYXR9ID0gb3B0aW9ucyB8fCB7fVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1Byb2dyYW19IHRyZWVcbiAgICogICBUcmVlLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKiAgIE5vdGhpbmcuXG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gKHRyZWUpIHtcbiAgICAvLyBSZW1vdmUgdGhlIHByYWdtYSBjb21tZW50IHRoYXQgd2UgaW5qZWN0ZWQgb3Vyc2VsdmVzIGFzIGl0IGlzIG5vIGxvbmdlclxuICAgIC8vIG5lZWRlZC5cbiAgICBpZiAodHJlZS5jb21tZW50cykge1xuICAgICAgdHJlZS5jb21tZW50cyA9IHRyZWUuY29tbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHJldHVybiAhZC5kYXRhPy5fbWR4SXNQcmFnbWFDb21tZW50XG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIFdoZW4gY29tcGlsaW5nIHRvIGEgZnVuY3Rpb24gYm9keSwgcmVwbGFjZSB0aGUgaW1wb3J0IHRoYXQgd2FzIGp1c3RcbiAgICAvLyBnZW5lcmF0ZWQsIGFuZCBnZXQgYGpzeGAsIGBqc3hzYCwgYW5kIGBGcmFnbWVudGAgZnJvbSBgYXJndW1lbnRzWzBdYFxuICAgIC8vIGluc3RlYWQuXG4gICAgaWYgKG91dHB1dEZvcm1hdCA9PT0gJ2Z1bmN0aW9uLWJvZHknKSB7XG4gICAgICBsZXQgaW5kZXggPSAwXG5cbiAgICAgIC8vIFNraXAgZGlyZWN0aXZlczogSlMgY3VycmVudGx5IG9ubHkgaGFzIGB1c2Ugc3RyaWN0YCwgYnV0IEFjb3JuIGFsbG93c1xuICAgICAgLy8gYXJiaXRyYXJ5IG9uZXMuXG4gICAgICAvLyBQcmFjdGljYWxseSB0aGluZ3MgbGlrZSBgdXNlIGNsaWVudGAgY291bGQgYmUgdXNlZD9cbiAgICAgIHdoaWxlIChpbmRleCA8IHRyZWUuYm9keS5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSB0cmVlLmJvZHlbaW5kZXhdXG4gICAgICAgIGlmICgnZGlyZWN0aXZlJyBpbiBjaGlsZCAmJiBjaGlsZC5kaXJlY3RpdmUpIHtcbiAgICAgICAgICBpbmRleCsrXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBkZWNsYXJhdGlvbiA9IHRyZWUuYm9keVtpbmRleF1cblxuICAgICAgaWYgKFxuICAgICAgICBkZWNsYXJhdGlvbiAmJlxuICAgICAgICBkZWNsYXJhdGlvbi50eXBlID09PSAnSW1wb3J0RGVjbGFyYXRpb24nICYmXG4gICAgICAgIHR5cGVvZiBkZWNsYXJhdGlvbi5zb3VyY2UudmFsdWUgPT09ICdzdHJpbmcnICYmXG4gICAgICAgIC9cXC9qc3gtKGRldi0pP3J1bnRpbWUkLy50ZXN0KGRlY2xhcmF0aW9uLnNvdXJjZS52YWx1ZSlcbiAgICAgICkge1xuICAgICAgICB0cmVlLmJvZHlbaW5kZXhdID0ge1xuICAgICAgICAgIHR5cGU6ICdWYXJpYWJsZURlY2xhcmF0aW9uJyxcbiAgICAgICAgICBraW5kOiAnY29uc3QnLFxuICAgICAgICAgIGRlY2xhcmF0aW9uczogc3BlY2lmaWVyc1RvRGVjbGFyYXRpb25zKFxuICAgICAgICAgICAgZGVjbGFyYXRpb24uc3BlY2lmaWVycyxcbiAgICAgICAgICAgIHRvSWRPck1lbWJlckV4cHJlc3Npb24oWydhcmd1bWVudHMnLCAwXSlcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJzcGVjaWZpZXJzVG9EZWNsYXJhdGlvbnMiLCJ0b0lkT3JNZW1iZXJFeHByZXNzaW9uIiwicmVjbWFCdWlsZEpzeFRyYW5zZm9ybSIsIm9wdGlvbnMiLCJvdXRwdXRGb3JtYXQiLCJ0cmVlIiwiY29tbWVudHMiLCJmaWx0ZXIiLCJkIiwiZGF0YSIsIl9tZHhJc1ByYWdtYUNvbW1lbnQiLCJpbmRleCIsImJvZHkiLCJsZW5ndGgiLCJjaGlsZCIsImRpcmVjdGl2ZSIsImRlY2xhcmF0aW9uIiwidHlwZSIsInNvdXJjZSIsInZhbHVlIiwidGVzdCIsImtpbmQiLCJkZWNsYXJhdGlvbnMiLCJzcGVjaWZpZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-document.js":
/*!***************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/plugin/recma-document.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaDocument: () => (/* binding */ recmaDocument)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_scope__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! estree-util-scope */ \"(ssr)/./node_modules/estree-util-scope/lib/index.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(ssr)/./node_modules/estree-walker/src/index.js\");\n/* harmony import */ var unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unist-util-position-from-estree */ \"(ssr)/./node_modules/unist-util-position-from-estree/lib/index.js\");\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unist-util-stringify-position */ \"(ssr)/./node_modules/unist-util-stringify-position/lib/index.js\");\n/* harmony import */ var _util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/estree-util-create.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\");\n/* harmony import */ var _util_estree_util_declaration_to_expression_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/estree-util-declaration-to-expression.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js\");\n/* harmony import */ var _util_estree_util_is_declaration_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/estree-util-is-declaration.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js\");\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @import {\n      CallExpression,\n      Directive,\n      ExportAllDeclaration,\n      ExportDefaultDeclaration,\n      ExportNamedDeclaration,\n      ExportSpecifier,\n      Expression,\n      FunctionDeclaration,\n      Identifier,\n      ImportDeclaration,\n      ImportDefaultSpecifier,\n      ImportExpression,\n      ImportSpecifier,\n      JSXElement,\n      JSXFragment,\n      Literal,\n      ModuleDeclaration,\n      Node,\n      Program,\n      Property,\n      SimpleLiteral,\n      SpreadElement,\n      Statement,\n      VariableDeclarator\n * } from 'estree-jsx'\n * @import {VFile} from 'vfile'\n * @import {ProcessorOptions} from '../core.js'\n */ \n\n\n\n\n\n\n\n\n\n/**\n * Wrap the estree in `MDXContent`.\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration.\n * @returns\n *   Transform.\n */ function recmaDocument(options) {\n    const baseUrl = options.baseUrl || undefined;\n    const baseHref = typeof baseUrl === \"object\" ? baseUrl.href : baseUrl;\n    const outputFormat = options.outputFormat || \"program\";\n    const pragma = options.pragma === undefined ? \"React.createElement\" : options.pragma;\n    const pragmaFrag = options.pragmaFrag === undefined ? \"React.Fragment\" : options.pragmaFrag;\n    const pragmaImportSource = options.pragmaImportSource || \"react\";\n    const jsxImportSource = options.jsxImportSource || \"react\";\n    const jsxRuntime = options.jsxRuntime || \"automatic\";\n    /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */ return function(tree, file) {\n        /** @type {Array<[string, string] | string>} */ const exportedValues = [];\n        /** @type {Array<Directive | ModuleDeclaration | Statement>} */ const replacement = [];\n        let exportAllCount = 0;\n        /** @type {ExportDefaultDeclaration | ExportSpecifier | undefined} */ let layout;\n        /** @type {boolean | undefined} */ let content;\n        /** @type {Node} */ let child;\n        if (jsxRuntime === \"classic\" && pragmaFrag) {\n            injectPragma(tree, \"@jsxFrag\", pragmaFrag);\n        }\n        if (jsxRuntime === \"classic\" && pragma) {\n            injectPragma(tree, \"@jsx\", pragma);\n        }\n        if (jsxRuntime === \"automatic\" && jsxImportSource) {\n            injectPragma(tree, \"@jsxImportSource\", jsxImportSource);\n        }\n        if (jsxRuntime) {\n            injectPragma(tree, \"@jsxRuntime\", jsxRuntime);\n        }\n        if (jsxRuntime === \"classic\" && pragmaImportSource) {\n            if (!pragma) {\n                throw new Error(\"Missing `pragma` in classic runtime with `pragmaImportSource`\");\n            }\n            handleEsm({\n                type: \"ImportDeclaration\",\n                specifiers: [\n                    {\n                        type: \"ImportDefaultSpecifier\",\n                        local: {\n                            type: \"Identifier\",\n                            name: pragma.split(\".\")[0]\n                        }\n                    }\n                ],\n                source: {\n                    type: \"Literal\",\n                    value: pragmaImportSource\n                }\n            });\n        }\n        // Find the `export default`, the JSX expression, and leave the rest\n        // (import/exports) as they are.\n        for (child of tree.body){\n            // ```tsx\n            // export default properties => <>{properties.children}</>\n            // ```\n            //\n            // Treat it as an inline layout declaration.\n            if (child.type === \"ExportDefaultDeclaration\") {\n                if (layout) {\n                    file.fail(\"Unexpected duplicate layout, expected a single layout (previous: \" + (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_1__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__.positionFromEstree)(layout)) + \")\", {\n                        ancestors: [\n                            tree,\n                            child\n                        ],\n                        place: (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__.positionFromEstree)(child),\n                        ruleId: \"duplicate-layout\",\n                        source: \"recma-document\"\n                    });\n                }\n                layout = child;\n                replacement.push({\n                    type: \"VariableDeclaration\",\n                    kind: \"const\",\n                    declarations: [\n                        {\n                            type: \"VariableDeclarator\",\n                            id: {\n                                type: \"Identifier\",\n                                name: \"MDXLayout\"\n                            },\n                            init: (0,_util_estree_util_is_declaration_js__WEBPACK_IMPORTED_MODULE_3__.isDeclaration)(child.declaration) ? (0,_util_estree_util_declaration_to_expression_js__WEBPACK_IMPORTED_MODULE_4__.declarationToExpression)(child.declaration) : child.declaration\n                        }\n                    ]\n                });\n            } else if (child.type === \"ExportNamedDeclaration\" && child.source) {\n                // Cast because always simple.\n                const source = /** @type {SimpleLiteral} */ child.source;\n                // Remove `default` or `as default`, but not `default as`, specifier.\n                child.specifiers = child.specifiers.filter(function(specifier) {\n                    if (specifier.exported.type === \"Identifier\" && specifier.exported.name === \"default\") {\n                        if (layout) {\n                            file.fail(\"Unexpected duplicate layout, expected a single layout (previous: \" + (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_1__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__.positionFromEstree)(layout)) + \")\", {\n                                ancestors: [\n                                    tree,\n                                    child,\n                                    specifier\n                                ],\n                                place: (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__.positionFromEstree)(child),\n                                ruleId: \"duplicate-layout\",\n                                source: \"recma-document\"\n                            });\n                        }\n                        layout = specifier;\n                        // Make it just an import: `import MDXLayout from '…'`.\n                        /** @type {Array<ImportDefaultSpecifier | ImportSpecifier>} */ const specifiers = [];\n                        // Default as default / something else as default.\n                        if (specifier.local.type === \"Identifier\" && specifier.local.name === \"default\") {\n                            specifiers.push({\n                                type: \"ImportDefaultSpecifier\",\n                                local: {\n                                    type: \"Identifier\",\n                                    name: \"MDXLayout\"\n                                }\n                            });\n                        } else {\n                            /** @type {ImportSpecifier} */ const importSpecifier = {\n                                type: \"ImportSpecifier\",\n                                imported: specifier.local,\n                                local: {\n                                    type: \"Identifier\",\n                                    name: \"MDXLayout\"\n                                }\n                            };\n                            (0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(specifier.local, importSpecifier);\n                            specifiers.push(importSpecifier);\n                        }\n                        /** @type {Literal} */ const from = {\n                            type: \"Literal\",\n                            value: source.value\n                        };\n                        (0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(source, from);\n                        /** @type {ImportDeclaration} */ const declaration = {\n                            type: \"ImportDeclaration\",\n                            specifiers,\n                            source: from\n                        };\n                        (0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(specifier, declaration);\n                        handleEsm(declaration);\n                        return false;\n                    }\n                    return true;\n                });\n                // If there are other things imported, keep it.\n                if (child.specifiers.length > 0) {\n                    handleExport(child);\n                }\n            } else if (child.type === \"ExportNamedDeclaration\" || child.type === \"ExportAllDeclaration\") {\n                handleExport(child);\n            } else if (child.type === \"ImportDeclaration\") {\n                handleEsm(child);\n            } else if (child.type === \"ExpressionStatement\" && (child.expression.type === \"JSXElement\" || child.expression.type === \"JSXFragment\")) {\n                content = true;\n                replacement.push(...createMdxContent(child.expression, outputFormat, Boolean(layout)));\n            } else {\n                // This catch-all branch is because plugins might add other things.\n                // Normally, we only have import/export/jsx, but just add whatever’s\n                // there.\n                replacement.push(child);\n            }\n        }\n        // If there was no JSX content at all, add an empty function.\n        if (!content) {\n            replacement.push(...createMdxContent(undefined, outputFormat, Boolean(layout)));\n        }\n        exportedValues.push([\n            \"MDXContent\",\n            \"default\"\n        ]);\n        if (outputFormat === \"function-body\") {\n            replacement.push({\n                type: \"ReturnStatement\",\n                argument: {\n                    type: \"ObjectExpression\",\n                    properties: [\n                        ...Array.from({\n                            length: exportAllCount\n                        }).map(/**\n               * @param {undefined} _\n               *   Nothing.\n               * @param {number} index\n               *   Index.\n               * @returns {SpreadElement}\n               *   Node.\n               */ function(_, index) {\n                            return {\n                                type: \"SpreadElement\",\n                                argument: {\n                                    type: \"Identifier\",\n                                    name: \"_exportAll\" + (index + 1)\n                                }\n                            };\n                        }),\n                        ...exportedValues.map(function(d) {\n                            /** @type {Property} */ const property = {\n                                type: \"Property\",\n                                kind: \"init\",\n                                method: false,\n                                computed: false,\n                                shorthand: typeof d === \"string\",\n                                key: {\n                                    type: \"Identifier\",\n                                    name: typeof d === \"string\" ? d : d[1]\n                                },\n                                value: {\n                                    type: \"Identifier\",\n                                    name: typeof d === \"string\" ? d : d[0]\n                                }\n                            };\n                            return property;\n                        })\n                    ]\n                }\n            });\n        }\n        tree.body = replacement;\n        let usesImportMetaUrlVariable = false;\n        let usesResolveDynamicHelper = false;\n        if (baseHref || outputFormat === \"function-body\") {\n            (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(tree, {\n                enter (node) {\n                    if ((node.type === \"ExportAllDeclaration\" || node.type === \"ExportNamedDeclaration\" || node.type === \"ImportDeclaration\") && node.source) {\n                        // We never hit this branch when generating function bodies, as\n                        // statements are already compiled away into import expressions.\n                        (0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(baseHref, \"unexpected missing `baseHref` in branch\");\n                        let value = node.source.value;\n                        // The literal source for statements can only be string.\n                        (0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(typeof value === \"string\", \"expected string source\");\n                        // Resolve a specifier.\n                        // This is the same as `_resolveDynamicMdxSpecifier`, which has to\n                        // be injected to work with expressions at runtime, but as we have\n                        // `baseHref` at compile time here and statements are static\n                        // strings, we can do it now.\n                        try {\n                            // To do: next major: use `URL.canParse`.\n                            // eslint-disable-next-line no-new\n                            new URL(value);\n                        // Fine: a full URL.\n                        } catch  {\n                            if (value.startsWith(\"/\") || value.startsWith(\"./\") || value.startsWith(\"../\")) {\n                                value = new URL(value, baseHref).href;\n                            } else {\n                            // Fine: are bare specifier.\n                            }\n                        }\n                        /** @type {SimpleLiteral} */ const replacement = {\n                            type: \"Literal\",\n                            value\n                        };\n                        (0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(node.source, replacement);\n                        node.source = replacement;\n                        return;\n                    }\n                    if (node.type === \"ImportExpression\") {\n                        usesResolveDynamicHelper = true;\n                        /** @type {CallExpression} */ const replacement = {\n                            type: \"CallExpression\",\n                            callee: {\n                                type: \"Identifier\",\n                                name: \"_resolveDynamicMdxSpecifier\"\n                            },\n                            arguments: [\n                                node.source\n                            ],\n                            optional: false\n                        };\n                        node.source = replacement;\n                        return;\n                    }\n                    // To do: add support for `import.meta.resolve`.\n                    if (node.type === \"MemberExpression\" && \"object\" in node && node.object.type === \"MetaProperty\" && node.property.type === \"Identifier\" && node.object.meta.name === \"import\" && node.object.property.name === \"meta\" && node.property.name === \"url\") {\n                        usesImportMetaUrlVariable = true;\n                        /** @type {Identifier} */ const replacement = {\n                            type: \"Identifier\",\n                            name: \"_importMetaUrl\"\n                        };\n                        (0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(node, replacement);\n                        this.replace(replacement);\n                    }\n                }\n            });\n        }\n        if (usesResolveDynamicHelper) {\n            if (!baseHref) {\n                usesImportMetaUrlVariable = true;\n            }\n            tree.body.push(resolveDynamicMdxSpecifier(baseHref ? {\n                type: \"Literal\",\n                value: baseHref\n            } : {\n                type: \"Identifier\",\n                name: \"_importMetaUrl\"\n            }));\n        }\n        if (usesImportMetaUrlVariable) {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(outputFormat === \"function-body\", \"expected `function-body` when using dynamic url injection\");\n            tree.body.unshift(...createImportMetaUrlVariable());\n        }\n        /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration} node\n     *   Export node.\n     * @returns {undefined}\n     *   Nothing.\n     */ function handleExport(node) {\n            if (node.type === \"ExportNamedDeclaration\") {\n                // ```tsx\n                // export function a() {}\n                // export class A {}\n                // export var a = 1\n                // ```\n                if (node.declaration) {\n                    const visitors = (0,estree_util_scope__WEBPACK_IMPORTED_MODULE_7__.createVisitors)();\n                    // Walk the top-level scope.\n                    (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(node, {\n                        enter (node) {\n                            visitors.enter(node);\n                            if (node.type === \"ArrowFunctionExpression\" || node.type === \"FunctionDeclaration\" || node.type === \"FunctionExpression\") {\n                                this.skip();\n                                visitors.exit(node);\n                            }\n                        },\n                        leave: visitors.exit\n                    });\n                    exportedValues.push(...visitors.scopes[0].defined);\n                }\n                // ```tsx\n                // export {a, b as c}\n                // export {a, b as c} from 'd'\n                // ```\n                for (child of node.specifiers){\n                    if (child.exported.type === \"Identifier\") {\n                        exportedValues.push(child.exported.name);\n                    /* c8 ignore next 5 -- to do: <https://github.com/mdx-js/mdx/issues/2536> */ } else {\n                        // Must be string.\n                        (0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(typeof child.exported.value === \"string\");\n                        exportedValues.push(child.exported.value);\n                    }\n                }\n            }\n            handleEsm(node);\n        }\n        /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration | ImportDeclaration} node\n     *   Export or import node.\n     * @returns {undefined}\n     *   Nothing.\n     */ function handleEsm(node) {\n            /** @type {ModuleDeclaration | Statement | undefined} */ let replace;\n            /** @type {Expression} */ let init;\n            if (outputFormat === \"function-body\") {\n                if (// Always have a source:\n                node.type === \"ImportDeclaration\" || node.type === \"ExportAllDeclaration\" || // Source optional:\n                node.type === \"ExportNamedDeclaration\" && node.source) {\n                    // We always have a source, but types say they can be missing.\n                    (0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(node.source, \"expected `node.source` to be defined\");\n                    // ```\n                    // import 'a'\n                    // //=> await import('a')\n                    // import a from 'b'\n                    // //=> const {default: a} = await import('b')\n                    // export {a, b as c} from 'd'\n                    // //=> const {a, c: b} = await import('d')\n                    // export * from 'a'\n                    // //=> const _exportAll0 = await import('a')\n                    // ```\n                    /** @type {ImportExpression} */ const argument = {\n                        type: \"ImportExpression\",\n                        source: node.source\n                    };\n                    (0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(node, argument);\n                    init = {\n                        type: \"AwaitExpression\",\n                        argument\n                    };\n                    if ((node.type === \"ImportDeclaration\" || node.type === \"ExportNamedDeclaration\") && node.specifiers.length === 0) {\n                        replace = {\n                            type: \"ExpressionStatement\",\n                            expression: init\n                        };\n                    } else {\n                        replace = {\n                            type: \"VariableDeclaration\",\n                            kind: \"const\",\n                            declarations: node.type === \"ExportAllDeclaration\" ? [\n                                {\n                                    type: \"VariableDeclarator\",\n                                    id: {\n                                        type: \"Identifier\",\n                                        name: \"_exportAll\" + ++exportAllCount\n                                    },\n                                    init\n                                }\n                            ] : (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_8__.specifiersToDeclarations)(node.specifiers, init)\n                        };\n                    }\n                } else if (node.declaration) {\n                    replace = node.declaration;\n                } else {\n                    /** @type {Array<VariableDeclarator>} */ const declarators = [];\n                    for (const specifier of node.specifiers){\n                        // `id` can only be an identifier,\n                        // so we ignore literal.\n                        if (specifier.exported.type === \"Identifier\" && specifier.local.type === \"Identifier\" && specifier.local.name !== specifier.exported.name) {\n                            declarators.push({\n                                type: \"VariableDeclarator\",\n                                id: specifier.exported,\n                                init: specifier.local\n                            });\n                        }\n                    }\n                    if (declarators.length > 0) {\n                        replace = {\n                            type: \"VariableDeclaration\",\n                            kind: \"const\",\n                            declarations: declarators\n                        };\n                    }\n                }\n            } else {\n                replace = node;\n            }\n            if (replace) {\n                replacement.push(replace);\n            }\n        }\n    };\n    /**\n   * @param {Readonly<Expression> | undefined} content\n   *   Content.\n   * @param {'function-body' | 'program'} outputFormat\n   *   Output format.\n   * @param {boolean | undefined} [hasInternalLayout=false]\n   *   Whether there’s an internal layout (default: `false`).\n   * @returns {Array<ExportDefaultDeclaration | FunctionDeclaration>}\n   *   Functions.\n   */ function createMdxContent(content, outputFormat, hasInternalLayout) {\n        /** @type {JSXElement} */ const element = {\n            type: \"JSXElement\",\n            openingElement: {\n                type: \"JSXOpeningElement\",\n                name: {\n                    type: \"JSXIdentifier\",\n                    name: \"MDXLayout\"\n                },\n                attributes: [\n                    {\n                        type: \"JSXSpreadAttribute\",\n                        argument: {\n                            type: \"Identifier\",\n                            name: \"props\"\n                        }\n                    }\n                ],\n                selfClosing: false\n            },\n            closingElement: {\n                type: \"JSXClosingElement\",\n                name: {\n                    type: \"JSXIdentifier\",\n                    name: \"MDXLayout\"\n                }\n            },\n            children: [\n                {\n                    type: \"JSXElement\",\n                    openingElement: {\n                        type: \"JSXOpeningElement\",\n                        name: {\n                            type: \"JSXIdentifier\",\n                            name: \"_createMdxContent\"\n                        },\n                        attributes: [\n                            {\n                                type: \"JSXSpreadAttribute\",\n                                argument: {\n                                    type: \"Identifier\",\n                                    name: \"props\"\n                                }\n                            }\n                        ],\n                        selfClosing: true\n                    },\n                    closingElement: null,\n                    children: []\n                }\n            ]\n        };\n        let result = /** @type {Expression} */ element;\n        if (!hasInternalLayout) {\n            result = {\n                type: \"ConditionalExpression\",\n                test: {\n                    type: \"Identifier\",\n                    name: \"MDXLayout\"\n                },\n                consequent: result,\n                alternate: {\n                    type: \"CallExpression\",\n                    callee: {\n                        type: \"Identifier\",\n                        name: \"_createMdxContent\"\n                    },\n                    arguments: [\n                        {\n                            type: \"Identifier\",\n                            name: \"props\"\n                        }\n                    ],\n                    optional: false\n                }\n            };\n        }\n        let argument = // Cast because TS otherwise does not think `JSXFragment`s are expressions.\n        /** @type {Readonly<Expression> | Readonly<JSXFragment>} */ content || {\n            type: \"Identifier\",\n            name: \"undefined\"\n        };\n        // Unwrap a fragment of a single element.\n        if (argument.type === \"JSXFragment\" && argument.children.length === 1 && argument.children[0].type === \"JSXElement\") {\n            argument = argument.children[0];\n        }\n        let awaitExpression = false;\n        (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(argument, {\n            enter (node) {\n                if (node.type === \"ArrowFunctionExpression\" || node.type === \"FunctionDeclaration\" || node.type === \"FunctionExpression\") {\n                    return this.skip();\n                }\n                if (node.type === \"AwaitExpression\" || /* c8 ignore next 2 -- can only occur in a function (which then can\n           * only be async, so skipped it) */ node.type === \"ForOfStatement\" && node.await) {\n                    awaitExpression = true;\n                }\n            }\n        });\n        /** @type {FunctionDeclaration} */ const declaration = {\n            type: \"FunctionDeclaration\",\n            id: {\n                type: \"Identifier\",\n                name: \"MDXContent\"\n            },\n            params: [\n                {\n                    type: \"AssignmentPattern\",\n                    left: {\n                        type: \"Identifier\",\n                        name: \"props\"\n                    },\n                    right: {\n                        type: \"ObjectExpression\",\n                        properties: []\n                    }\n                }\n            ],\n            body: {\n                type: \"BlockStatement\",\n                body: [\n                    {\n                        type: \"ReturnStatement\",\n                        argument: result\n                    }\n                ]\n            }\n        };\n        return [\n            {\n                type: \"FunctionDeclaration\",\n                async: awaitExpression,\n                id: {\n                    type: \"Identifier\",\n                    name: \"_createMdxContent\"\n                },\n                params: [\n                    {\n                        type: \"Identifier\",\n                        name: \"props\"\n                    }\n                ],\n                body: {\n                    type: \"BlockStatement\",\n                    body: [\n                        {\n                            type: \"ReturnStatement\",\n                            // Cast because TS doesn’t think `JSXFragment` is an expression.\n                            // eslint-disable-next-line object-shorthand\n                            argument: /** @type {Expression} */ argument\n                        }\n                    ]\n                }\n            },\n            outputFormat === \"program\" ? {\n                type: \"ExportDefaultDeclaration\",\n                declaration\n            } : declaration\n        ];\n    }\n}\n/**\n * @param {Program} tree\n * @param {string} name\n * @param {string} value\n * @returns {undefined}\n */ function injectPragma(tree, name, value) {\n    tree.comments?.unshift({\n        type: \"Block\",\n        value: name + \" \" + value,\n        data: {\n            _mdxIsPragmaComment: true\n        }\n    });\n}\n/**\n * @param {Expression} importMetaUrl\n * @returns {FunctionDeclaration}\n */ function resolveDynamicMdxSpecifier(importMetaUrl) {\n    return {\n        type: \"FunctionDeclaration\",\n        id: {\n            type: \"Identifier\",\n            name: \"_resolveDynamicMdxSpecifier\"\n        },\n        generator: false,\n        async: false,\n        params: [\n            {\n                type: \"Identifier\",\n                name: \"d\"\n            }\n        ],\n        body: {\n            type: \"BlockStatement\",\n            body: [\n                {\n                    type: \"IfStatement\",\n                    test: {\n                        type: \"BinaryExpression\",\n                        left: {\n                            type: \"UnaryExpression\",\n                            operator: \"typeof\",\n                            prefix: true,\n                            argument: {\n                                type: \"Identifier\",\n                                name: \"d\"\n                            }\n                        },\n                        operator: \"!==\",\n                        right: {\n                            type: \"Literal\",\n                            value: \"string\"\n                        }\n                    },\n                    consequent: {\n                        type: \"ReturnStatement\",\n                        argument: {\n                            type: \"Identifier\",\n                            name: \"d\"\n                        }\n                    },\n                    alternate: null\n                },\n                // To do: use `URL.canParse` when widely supported (see commented\n                // out code below).\n                {\n                    type: \"TryStatement\",\n                    block: {\n                        type: \"BlockStatement\",\n                        body: [\n                            {\n                                type: \"ExpressionStatement\",\n                                expression: {\n                                    type: \"NewExpression\",\n                                    callee: {\n                                        type: \"Identifier\",\n                                        name: \"URL\"\n                                    },\n                                    arguments: [\n                                        {\n                                            type: \"Identifier\",\n                                            name: \"d\"\n                                        }\n                                    ]\n                                }\n                            },\n                            {\n                                type: \"ReturnStatement\",\n                                argument: {\n                                    type: \"Identifier\",\n                                    name: \"d\"\n                                }\n                            }\n                        ]\n                    },\n                    handler: {\n                        type: \"CatchClause\",\n                        param: null,\n                        body: {\n                            type: \"BlockStatement\",\n                            body: []\n                        }\n                    },\n                    finalizer: null\n                },\n                // To do: use `URL.canParse` when widely supported.\n                // {\n                //   type: 'IfStatement',\n                //   test: {\n                //     type: 'CallExpression',\n                //     callee: toIdOrMemberExpression(['URL', 'canParse']),\n                //     arguments: [{type: 'Identifier', name: 'd'}],\n                //     optional: false\n                //   },\n                //   consequent: {\n                //     type: 'ReturnStatement',\n                //     argument: {type: 'Identifier', name: 'd'}\n                //   },\n                //   alternate: null\n                // },\n                {\n                    type: \"IfStatement\",\n                    test: {\n                        type: \"LogicalExpression\",\n                        left: {\n                            type: \"LogicalExpression\",\n                            left: {\n                                type: \"CallExpression\",\n                                callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)([\n                                    \"d\",\n                                    \"startsWith\"\n                                ]),\n                                arguments: [\n                                    {\n                                        type: \"Literal\",\n                                        value: \"/\"\n                                    }\n                                ],\n                                optional: false\n                            },\n                            operator: \"||\",\n                            right: {\n                                type: \"CallExpression\",\n                                callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)([\n                                    \"d\",\n                                    \"startsWith\"\n                                ]),\n                                arguments: [\n                                    {\n                                        type: \"Literal\",\n                                        value: \"./\"\n                                    }\n                                ],\n                                optional: false\n                            }\n                        },\n                        operator: \"||\",\n                        right: {\n                            type: \"CallExpression\",\n                            callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)([\n                                \"d\",\n                                \"startsWith\"\n                            ]),\n                            arguments: [\n                                {\n                                    type: \"Literal\",\n                                    value: \"../\"\n                                }\n                            ],\n                            optional: false\n                        }\n                    },\n                    consequent: {\n                        type: \"ReturnStatement\",\n                        argument: {\n                            type: \"MemberExpression\",\n                            object: {\n                                type: \"NewExpression\",\n                                callee: {\n                                    type: \"Identifier\",\n                                    name: \"URL\"\n                                },\n                                arguments: [\n                                    {\n                                        type: \"Identifier\",\n                                        name: \"d\"\n                                    },\n                                    importMetaUrl\n                                ]\n                            },\n                            property: {\n                                type: \"Identifier\",\n                                name: \"href\"\n                            },\n                            computed: false,\n                            optional: false\n                        }\n                    },\n                    alternate: null\n                },\n                {\n                    type: \"ReturnStatement\",\n                    argument: {\n                        type: \"Identifier\",\n                        name: \"d\"\n                    }\n                }\n            ]\n        }\n    };\n}\n/**\n * @returns {Array<Statement>}\n */ function createImportMetaUrlVariable() {\n    return [\n        {\n            type: \"VariableDeclaration\",\n            declarations: [\n                {\n                    type: \"VariableDeclarator\",\n                    id: {\n                        type: \"Identifier\",\n                        name: \"_importMetaUrl\"\n                    },\n                    init: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)([\n                        \"arguments\",\n                        0,\n                        \"baseUrl\"\n                    ])\n                }\n            ],\n            kind: \"const\"\n        },\n        {\n            type: \"IfStatement\",\n            test: {\n                type: \"UnaryExpression\",\n                operator: \"!\",\n                prefix: true,\n                argument: {\n                    type: \"Identifier\",\n                    name: \"_importMetaUrl\"\n                }\n            },\n            consequent: {\n                type: \"ThrowStatement\",\n                argument: {\n                    type: \"NewExpression\",\n                    callee: {\n                        type: \"Identifier\",\n                        name: \"Error\"\n                    },\n                    arguments: [\n                        {\n                            type: \"Literal\",\n                            value: \"Unexpected missing `options.baseUrl` needed to support `export … from`, `import`, or `import.meta.url` when generating `function-body`\"\n                        }\n                    ]\n                }\n            },\n            alternate: null\n        }\n    ];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-document.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js":
/*!******************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaJsxRewrite: () => (/* binding */ recmaJsxRewrite)\n/* harmony export */ });\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(ssr)/./node_modules/estree-util-is-identifier-name/lib/index.js\");\n/* harmony import */ var estree_util_scope__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! estree-util-scope */ \"(ssr)/./node_modules/estree-util-scope/lib/index.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(ssr)/./node_modules/estree-walker/src/index.js\");\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! unist-util-stringify-position */ \"(ssr)/./node_modules/unist-util-stringify-position/lib/index.js\");\n/* harmony import */ var unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! unist-util-position-from-estree */ \"(ssr)/./node_modules/unist-util-position-from-estree/lib/index.js\");\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/estree-util-to-binary-addition.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @import {\n      Expression,\n      Function as EstreeFunction,\n      Identifier,\n      ImportSpecifier,\n      JSXElement,\n      ModuleDeclaration,\n      ObjectPattern,\n      Program,\n      Property,\n      SpreadElement,\n      Statement,\n      VariableDeclarator\n * } from 'estree-jsx'\n * @import {Scope} from 'estree-util-scope'\n * @import {VFile} from 'vfile'\n * @import {ProcessorOptions} from '../core.js'\n */ /**\n * @typedef StackEntry\n *   Entry.\n * @property {Array<string>} components\n *   Used components.\n * @property {Map<string, string>} idToInvalidComponentName\n *   Map of JSX identifiers which cannot be used as JS identifiers, to valid JS identifiers.\n * @property {Readonly<EstreeFunction>} node\n *   Function.\n * @property {Array<string>} objects\n *   Identifiers of used objects (such as `x` in `x.y`).\n * @property {Record<string, {node: Readonly<JSXElement>, component: boolean}>} references\n *   Map of JSX identifiers for components and objects, to where they were first used.\n * @property {Array<string>} tags\n *   Tag names.\n */ \n\n\n\n\n\n\n\n/**\n * A plugin that rewrites JSX in functions to accept components as\n * `props.components` (when the function is called `_createMdxContent`), or from\n * a provider (if there is one).\n * It also makes sure that any undefined components are defined: either from\n * received components or as a function that throws an error.\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration (optional).\n * @returns\n *   Transform.\n */ function recmaJsxRewrite(options) {\n    const { development, outputFormat, providerImportSource } = options;\n    /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */ return function(tree, file) {\n        const visitors = (0,estree_util_scope__WEBPACK_IMPORTED_MODULE_1__.createVisitors)();\n        /** @type {Array<StackEntry>} */ const functionStack = [];\n        let importProvider = false;\n        let createErrorHelper = false;\n        (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(tree, {\n            enter (node) {\n                visitors.enter(node);\n                if (node.type === \"FunctionDeclaration\" || node.type === \"FunctionExpression\" || node.type === \"ArrowFunctionExpression\") {\n                    functionStack.push({\n                        components: [],\n                        idToInvalidComponentName: new Map(),\n                        node,\n                        objects: [],\n                        references: {},\n                        tags: []\n                    });\n                    // `MDXContent` only ever contains `MDXLayout`.\n                    if (isNamedFunction(node, \"MDXContent\") && !inScope(visitors.scopes, \"MDXLayout\")) {\n                        functionStack[0].components.push(\"MDXLayout\");\n                    }\n                }\n                const functionInfo = functionStack[0];\n                if (!functionInfo || !isNamedFunction(functionInfo.node, \"_createMdxContent\") && !providerImportSource) {\n                    return;\n                }\n                if (node.type === \"JSXElement\") {\n                    let name = node.openingElement.name;\n                    // `<x.y>`, `<Foo.Bar>`, `<x.y.z>`.\n                    if (name.type === \"JSXMemberExpression\") {\n                        /** @type {Array<string>} */ const ids = [];\n                        // Find the left-most identifier.\n                        while(name.type === \"JSXMemberExpression\"){\n                            ids.unshift(name.property.name);\n                            name = name.object;\n                        }\n                        ids.unshift(name.name);\n                        const fullId = ids.join(\".\");\n                        const id = name.name;\n                        const isInScope = inScope(visitors.scopes, id);\n                        if (!Object.hasOwn(functionInfo.references, fullId) && (!isInScope || // If the parent scope is `_createMdxContent`, then this\n                        // references a component we can add a check statement for.\n                        functionStack.length === 1 && functionStack[0].node.type === \"FunctionDeclaration\" && isNamedFunction(functionStack[0].node, \"_createMdxContent\"))) {\n                            functionInfo.references[fullId] = {\n                                component: true,\n                                node\n                            };\n                        }\n                        if (!functionInfo.objects.includes(id) && !isInScope) {\n                            functionInfo.objects.push(id);\n                        }\n                    } else if (name.type === \"JSXNamespacedName\") {\n                    // Ignore namespaces.\n                    } else if ((0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(name.name) && !/^[a-z]/.test(name.name)) {\n                        const id = name.name;\n                        if (!inScope(visitors.scopes, id)) {\n                            // No need to add an error for an undefined layout — we use an\n                            // `if` later.\n                            if (id !== \"MDXLayout\" && !Object.hasOwn(functionInfo.references, id)) {\n                                functionInfo.references[id] = {\n                                    component: true,\n                                    node\n                                };\n                            }\n                            if (!functionInfo.components.includes(id)) {\n                                functionInfo.components.push(id);\n                            }\n                        }\n                    } else if (node.data && node.data._mdxExplicitJsx) {\n                    // Do not turn explicit JSX into components from `_components`.\n                    // As in, a given `h1` component is used for `# heading` (next case),\n                    // but not for `<h1>heading</h1>`.\n                    } else {\n                        const id = name.name;\n                        if (!functionInfo.tags.includes(id)) {\n                            functionInfo.tags.push(id);\n                        }\n                        /** @type {Array<number | string>} */ let jsxIdExpression = [\n                            \"_components\",\n                            id\n                        ];\n                        if ((0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(id) === false) {\n                            let invalidComponentName = functionInfo.idToInvalidComponentName.get(id);\n                            if (invalidComponentName === undefined) {\n                                invalidComponentName = `_component${functionInfo.idToInvalidComponentName.size}`;\n                                functionInfo.idToInvalidComponentName.set(id, invalidComponentName);\n                            }\n                            jsxIdExpression = [\n                                invalidComponentName\n                            ];\n                        }\n                        node.openingElement.name = (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toJsxIdOrMemberExpression)(jsxIdExpression);\n                        if (node.closingElement) {\n                            node.closingElement.name = (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toJsxIdOrMemberExpression)(jsxIdExpression);\n                        }\n                    }\n                }\n            },\n            leave (node) {\n                visitors.exit(node);\n                /** @type {Array<Property | SpreadElement>} */ const defaults = [];\n                /** @type {Array<string>} */ const actual = [];\n                /** @type {Array<Expression>} */ const parameters = [];\n                /** @type {Array<VariableDeclarator>} */ const declarations = [];\n                if (node.type === \"FunctionDeclaration\" || node.type === \"FunctionExpression\" || node.type === \"ArrowFunctionExpression\") {\n                    const functionInfo = functionStack[functionStack.length - 1];\n                    /** @type {string} */ let name;\n                    for (name of functionInfo.tags.sort()){\n                        defaults.push({\n                            type: \"Property\",\n                            kind: \"init\",\n                            key: (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(name) ? {\n                                type: \"Identifier\",\n                                name\n                            } : {\n                                type: \"Literal\",\n                                value: name\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: name\n                            },\n                            method: false,\n                            shorthand: false,\n                            computed: false\n                        });\n                    }\n                    actual.push(...functionInfo.components);\n                    for (name of functionInfo.objects){\n                        // In some cases, a component is used directly (`<X>`) but it’s also\n                        // used as an object (`<X.Y>`).\n                        if (!actual.includes(name)) {\n                            actual.push(name);\n                        }\n                    }\n                    actual.sort();\n                    /** @type {Array<Statement>} */ const statements = [];\n                    if (defaults.length > 0 || actual.length > 0 || functionInfo.idToInvalidComponentName.size > 0) {\n                        if (providerImportSource) {\n                            importProvider = true;\n                            parameters.push({\n                                type: \"CallExpression\",\n                                callee: {\n                                    type: \"Identifier\",\n                                    name: \"_provideComponents\"\n                                },\n                                arguments: [],\n                                optional: false\n                            });\n                        }\n                        // Accept `components` as a prop if this is the `MDXContent` or\n                        // `_createMdxContent` function.\n                        if (isNamedFunction(functionInfo.node, \"MDXContent\") || isNamedFunction(functionInfo.node, \"_createMdxContent\")) {\n                            parameters.push((0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)([\n                                \"props\",\n                                \"components\"\n                            ]));\n                        }\n                        if (defaults.length > 0 || parameters.length > 1) {\n                            for (const parameter of parameters){\n                                defaults.push({\n                                    type: \"SpreadElement\",\n                                    argument: parameter\n                                });\n                            }\n                        }\n                        // If we’re getting components from several sources, merge them.\n                        /** @type {Expression} */ let componentsInit = defaults.length > 0 ? {\n                            type: \"ObjectExpression\",\n                            properties: defaults\n                        } : // make sure it’s defined.\n                        {\n                            type: \"LogicalExpression\",\n                            operator: \"||\",\n                            left: parameters[0],\n                            right: {\n                                type: \"ObjectExpression\",\n                                properties: []\n                            }\n                        };\n                        /** @type {ObjectPattern | undefined} */ let componentsPattern;\n                        // Add components to scope.\n                        // For `['MyComponent', 'MDXLayout']` this generates:\n                        // ```tsx\n                        // const {MyComponent, wrapper: MDXLayout} = _components\n                        // ```\n                        // Note that MDXLayout is special as it’s taken from\n                        // `_components.wrapper`.\n                        if (actual.length > 0) {\n                            componentsPattern = {\n                                type: \"ObjectPattern\",\n                                properties: actual.map(function(name) {\n                                    return {\n                                        type: \"Property\",\n                                        kind: \"init\",\n                                        key: {\n                                            type: \"Identifier\",\n                                            name: name === \"MDXLayout\" ? \"wrapper\" : name\n                                        },\n                                        value: {\n                                            type: \"Identifier\",\n                                            name\n                                        },\n                                        method: false,\n                                        shorthand: name !== \"MDXLayout\",\n                                        computed: false\n                                    };\n                                })\n                            };\n                        }\n                        if (functionInfo.tags.length > 0) {\n                            declarations.push({\n                                type: \"VariableDeclarator\",\n                                id: {\n                                    type: \"Identifier\",\n                                    name: \"_components\"\n                                },\n                                init: componentsInit\n                            });\n                            componentsInit = {\n                                type: \"Identifier\",\n                                name: \"_components\"\n                            };\n                        }\n                        if (isNamedFunction(functionInfo.node, \"_createMdxContent\")) {\n                            for (const [id, componentName] of [\n                                ...functionInfo.idToInvalidComponentName\n                            ].sort(function([a], [b]) {\n                                return a.localeCompare(b);\n                            })){\n                                // For JSX IDs that can’t be represented as JavaScript IDs (as in,\n                                // those with dashes, such as `custom-element`), generate a\n                                // separate variable that is a valid JS ID (such as `_component0`),\n                                // and takes it from components:\n                                // `const _component0 = _components['custom-element']`\n                                declarations.push({\n                                    type: \"VariableDeclarator\",\n                                    id: {\n                                        type: \"Identifier\",\n                                        name: componentName\n                                    },\n                                    init: {\n                                        type: \"MemberExpression\",\n                                        object: {\n                                            type: \"Identifier\",\n                                            name: \"_components\"\n                                        },\n                                        property: {\n                                            type: \"Literal\",\n                                            value: id\n                                        },\n                                        computed: true,\n                                        optional: false\n                                    }\n                                });\n                            }\n                        }\n                        if (componentsPattern) {\n                            declarations.push({\n                                type: \"VariableDeclarator\",\n                                id: componentsPattern,\n                                init: componentsInit\n                            });\n                        }\n                        if (declarations.length > 0) {\n                            statements.push({\n                                type: \"VariableDeclaration\",\n                                kind: \"const\",\n                                declarations\n                            });\n                        }\n                    }\n                    /** @type {string} */ let key;\n                    // Add partials (so for `x.y.z` it’d generate `x` and `x.y` too).\n                    for(key in functionInfo.references){\n                        if (Object.hasOwn(functionInfo.references, key)) {\n                            const parts = key.split(\".\");\n                            let index = 0;\n                            while(++index < parts.length){\n                                const partial = parts.slice(0, index).join(\".\");\n                                if (!Object.hasOwn(functionInfo.references, partial)) {\n                                    functionInfo.references[partial] = {\n                                        component: false,\n                                        node: functionInfo.references[key].node\n                                    };\n                                }\n                            }\n                        }\n                    }\n                    const references = Object.keys(functionInfo.references).sort();\n                    let index = -1;\n                    while(++index < references.length){\n                        const id = references[index];\n                        const info = functionInfo.references[id];\n                        const place = (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_4__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_5__.positionFromEstree)(info.node));\n                        /** @type {Array<Expression>} */ const parameters = [\n                            {\n                                type: \"Literal\",\n                                value: id\n                            },\n                            {\n                                type: \"Literal\",\n                                value: info.component\n                            }\n                        ];\n                        createErrorHelper = true;\n                        if (development && place) {\n                            parameters.push({\n                                type: \"Literal\",\n                                value: place\n                            });\n                        }\n                        statements.push({\n                            type: \"IfStatement\",\n                            test: {\n                                type: \"UnaryExpression\",\n                                operator: \"!\",\n                                prefix: true,\n                                argument: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)(id.split(\".\"))\n                            },\n                            consequent: {\n                                type: \"ExpressionStatement\",\n                                expression: {\n                                    type: \"CallExpression\",\n                                    callee: {\n                                        type: \"Identifier\",\n                                        name: \"_missingMdxReference\"\n                                    },\n                                    arguments: parameters,\n                                    optional: false\n                                }\n                            },\n                            alternate: undefined\n                        });\n                    }\n                    if (statements.length > 0) {\n                        // Arrow functions with an implied return:\n                        if (node.body.type !== \"BlockStatement\") {\n                            node.body = {\n                                type: \"BlockStatement\",\n                                body: [\n                                    {\n                                        type: \"ReturnStatement\",\n                                        argument: node.body\n                                    }\n                                ]\n                            };\n                        }\n                        node.body.body.unshift(...statements);\n                    }\n                    functionStack.pop();\n                }\n            }\n        });\n        // If a provider is used (and can be used), import it.\n        if (importProvider && providerImportSource) {\n            tree.body.unshift(createImportProvider(providerImportSource, outputFormat));\n        }\n        // If potentially missing components are used.\n        if (createErrorHelper) {\n            /** @type {Array<Expression>} */ const message = [\n                {\n                    type: \"Literal\",\n                    value: \"Expected \"\n                },\n                {\n                    type: \"ConditionalExpression\",\n                    test: {\n                        type: \"Identifier\",\n                        name: \"component\"\n                    },\n                    consequent: {\n                        type: \"Literal\",\n                        value: \"component\"\n                    },\n                    alternate: {\n                        type: \"Literal\",\n                        value: \"object\"\n                    }\n                },\n                {\n                    type: \"Literal\",\n                    value: \" `\"\n                },\n                {\n                    type: \"Identifier\",\n                    name: \"id\"\n                },\n                {\n                    type: \"Literal\",\n                    value: \"` to be defined: you likely forgot to import, pass, or provide it.\"\n                }\n            ];\n            /** @type {Array<Identifier>} */ const parameters = [\n                {\n                    type: \"Identifier\",\n                    name: \"id\"\n                },\n                {\n                    type: \"Identifier\",\n                    name: \"component\"\n                }\n            ];\n            if (development) {\n                message.push({\n                    type: \"ConditionalExpression\",\n                    test: {\n                        type: \"Identifier\",\n                        name: \"place\"\n                    },\n                    consequent: (0,_util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__.toBinaryAddition)([\n                        {\n                            type: \"Literal\",\n                            value: \"\\nIt’s referenced in your code at `\"\n                        },\n                        {\n                            type: \"Identifier\",\n                            name: \"place\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: (file.path ? \"` in `\" + file.path : \"\") + \"`\"\n                        }\n                    ]),\n                    alternate: {\n                        type: \"Literal\",\n                        value: \"\"\n                    }\n                });\n                parameters.push({\n                    type: \"Identifier\",\n                    name: \"place\"\n                });\n            }\n            tree.body.push({\n                type: \"FunctionDeclaration\",\n                id: {\n                    type: \"Identifier\",\n                    name: \"_missingMdxReference\"\n                },\n                generator: false,\n                async: false,\n                params: parameters,\n                body: {\n                    type: \"BlockStatement\",\n                    body: [\n                        {\n                            type: \"ThrowStatement\",\n                            argument: {\n                                type: \"NewExpression\",\n                                callee: {\n                                    type: \"Identifier\",\n                                    name: \"Error\"\n                                },\n                                arguments: [\n                                    (0,_util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__.toBinaryAddition)(message)\n                                ]\n                            }\n                        }\n                    ]\n                }\n            });\n        }\n        if (outputFormat === \"function-body\") {\n            tree.body.unshift({\n                type: \"ExpressionStatement\",\n                expression: {\n                    type: \"Literal\",\n                    value: \"use strict\"\n                },\n                directive: \"use strict\"\n            });\n        }\n    };\n}\n/**\n * @param {string} providerImportSource\n *   Provider source.\n * @param {'function-body' | 'program' | null | undefined} outputFormat\n *   Format.\n * @returns {ModuleDeclaration | Statement}\n *   Node.\n */ function createImportProvider(providerImportSource, outputFormat) {\n    /** @type {Array<ImportSpecifier>} */ const specifiers = [\n        {\n            type: \"ImportSpecifier\",\n            imported: {\n                type: \"Identifier\",\n                name: \"useMDXComponents\"\n            },\n            local: {\n                type: \"Identifier\",\n                name: \"_provideComponents\"\n            }\n        }\n    ];\n    return outputFormat === \"function-body\" ? {\n        type: \"VariableDeclaration\",\n        kind: \"const\",\n        declarations: (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_7__.specifiersToDeclarations)(specifiers, (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)([\n            \"arguments\",\n            0\n        ]))\n    } : {\n        type: \"ImportDeclaration\",\n        specifiers,\n        source: {\n            type: \"Literal\",\n            value: providerImportSource\n        }\n    };\n}\n/**\n * @param {Readonly<EstreeFunction>} node\n *   Node.\n * @param {string} name\n *   Name.\n * @returns {boolean}\n *   Whether `node` is a named function with `name`.\n */ function isNamedFunction(node, name) {\n    return Boolean(node && \"id\" in node && node.id && node.id.name === name);\n}\n/**\n * @param {Array<Scope>} scopes\n *   Scope.\n * @param {string} id\n *   Identifier.\n * @returns {boolean}\n *   Whether `id` is in `scope`.\n */ function inScope(scopes, id) {\n    let index = scopes.length;\n    while(index--){\n        const scope = scopes[index];\n        if (scope.defined.includes(id)) {\n            return true;\n        }\n    }\n    return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js":
/*!******************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rehypeRemoveRaw: () => (/* binding */ rehypeRemoveRaw)\n/* harmony export */ });\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit */ \"(ssr)/./node_modules/unist-util-visit/lib/index.js\");\n/**\n * @import {Root} from 'hast'\n */ \n/**\n * A tiny plugin that removes raw HTML.\n *\n * This is needed if the format is `md` and `rehype-raw` was not used to parse\n * dangerous HTML into nodes.\n *\n * @returns\n *   Transform.\n */ function rehypeRemoveRaw() {\n    /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */ return function(tree) {\n        (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, \"raw\", function(_, index, parent) {\n            if (parent && typeof index === \"number\") {\n                parent.children.splice(index, 1);\n                return index;\n            }\n        });\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZWh5cGUtcmVtb3ZlLXJhdy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOztDQUVDLEdBRXFDO0FBRXRDOzs7Ozs7OztDQVFDLEdBQ00sU0FBU0M7SUFDZDs7Ozs7R0FLQyxHQUNELE9BQU8sU0FBVUMsSUFBSTtRQUNuQkYsdURBQUtBLENBQUNFLE1BQU0sT0FBTyxTQUFVQyxDQUFDLEVBQUVDLEtBQUssRUFBRUMsTUFBTTtZQUMzQyxJQUFJQSxVQUFVLE9BQU9ELFVBQVUsVUFBVTtnQkFDdkNDLE9BQU9DLFFBQVEsQ0FBQ0MsTUFBTSxDQUFDSCxPQUFPO2dCQUM5QixPQUFPQTtZQUNUO1FBQ0Y7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYW5hLWxpcXVpZGl0eS1wb29sLy4vbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVoeXBlLXJlbW92ZS1yYXcuanM/NTBjMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1Jvb3R9IGZyb20gJ2hhc3QnXG4gKi9cblxuaW1wb3J0IHt2aXNpdH0gZnJvbSAndW5pc3QtdXRpbC12aXNpdCdcblxuLyoqXG4gKiBBIHRpbnkgcGx1Z2luIHRoYXQgcmVtb3ZlcyByYXcgSFRNTC5cbiAqXG4gKiBUaGlzIGlzIG5lZWRlZCBpZiB0aGUgZm9ybWF0IGlzIGBtZGAgYW5kIGByZWh5cGUtcmF3YCB3YXMgbm90IHVzZWQgdG8gcGFyc2VcbiAqIGRhbmdlcm91cyBIVE1MIGludG8gbm9kZXMuXG4gKlxuICogQHJldHVybnNcbiAqICAgVHJhbnNmb3JtLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVoeXBlUmVtb3ZlUmF3KCkge1xuICAvKipcbiAgICogQHBhcmFtIHtSb290fSB0cmVlXG4gICAqICAgVHJlZS5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICogICBOb3RoaW5nLlxuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uICh0cmVlKSB7XG4gICAgdmlzaXQodHJlZSwgJ3JhdycsIGZ1bmN0aW9uIChfLCBpbmRleCwgcGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50ICYmIHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgcmV0dXJuIGluZGV4XG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbInZpc2l0IiwicmVoeXBlUmVtb3ZlUmF3IiwidHJlZSIsIl8iLCJpbmRleCIsInBhcmVudCIsImNoaWxkcmVuIiwic3BsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js":
/*!************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   remarkMarkAndUnravel: () => (/* binding */ remarkMarkAndUnravel)\n/* harmony export */ });\n/* harmony import */ var collapse_white_space__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! collapse-white-space */ \"(ssr)/./node_modules/collapse-white-space/index.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(ssr)/./node_modules/estree-walker/src/index.js\");\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unist-util-visit */ \"(ssr)/./node_modules/unist-util-visit/lib/index.js\");\n/**\n * @import {Root, RootContent} from 'mdast'\n */ \n\n\n/**\n * A tiny plugin that unravels `<p><h1>x</h1></p>` but also\n * `<p><Component /></p>` (so it has no knowledge of “HTML”).\n *\n * It also marks JSX as being explicitly JSX, so when a user passes a `h1`\n * component, it is used for `# heading` but not for `<h1>heading</h1>`.\n *\n * @returns\n *   Transform.\n */ function remarkMarkAndUnravel() {\n    /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */ return function(tree) {\n        (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_1__.visit)(tree, function(node, index, parent) {\n            let offset = -1;\n            let all = true;\n            let oneOrMore = false;\n            if (parent && typeof index === \"number\" && node.type === \"paragraph\") {\n                const children = node.children;\n                while(++offset < children.length){\n                    const child = children[offset];\n                    if (child.type === \"mdxJsxTextElement\" || child.type === \"mdxTextExpression\") {\n                        oneOrMore = true;\n                    } else if (child.type === \"text\" && (0,collapse_white_space__WEBPACK_IMPORTED_MODULE_2__.collapseWhiteSpace)(child.value, {\n                        style: \"html\",\n                        trim: true\n                    }) === \"\") {\n                    // Empty.\n                    } else {\n                        all = false;\n                        break;\n                    }\n                }\n                if (all && oneOrMore) {\n                    offset = -1;\n                    /** @type {Array<RootContent>} */ const newChildren = [];\n                    while(++offset < children.length){\n                        const child = children[offset];\n                        if (child.type === \"mdxJsxTextElement\") {\n                            // @ts-expect-error: mutate because it is faster; content model is fine.\n                            child.type = \"mdxJsxFlowElement\";\n                        }\n                        if (child.type === \"mdxTextExpression\") {\n                            // @ts-expect-error: mutate because it is faster; content model is fine.\n                            child.type = \"mdxFlowExpression\";\n                        }\n                        if (child.type === \"text\" && /^[\\t\\r\\n ]+$/.test(String(child.value))) {\n                        // Empty.\n                        } else {\n                            newChildren.push(child);\n                        }\n                    }\n                    parent.children.splice(index, 1, ...newChildren);\n                    return index;\n                }\n            }\n            if (node.type === \"mdxJsxFlowElement\" || node.type === \"mdxJsxTextElement\") {\n                const data = node.data || (node.data = {});\n                data._mdxExplicitJsx = true;\n            }\n            if ((node.type === \"mdxFlowExpression\" || node.type === \"mdxTextExpression\" || node.type === \"mdxjsEsm\") && node.data && node.data.estree) {\n                (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(node.data.estree, {\n                    enter (node) {\n                        if (node.type === \"JSXElement\") {\n                            const data = node.data || (node.data = {});\n                            data._mdxExplicitJsx = true;\n                        }\n                    }\n                });\n            }\n        });\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZW1hcmstbWFyay1hbmQtdW5yYXZlbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0NBRUMsR0FFc0Q7QUFDckI7QUFDSTtBQUV0Qzs7Ozs7Ozs7O0NBU0MsR0FDTSxTQUFTRztJQUNkOzs7OztHQUtDLEdBQ0QsT0FBTyxTQUFVQyxJQUFJO1FBQ25CRix1REFBS0EsQ0FBQ0UsTUFBTSxTQUFVQyxJQUFJLEVBQUVDLEtBQUssRUFBRUMsTUFBTTtZQUN2QyxJQUFJQyxTQUFTLENBQUM7WUFDZCxJQUFJQyxNQUFNO1lBQ1YsSUFBSUMsWUFBWTtZQUVoQixJQUFJSCxVQUFVLE9BQU9ELFVBQVUsWUFBWUQsS0FBS00sSUFBSSxLQUFLLGFBQWE7Z0JBQ3BFLE1BQU1DLFdBQVdQLEtBQUtPLFFBQVE7Z0JBRTlCLE1BQU8sRUFBRUosU0FBU0ksU0FBU0MsTUFBTSxDQUFFO29CQUNqQyxNQUFNQyxRQUFRRixRQUFRLENBQUNKLE9BQU87b0JBRTlCLElBQ0VNLE1BQU1ILElBQUksS0FBSyx1QkFDZkcsTUFBTUgsSUFBSSxLQUFLLHFCQUNmO3dCQUNBRCxZQUFZO29CQUNkLE9BQU8sSUFDTEksTUFBTUgsSUFBSSxLQUFLLFVBQ2ZYLHdFQUFrQkEsQ0FBQ2MsTUFBTUMsS0FBSyxFQUFFO3dCQUFDQyxPQUFPO3dCQUFRQyxNQUFNO29CQUFJLE9BQU8sSUFDakU7b0JBQ0EsU0FBUztvQkFDWCxPQUFPO3dCQUNMUixNQUFNO3dCQUNOO29CQUNGO2dCQUNGO2dCQUVBLElBQUlBLE9BQU9DLFdBQVc7b0JBQ3BCRixTQUFTLENBQUM7b0JBRVYsK0JBQStCLEdBQy9CLE1BQU1VLGNBQWMsRUFBRTtvQkFFdEIsTUFBTyxFQUFFVixTQUFTSSxTQUFTQyxNQUFNLENBQUU7d0JBQ2pDLE1BQU1DLFFBQVFGLFFBQVEsQ0FBQ0osT0FBTzt3QkFFOUIsSUFBSU0sTUFBTUgsSUFBSSxLQUFLLHFCQUFxQjs0QkFDdEMsd0VBQXdFOzRCQUN4RUcsTUFBTUgsSUFBSSxHQUFHO3dCQUNmO3dCQUVBLElBQUlHLE1BQU1ILElBQUksS0FBSyxxQkFBcUI7NEJBQ3RDLHdFQUF3RTs0QkFDeEVHLE1BQU1ILElBQUksR0FBRzt3QkFDZjt3QkFFQSxJQUNFRyxNQUFNSCxJQUFJLEtBQUssVUFDZixlQUFlUSxJQUFJLENBQUNDLE9BQU9OLE1BQU1DLEtBQUssSUFDdEM7d0JBQ0EsU0FBUzt3QkFDWCxPQUFPOzRCQUNMRyxZQUFZRyxJQUFJLENBQUNQO3dCQUNuQjtvQkFDRjtvQkFFQVAsT0FBT0ssUUFBUSxDQUFDVSxNQUFNLENBQUNoQixPQUFPLE1BQU1ZO29CQUNwQyxPQUFPWjtnQkFDVDtZQUNGO1lBRUEsSUFDRUQsS0FBS00sSUFBSSxLQUFLLHVCQUNkTixLQUFLTSxJQUFJLEtBQUsscUJBQ2Q7Z0JBQ0EsTUFBTVksT0FBT2xCLEtBQUtrQixJQUFJLElBQUtsQixDQUFBQSxLQUFLa0IsSUFBSSxHQUFHLENBQUM7Z0JBQ3hDQSxLQUFLQyxlQUFlLEdBQUc7WUFDekI7WUFFQSxJQUNFLENBQUNuQixLQUFLTSxJQUFJLEtBQUssdUJBQ2JOLEtBQUtNLElBQUksS0FBSyx1QkFDZE4sS0FBS00sSUFBSSxLQUFLLFVBQVMsS0FDekJOLEtBQUtrQixJQUFJLElBQ1RsQixLQUFLa0IsSUFBSSxDQUFDRSxNQUFNLEVBQ2hCO2dCQUNBeEIsbURBQUlBLENBQUNJLEtBQUtrQixJQUFJLENBQUNFLE1BQU0sRUFBRTtvQkFDckJDLE9BQU1yQixJQUFJO3dCQUNSLElBQUlBLEtBQUtNLElBQUksS0FBSyxjQUFjOzRCQUM5QixNQUFNWSxPQUFPbEIsS0FBS2tCLElBQUksSUFBS2xCLENBQUFBLEtBQUtrQixJQUFJLEdBQUcsQ0FBQzs0QkFDeENBLEtBQUtDLGVBQWUsR0FBRzt3QkFDekI7b0JBQ0Y7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFuYS1saXF1aWRpdHktcG9vbC8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvcGx1Z2luL3JlbWFyay1tYXJrLWFuZC11bnJhdmVsLmpzP2MyMzkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtSb290LCBSb290Q29udGVudH0gZnJvbSAnbWRhc3QnXG4gKi9cblxuaW1wb3J0IHtjb2xsYXBzZVdoaXRlU3BhY2V9IGZyb20gJ2NvbGxhcHNlLXdoaXRlLXNwYWNlJ1xuaW1wb3J0IHt3YWxrfSBmcm9tICdlc3RyZWUtd2Fsa2VyJ1xuaW1wb3J0IHt2aXNpdH0gZnJvbSAndW5pc3QtdXRpbC12aXNpdCdcblxuLyoqXG4gKiBBIHRpbnkgcGx1Z2luIHRoYXQgdW5yYXZlbHMgYDxwPjxoMT54PC9oMT48L3A+YCBidXQgYWxzb1xuICogYDxwPjxDb21wb25lbnQgLz48L3A+YCAoc28gaXQgaGFzIG5vIGtub3dsZWRnZSBvZiDigJxIVE1M4oCdKS5cbiAqXG4gKiBJdCBhbHNvIG1hcmtzIEpTWCBhcyBiZWluZyBleHBsaWNpdGx5IEpTWCwgc28gd2hlbiBhIHVzZXIgcGFzc2VzIGEgYGgxYFxuICogY29tcG9uZW50LCBpdCBpcyB1c2VkIGZvciBgIyBoZWFkaW5nYCBidXQgbm90IGZvciBgPGgxPmhlYWRpbmc8L2gxPmAuXG4gKlxuICogQHJldHVybnNcbiAqICAgVHJhbnNmb3JtLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtYXJrTWFya0FuZFVucmF2ZWwoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1Jvb3R9IHRyZWVcbiAgICogICBUcmVlLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKiAgIE5vdGhpbmcuXG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gKHRyZWUpIHtcbiAgICB2aXNpdCh0cmVlLCBmdW5jdGlvbiAobm9kZSwgaW5kZXgsIHBhcmVudCkge1xuICAgICAgbGV0IG9mZnNldCA9IC0xXG4gICAgICBsZXQgYWxsID0gdHJ1ZVxuICAgICAgbGV0IG9uZU9yTW9yZSA9IGZhbHNlXG5cbiAgICAgIGlmIChwYXJlbnQgJiYgdHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJyAmJiBub2RlLnR5cGUgPT09ICdwYXJhZ3JhcGgnKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlblxuXG4gICAgICAgIHdoaWxlICgrK29mZnNldCA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5bb2Zmc2V0XVxuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY2hpbGQudHlwZSA9PT0gJ21keEpzeFRleHRFbGVtZW50JyB8fFxuICAgICAgICAgICAgY2hpbGQudHlwZSA9PT0gJ21keFRleHRFeHByZXNzaW9uJ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgb25lT3JNb3JlID0gdHJ1ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBjaGlsZC50eXBlID09PSAndGV4dCcgJiZcbiAgICAgICAgICAgIGNvbGxhcHNlV2hpdGVTcGFjZShjaGlsZC52YWx1ZSwge3N0eWxlOiAnaHRtbCcsIHRyaW06IHRydWV9KSA9PT0gJydcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIEVtcHR5LlxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbGwgPSBmYWxzZVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWxsICYmIG9uZU9yTW9yZSkge1xuICAgICAgICAgIG9mZnNldCA9IC0xXG5cbiAgICAgICAgICAvKiogQHR5cGUge0FycmF5PFJvb3RDb250ZW50Pn0gKi9cbiAgICAgICAgICBjb25zdCBuZXdDaGlsZHJlbiA9IFtdXG5cbiAgICAgICAgICB3aGlsZSAoKytvZmZzZXQgPCBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5bb2Zmc2V0XVxuXG4gICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ21keEpzeFRleHRFbGVtZW50Jykge1xuICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBtdXRhdGUgYmVjYXVzZSBpdCBpcyBmYXN0ZXI7IGNvbnRlbnQgbW9kZWwgaXMgZmluZS5cbiAgICAgICAgICAgICAgY2hpbGQudHlwZSA9ICdtZHhKc3hGbG93RWxlbWVudCdcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdtZHhUZXh0RXhwcmVzc2lvbicpIHtcbiAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogbXV0YXRlIGJlY2F1c2UgaXQgaXMgZmFzdGVyOyBjb250ZW50IG1vZGVsIGlzIGZpbmUuXG4gICAgICAgICAgICAgIGNoaWxkLnR5cGUgPSAnbWR4Rmxvd0V4cHJlc3Npb24nXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgY2hpbGQudHlwZSA9PT0gJ3RleHQnICYmXG4gICAgICAgICAgICAgIC9eW1xcdFxcclxcbiBdKyQvLnRlc3QoU3RyaW5nKGNoaWxkLnZhbHVlKSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAvLyBFbXB0eS5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld0NoaWxkcmVuLnB1c2goY2hpbGQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSwgLi4ubmV3Q2hpbGRyZW4pXG4gICAgICAgICAgcmV0dXJuIGluZGV4XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBub2RlLnR5cGUgPT09ICdtZHhKc3hGbG93RWxlbWVudCcgfHxcbiAgICAgICAgbm9kZS50eXBlID09PSAnbWR4SnN4VGV4dEVsZW1lbnQnXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IG5vZGUuZGF0YSB8fCAobm9kZS5kYXRhID0ge30pXG4gICAgICAgIGRhdGEuX21keEV4cGxpY2l0SnN4ID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIChub2RlLnR5cGUgPT09ICdtZHhGbG93RXhwcmVzc2lvbicgfHxcbiAgICAgICAgICBub2RlLnR5cGUgPT09ICdtZHhUZXh0RXhwcmVzc2lvbicgfHxcbiAgICAgICAgICBub2RlLnR5cGUgPT09ICdtZHhqc0VzbScpICYmXG4gICAgICAgIG5vZGUuZGF0YSAmJlxuICAgICAgICBub2RlLmRhdGEuZXN0cmVlXG4gICAgICApIHtcbiAgICAgICAgd2Fsayhub2RlLmRhdGEuZXN0cmVlLCB7XG4gICAgICAgICAgZW50ZXIobm9kZSkge1xuICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ0pTWEVsZW1lbnQnKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBub2RlLmRhdGEgfHwgKG5vZGUuZGF0YSA9IHt9KVxuICAgICAgICAgICAgICBkYXRhLl9tZHhFeHBsaWNpdEpzeCA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbImNvbGxhcHNlV2hpdGVTcGFjZSIsIndhbGsiLCJ2aXNpdCIsInJlbWFya01hcmtBbmRVbnJhdmVsIiwidHJlZSIsIm5vZGUiLCJpbmRleCIsInBhcmVudCIsIm9mZnNldCIsImFsbCIsIm9uZU9yTW9yZSIsInR5cGUiLCJjaGlsZHJlbiIsImxlbmd0aCIsImNoaWxkIiwidmFsdWUiLCJzdHlsZSIsInRyaW0iLCJuZXdDaGlsZHJlbiIsInRlc3QiLCJTdHJpbmciLCJwdXNoIiwic3BsaWNlIiwiZGF0YSIsIl9tZHhFeHBsaWNpdEpzeCIsImVzdHJlZSIsImVudGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/run.js":
/*!*********************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/run.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   run: () => (/* binding */ run),\n/* harmony export */   runSync: () => (/* binding */ runSync)\n/* harmony export */ });\n/**\n * @import {MDXModule} from 'mdx/types.js'\n * @import {RunOptions} from './util/resolve-evaluate-options.js'\n */ /** @type {new (code: string, ...args: Array<unknown>) => Function} **/ const AsyncFunction = Object.getPrototypeOf(run).constructor;\n/**\n * Run code compiled with `outputFormat: 'function-body'`.\n *\n * > ☢️ **Danger**: this `eval`s JavaScript.\n *\n * @param {{toString(): string}} code\n *   JavaScript function body to run.\n * @param {RunOptions} options\n *   Configuration (**required**).\n * @return {Promise<MDXModule>}\n *   Promise to a module;\n *   the result is an object with a `default` field set to the component;\n *   anything else that was exported is available too.\n */ async function run(code, options) {\n    return new AsyncFunction(String(code))(options);\n}\n/**\n * Run code, synchronously.\n *\n * When possible please use the async `run`.\n *\n * > ☢️ **Danger**: this `eval`s JavaScript.\n *\n * @param {{toString(): string}} code\n *   JavaScript function body to run.\n * @param {RunOptions} options\n *   Configuration (**required**).\n * @return {MDXModule}\n *   Module.\n */ function runSync(code, options) {\n    // eslint-disable-next-line no-new-func\n    return new Function(String(code))(options);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3J1bi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Q0FHQyxHQUVELHFFQUFxRSxHQUNyRSxNQUFNQSxnQkFBZ0JDLE9BQU9DLGNBQWMsQ0FBQ0MsS0FBS0MsV0FBVztBQUU1RDs7Ozs7Ozs7Ozs7OztDQWFDLEdBQ00sZUFBZUQsSUFBSUUsSUFBSSxFQUFFQyxPQUFPO0lBQ3JDLE9BQU8sSUFBSU4sY0FBY08sT0FBT0YsT0FBT0M7QUFDekM7QUFFQTs7Ozs7Ozs7Ozs7OztDQWFDLEdBQ00sU0FBU0UsUUFBUUgsSUFBSSxFQUFFQyxPQUFPO0lBQ25DLHVDQUF1QztJQUN2QyxPQUFPLElBQUlHLFNBQVNGLE9BQU9GLE9BQU9DO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYW5hLWxpcXVpZGl0eS1wb29sLy4vbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9ydW4uanM/ZDY4YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge01EWE1vZHVsZX0gZnJvbSAnbWR4L3R5cGVzLmpzJ1xuICogQGltcG9ydCB7UnVuT3B0aW9uc30gZnJvbSAnLi91dGlsL3Jlc29sdmUtZXZhbHVhdGUtb3B0aW9ucy5qcydcbiAqL1xuXG4vKiogQHR5cGUge25ldyAoY29kZTogc3RyaW5nLCAuLi5hcmdzOiBBcnJheTx1bmtub3duPikgPT4gRnVuY3Rpb259ICoqL1xuY29uc3QgQXN5bmNGdW5jdGlvbiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihydW4pLmNvbnN0cnVjdG9yXG5cbi8qKlxuICogUnVuIGNvZGUgY29tcGlsZWQgd2l0aCBgb3V0cHV0Rm9ybWF0OiAnZnVuY3Rpb24tYm9keSdgLlxuICpcbiAqID4g4pii77iPICoqRGFuZ2VyKio6IHRoaXMgYGV2YWxgcyBKYXZhU2NyaXB0LlxuICpcbiAqIEBwYXJhbSB7e3RvU3RyaW5nKCk6IHN0cmluZ319IGNvZGVcbiAqICAgSmF2YVNjcmlwdCBmdW5jdGlvbiBib2R5IHRvIHJ1bi5cbiAqIEBwYXJhbSB7UnVuT3B0aW9uc30gb3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uICgqKnJlcXVpcmVkKiopLlxuICogQHJldHVybiB7UHJvbWlzZTxNRFhNb2R1bGU+fVxuICogICBQcm9taXNlIHRvIGEgbW9kdWxlO1xuICogICB0aGUgcmVzdWx0IGlzIGFuIG9iamVjdCB3aXRoIGEgYGRlZmF1bHRgIGZpZWxkIHNldCB0byB0aGUgY29tcG9uZW50O1xuICogICBhbnl0aGluZyBlbHNlIHRoYXQgd2FzIGV4cG9ydGVkIGlzIGF2YWlsYWJsZSB0b28uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW4oY29kZSwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IEFzeW5jRnVuY3Rpb24oU3RyaW5nKGNvZGUpKShvcHRpb25zKVxufVxuXG4vKipcbiAqIFJ1biBjb2RlLCBzeW5jaHJvbm91c2x5LlxuICpcbiAqIFdoZW4gcG9zc2libGUgcGxlYXNlIHVzZSB0aGUgYXN5bmMgYHJ1bmAuXG4gKlxuICogPiDimKLvuI8gKipEYW5nZXIqKjogdGhpcyBgZXZhbGBzIEphdmFTY3JpcHQuXG4gKlxuICogQHBhcmFtIHt7dG9TdHJpbmcoKTogc3RyaW5nfX0gY29kZVxuICogICBKYXZhU2NyaXB0IGZ1bmN0aW9uIGJvZHkgdG8gcnVuLlxuICogQHBhcmFtIHtSdW5PcHRpb25zfSBvcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24gKCoqcmVxdWlyZWQqKikuXG4gKiBAcmV0dXJuIHtNRFhNb2R1bGV9XG4gKiAgIE1vZHVsZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1blN5bmMoY29kZSwgb3B0aW9ucykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgcmV0dXJuIG5ldyBGdW5jdGlvbihTdHJpbmcoY29kZSkpKG9wdGlvbnMpXG59XG4iXSwibmFtZXMiOlsiQXN5bmNGdW5jdGlvbiIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwicnVuIiwiY29uc3RydWN0b3IiLCJjb2RlIiwib3B0aW9ucyIsIlN0cmluZyIsInJ1blN5bmMiLCJGdW5jdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/run.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-create.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-create.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create)\n/* harmony export */ });\n/**\n * @import {Node} from 'estree-jsx'\n */ // Fix to show references to above types in VS Code.\n\"\";\n/**\n * @param {Readonly<Node>} from\n *   Node to take from.\n * @param {Node} to\n *   Node to add to.\n * @returns {undefined}\n *   Nothing.\n */ function create(from, to) {\n    /** @type {Array<keyof Node>} */ const fields = [\n        \"start\",\n        \"end\",\n        \"loc\",\n        \"range\"\n    ];\n    let index = -1;\n    while(++index < fields.length){\n        const field = fields[index];\n        if (field in from) {\n            // @ts-expect-error: assume they’re settable.\n            to[field] = from[field];\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtY3JlYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUVELG9EQUFvRDtBQUNwRDtBQUVBOzs7Ozs7O0NBT0MsR0FDTSxTQUFTQSxPQUFPQyxJQUFJLEVBQUVDLEVBQUU7SUFDN0IsOEJBQThCLEdBQzlCLE1BQU1DLFNBQVM7UUFBQztRQUFTO1FBQU87UUFBTztLQUFRO0lBQy9DLElBQUlDLFFBQVEsQ0FBQztJQUViLE1BQU8sRUFBRUEsUUFBUUQsT0FBT0UsTUFBTSxDQUFFO1FBQzlCLE1BQU1DLFFBQVFILE1BQU0sQ0FBQ0MsTUFBTTtRQUUzQixJQUFJRSxTQUFTTCxNQUFNO1lBQ2pCLDZDQUE2QztZQUM3Q0MsRUFBRSxDQUFDSSxNQUFNLEdBQUdMLElBQUksQ0FBQ0ssTUFBTTtRQUN6QjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb2xhbmEtbGlxdWlkaXR5LXBvb2wvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtY3JlYXRlLmpzPzZmNmEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtOb2RlfSBmcm9tICdlc3RyZWUtanN4J1xuICovXG5cbi8vIEZpeCB0byBzaG93IHJlZmVyZW5jZXMgdG8gYWJvdmUgdHlwZXMgaW4gVlMgQ29kZS5cbicnXG5cbi8qKlxuICogQHBhcmFtIHtSZWFkb25seTxOb2RlPn0gZnJvbVxuICogICBOb2RlIHRvIHRha2UgZnJvbS5cbiAqIEBwYXJhbSB7Tm9kZX0gdG9cbiAqICAgTm9kZSB0byBhZGQgdG8uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogICBOb3RoaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKGZyb20sIHRvKSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8a2V5b2YgTm9kZT59ICovXG4gIGNvbnN0IGZpZWxkcyA9IFsnc3RhcnQnLCAnZW5kJywgJ2xvYycsICdyYW5nZSddXG4gIGxldCBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBmaWVsZHMubGVuZ3RoKSB7XG4gICAgY29uc3QgZmllbGQgPSBmaWVsZHNbaW5kZXhdXG5cbiAgICBpZiAoZmllbGQgaW4gZnJvbSkge1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYXNzdW1lIHRoZXnigJlyZSBzZXR0YWJsZS5cbiAgICAgIHRvW2ZpZWxkXSA9IGZyb21bZmllbGRdXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiY3JlYXRlIiwiZnJvbSIsInRvIiwiZmllbGRzIiwiaW5kZXgiLCJsZW5ndGgiLCJmaWVsZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   declarationToExpression: () => (/* binding */ declarationToExpression)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/**\n * @import {\n      Declaration,\n      Expression,\n      MaybeNamedClassDeclaration,\n      MaybeNamedFunctionDeclaration\n * } from 'estree-jsx'\n */ \n/**\n * Turn a declaration into an expression.\n *\n * Doesn’t work for variable declarations, but that’s fine for our use case\n * because currently we’re using this utility for export default declarations,\n * which can’t contain variable declarations.\n *\n * @param {Readonly<Declaration | MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration>} declaration\n *   Declaration.\n * @returns {Expression}\n *   Expression.\n */ function declarationToExpression(declaration) {\n    if (declaration.type === \"FunctionDeclaration\") {\n        return {\n            ...declaration,\n            type: \"FunctionExpression\"\n        };\n    }\n    // This is currently an internal utility so the next shouldn’t happen or a\n    // maintainer is making a mistake.\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(declaration.type === \"ClassDeclaration\", \"unexpected node type\");\n    return {\n        ...declaration,\n        type: \"ClassExpression\"\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtZGVjbGFyYXRpb24tdG8tZXhwcmVzc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Ozs7O0NBT0MsR0FFa0M7QUFFbkM7Ozs7Ozs7Ozs7O0NBV0MsR0FDTSxTQUFTRSx3QkFBd0JDLFdBQVc7SUFDakQsSUFBSUEsWUFBWUMsSUFBSSxLQUFLLHVCQUF1QjtRQUM5QyxPQUFPO1lBQUMsR0FBR0QsV0FBVztZQUFFQyxNQUFNO1FBQW9CO0lBQ3BEO0lBRUEsMEVBQTBFO0lBQzFFLGtDQUFrQztJQUNsQ0gsMENBQU1BLENBQUNFLFlBQVlDLElBQUksS0FBSyxvQkFBb0I7SUFDaEQsT0FBTztRQUFDLEdBQUdELFdBQVc7UUFBRUMsTUFBTTtJQUFpQjtBQUNqRCIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFuYS1saXF1aWRpdHktcG9vbC8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC1kZWNsYXJhdGlvbi10by1leHByZXNzaW9uLmpzP2ViZTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtcbiAgICAgIERlY2xhcmF0aW9uLFxuICAgICAgRXhwcmVzc2lvbixcbiAgICAgIE1heWJlTmFtZWRDbGFzc0RlY2xhcmF0aW9uLFxuICAgICAgTWF5YmVOYW1lZEZ1bmN0aW9uRGVjbGFyYXRpb25cbiAqIH0gZnJvbSAnZXN0cmVlLWpzeCdcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAnZGV2bG9wJ1xuXG4vKipcbiAqIFR1cm4gYSBkZWNsYXJhdGlvbiBpbnRvIGFuIGV4cHJlc3Npb24uXG4gKlxuICogRG9lc27igJl0IHdvcmsgZm9yIHZhcmlhYmxlIGRlY2xhcmF0aW9ucywgYnV0IHRoYXTigJlzIGZpbmUgZm9yIG91ciB1c2UgY2FzZVxuICogYmVjYXVzZSBjdXJyZW50bHkgd2XigJlyZSB1c2luZyB0aGlzIHV0aWxpdHkgZm9yIGV4cG9ydCBkZWZhdWx0IGRlY2xhcmF0aW9ucyxcbiAqIHdoaWNoIGNhbuKAmXQgY29udGFpbiB2YXJpYWJsZSBkZWNsYXJhdGlvbnMuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxEZWNsYXJhdGlvbiB8IE1heWJlTmFtZWRDbGFzc0RlY2xhcmF0aW9uIHwgTWF5YmVOYW1lZEZ1bmN0aW9uRGVjbGFyYXRpb24+fSBkZWNsYXJhdGlvblxuICogICBEZWNsYXJhdGlvbi5cbiAqIEByZXR1cm5zIHtFeHByZXNzaW9ufVxuICogICBFeHByZXNzaW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjbGFyYXRpb25Ub0V4cHJlc3Npb24oZGVjbGFyYXRpb24pIHtcbiAgaWYgKGRlY2xhcmF0aW9uLnR5cGUgPT09ICdGdW5jdGlvbkRlY2xhcmF0aW9uJykge1xuICAgIHJldHVybiB7Li4uZGVjbGFyYXRpb24sIHR5cGU6ICdGdW5jdGlvbkV4cHJlc3Npb24nfVxuICB9XG5cbiAgLy8gVGhpcyBpcyBjdXJyZW50bHkgYW4gaW50ZXJuYWwgdXRpbGl0eSBzbyB0aGUgbmV4dCBzaG91bGRu4oCZdCBoYXBwZW4gb3IgYVxuICAvLyBtYWludGFpbmVyIGlzIG1ha2luZyBhIG1pc3Rha2UuXG4gIGFzc2VydChkZWNsYXJhdGlvbi50eXBlID09PSAnQ2xhc3NEZWNsYXJhdGlvbicsICd1bmV4cGVjdGVkIG5vZGUgdHlwZScpXG4gIHJldHVybiB7Li4uZGVjbGFyYXRpb24sIHR5cGU6ICdDbGFzc0V4cHJlc3Npb24nfVxufVxuIl0sIm5hbWVzIjpbIm9rIiwiYXNzZXJ0IiwiZGVjbGFyYXRpb25Ub0V4cHJlc3Npb24iLCJkZWNsYXJhdGlvbiIsInR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDeclaration: () => (/* binding */ isDeclaration)\n/* harmony export */ });\n/**\n * @import {\n      Declaration,\n      MaybeNamedClassDeclaration,\n      MaybeNamedFunctionDeclaration,\n      Node\n * } from 'estree-jsx'\n */ // Fix to show references to above types in VS Code.\n\"\";\n/**\n * Check if `node` is a declaration.\n *\n * @param {Readonly<MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration | Node>} node\n *   Node to check.\n * @returns {node is Declaration | MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration}\n *   Whether `node` is a declaration.\n */ function isDeclaration(node) {\n    return Boolean(node.type === \"FunctionDeclaration\" || node.type === \"ClassDeclaration\" || node.type === \"VariableDeclaration\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtaXMtZGVjbGFyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7O0NBT0MsR0FFRCxvREFBb0Q7QUFDcEQ7QUFFQTs7Ozs7OztDQU9DLEdBQ00sU0FBU0EsY0FBY0MsSUFBSTtJQUNoQyxPQUFPQyxRQUNMRCxLQUFLRSxJQUFJLEtBQUsseUJBQ1pGLEtBQUtFLElBQUksS0FBSyxzQkFDZEYsS0FBS0UsSUFBSSxLQUFLO0FBRXBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYW5hLWxpcXVpZGl0eS1wb29sLy4vbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLWlzLWRlY2xhcmF0aW9uLmpzP2E2YTkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtcbiAgICAgIERlY2xhcmF0aW9uLFxuICAgICAgTWF5YmVOYW1lZENsYXNzRGVjbGFyYXRpb24sXG4gICAgICBNYXliZU5hbWVkRnVuY3Rpb25EZWNsYXJhdGlvbixcbiAgICAgIE5vZGVcbiAqIH0gZnJvbSAnZXN0cmVlLWpzeCdcbiAqL1xuXG4vLyBGaXggdG8gc2hvdyByZWZlcmVuY2VzIHRvIGFib3ZlIHR5cGVzIGluIFZTIENvZGUuXG4nJ1xuXG4vKipcbiAqIENoZWNrIGlmIGBub2RlYCBpcyBhIGRlY2xhcmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TWF5YmVOYW1lZENsYXNzRGVjbGFyYXRpb24gfCBNYXliZU5hbWVkRnVuY3Rpb25EZWNsYXJhdGlvbiB8IE5vZGU+fSBub2RlXG4gKiAgIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7bm9kZSBpcyBEZWNsYXJhdGlvbiB8IE1heWJlTmFtZWRDbGFzc0RlY2xhcmF0aW9uIHwgTWF5YmVOYW1lZEZ1bmN0aW9uRGVjbGFyYXRpb259XG4gKiAgIFdoZXRoZXIgYG5vZGVgIGlzIGEgZGVjbGFyYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RlY2xhcmF0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIEJvb2xlYW4oXG4gICAgbm9kZS50eXBlID09PSAnRnVuY3Rpb25EZWNsYXJhdGlvbicgfHxcbiAgICAgIG5vZGUudHlwZSA9PT0gJ0NsYXNzRGVjbGFyYXRpb24nIHx8XG4gICAgICBub2RlLnR5cGUgPT09ICdWYXJpYWJsZURlY2xhcmF0aW9uJ1xuICApXG59XG4iXSwibmFtZXMiOlsiaXNEZWNsYXJhdGlvbiIsIm5vZGUiLCJCb29sZWFuIiwidHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   specifiersToDeclarations: () => (/* binding */ specifiersToDeclarations)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var _estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./estree-util-create.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\");\n/**\n * @import {\n      AssignmentProperty,\n      ExportSpecifier,\n      Expression,\n      Identifier,\n      ImportDefaultSpecifier,\n      ImportNamespaceSpecifier,\n      ImportSpecifier,\n      Literal,\n      VariableDeclarator\n * } from 'estree-jsx'\n */ \n\n/**\n * @param {ReadonlyArray<Readonly<ExportSpecifier> | Readonly<ImportDefaultSpecifier> | Readonly<ImportNamespaceSpecifier> | Readonly<ImportSpecifier>>} specifiers\n *   Specifiers.\n * @param {Readonly<Expression>} init\n *   Initializer.\n * @returns {Array<VariableDeclarator>}\n *   Declarations.\n */ function specifiersToDeclarations(specifiers, init) {\n    let index = -1;\n    /** @type {Array<VariableDeclarator>} */ const declarations = [];\n    /** @type {Array<ExportSpecifier | ImportDefaultSpecifier | ImportSpecifier>} */ const otherSpecifiers = [];\n    // Can only be one according to JS syntax.\n    /** @type {ImportNamespaceSpecifier | undefined} */ let importNamespaceSpecifier;\n    while(++index < specifiers.length){\n        const specifier = specifiers[index];\n        if (specifier.type === \"ImportNamespaceSpecifier\") {\n            importNamespaceSpecifier = specifier;\n        } else {\n            otherSpecifiers.push(specifier);\n        }\n    }\n    if (importNamespaceSpecifier) {\n        /** @type {VariableDeclarator} */ const declarator = {\n            type: \"VariableDeclarator\",\n            id: importNamespaceSpecifier.local,\n            init\n        };\n        (0,_estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)(importNamespaceSpecifier, declarator);\n        declarations.push(declarator);\n    }\n    declarations.push({\n        type: \"VariableDeclarator\",\n        id: {\n            type: \"ObjectPattern\",\n            properties: otherSpecifiers.map(function(specifier) {\n                /** @type {Identifier | Literal} */ let key = specifier.type === \"ImportSpecifier\" ? specifier.imported : specifier.type === \"ExportSpecifier\" ? specifier.exported : {\n                    type: \"Identifier\",\n                    name: \"default\"\n                };\n                let value = specifier.local;\n                // Switch them around if we’re exporting.\n                if (specifier.type === \"ExportSpecifier\") {\n                    value = key;\n                    key = specifier.local;\n                }\n                // To do: what to do about literals?\n                // `const { a: 'b' } = c()` does not work?\n                (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(value.type === \"Identifier\");\n                /** @type {AssignmentProperty} */ const property = {\n                    type: \"Property\",\n                    kind: \"init\",\n                    shorthand: key.type === \"Identifier\" && value.type === \"Identifier\" && key.name === value.name,\n                    method: false,\n                    computed: false,\n                    key,\n                    value\n                };\n                (0,_estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)(specifier, property);\n                return property;\n            })\n        },\n        init: importNamespaceSpecifier ? {\n            type: \"Identifier\",\n            name: importNamespaceSpecifier.local.name\n        } : init\n    });\n    return declarations;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtc3BlY2lmaWVycy10by1kZWNsYXJhdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7OztDQVlDLEdBRWtDO0FBQ1c7QUFFOUM7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNHLHlCQUF5QkMsVUFBVSxFQUFFQyxJQUFJO0lBQ3ZELElBQUlDLFFBQVEsQ0FBQztJQUNiLHNDQUFzQyxHQUN0QyxNQUFNQyxlQUFlLEVBQUU7SUFDdkIsOEVBQThFLEdBQzlFLE1BQU1DLGtCQUFrQixFQUFFO0lBQzFCLDBDQUEwQztJQUMxQyxpREFBaUQsR0FDakQsSUFBSUM7SUFFSixNQUFPLEVBQUVILFFBQVFGLFdBQVdNLE1BQU0sQ0FBRTtRQUNsQyxNQUFNQyxZQUFZUCxVQUFVLENBQUNFLE1BQU07UUFFbkMsSUFBSUssVUFBVUMsSUFBSSxLQUFLLDRCQUE0QjtZQUNqREgsMkJBQTJCRTtRQUM3QixPQUFPO1lBQ0xILGdCQUFnQkssSUFBSSxDQUFDRjtRQUN2QjtJQUNGO0lBRUEsSUFBSUYsMEJBQTBCO1FBQzVCLCtCQUErQixHQUMvQixNQUFNSyxhQUFhO1lBQ2pCRixNQUFNO1lBQ05HLElBQUlOLHlCQUF5Qk8sS0FBSztZQUNsQ1g7UUFDRjtRQUNBSCw4REFBTUEsQ0FBQ08sMEJBQTBCSztRQUNqQ1AsYUFBYU0sSUFBSSxDQUFDQztJQUNwQjtJQUVBUCxhQUFhTSxJQUFJLENBQUM7UUFDaEJELE1BQU07UUFDTkcsSUFBSTtZQUNGSCxNQUFNO1lBQ05LLFlBQVlULGdCQUFnQlUsR0FBRyxDQUFDLFNBQVVQLFNBQVM7Z0JBQ2pELGlDQUFpQyxHQUNqQyxJQUFJUSxNQUNGUixVQUFVQyxJQUFJLEtBQUssb0JBQ2ZELFVBQVVTLFFBQVEsR0FDbEJULFVBQVVDLElBQUksS0FBSyxvQkFDakJELFVBQVVVLFFBQVEsR0FDbEI7b0JBQUNULE1BQU07b0JBQWNVLE1BQU07Z0JBQVM7Z0JBQzVDLElBQUlDLFFBQVFaLFVBQVVLLEtBQUs7Z0JBRTNCLHlDQUF5QztnQkFDekMsSUFBSUwsVUFBVUMsSUFBSSxLQUFLLG1CQUFtQjtvQkFDeENXLFFBQVFKO29CQUNSQSxNQUFNUixVQUFVSyxLQUFLO2dCQUN2QjtnQkFFQSxvQ0FBb0M7Z0JBQ3BDLDBDQUEwQztnQkFDMUNmLDBDQUFNQSxDQUFDc0IsTUFBTVgsSUFBSSxLQUFLO2dCQUV0QiwrQkFBK0IsR0FDL0IsTUFBTVksV0FBVztvQkFDZlosTUFBTTtvQkFDTmEsTUFBTTtvQkFDTkMsV0FDRVAsSUFBSVAsSUFBSSxLQUFLLGdCQUNiVyxNQUFNWCxJQUFJLEtBQUssZ0JBQ2ZPLElBQUlHLElBQUksS0FBS0MsTUFBTUQsSUFBSTtvQkFDekJLLFFBQVE7b0JBQ1JDLFVBQVU7b0JBQ1ZUO29CQUNBSTtnQkFDRjtnQkFDQXJCLDhEQUFNQSxDQUFDUyxXQUFXYTtnQkFDbEIsT0FBT0E7WUFDVDtRQUNGO1FBQ0FuQixNQUFNSSwyQkFDRjtZQUFDRyxNQUFNO1lBQWNVLE1BQU1iLHlCQUF5Qk8sS0FBSyxDQUFDTSxJQUFJO1FBQUEsSUFDOURqQjtJQUNOO0lBRUEsT0FBT0U7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFuYS1saXF1aWRpdHktcG9vbC8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC1zcGVjaWZpZXJzLXRvLWRlY2xhcmF0aW9ucy5qcz83NGZmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7XG4gICAgICBBc3NpZ25tZW50UHJvcGVydHksXG4gICAgICBFeHBvcnRTcGVjaWZpZXIsXG4gICAgICBFeHByZXNzaW9uLFxuICAgICAgSWRlbnRpZmllcixcbiAgICAgIEltcG9ydERlZmF1bHRTcGVjaWZpZXIsXG4gICAgICBJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIsXG4gICAgICBJbXBvcnRTcGVjaWZpZXIsXG4gICAgICBMaXRlcmFsLFxuICAgICAgVmFyaWFibGVEZWNsYXJhdG9yXG4gKiB9IGZyb20gJ2VzdHJlZS1qc3gnXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ2RldmxvcCdcbmltcG9ydCB7Y3JlYXRlfSBmcm9tICcuL2VzdHJlZS11dGlsLWNyZWF0ZS5qcydcblxuLyoqXG4gKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXk8UmVhZG9ubHk8RXhwb3J0U3BlY2lmaWVyPiB8IFJlYWRvbmx5PEltcG9ydERlZmF1bHRTcGVjaWZpZXI+IHwgUmVhZG9ubHk8SW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyPiB8IFJlYWRvbmx5PEltcG9ydFNwZWNpZmllcj4+fSBzcGVjaWZpZXJzXG4gKiAgIFNwZWNpZmllcnMuXG4gKiBAcGFyYW0ge1JlYWRvbmx5PEV4cHJlc3Npb24+fSBpbml0XG4gKiAgIEluaXRpYWxpemVyLlxuICogQHJldHVybnMge0FycmF5PFZhcmlhYmxlRGVjbGFyYXRvcj59XG4gKiAgIERlY2xhcmF0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNwZWNpZmllcnNUb0RlY2xhcmF0aW9ucyhzcGVjaWZpZXJzLCBpbml0KSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7QXJyYXk8VmFyaWFibGVEZWNsYXJhdG9yPn0gKi9cbiAgY29uc3QgZGVjbGFyYXRpb25zID0gW11cbiAgLyoqIEB0eXBlIHtBcnJheTxFeHBvcnRTcGVjaWZpZXIgfCBJbXBvcnREZWZhdWx0U3BlY2lmaWVyIHwgSW1wb3J0U3BlY2lmaWVyPn0gKi9cbiAgY29uc3Qgb3RoZXJTcGVjaWZpZXJzID0gW11cbiAgLy8gQ2FuIG9ubHkgYmUgb25lIGFjY29yZGluZyB0byBKUyBzeW50YXguXG4gIC8qKiBAdHlwZSB7SW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgaW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyXG5cbiAgd2hpbGUgKCsraW5kZXggPCBzcGVjaWZpZXJzLmxlbmd0aCkge1xuICAgIGNvbnN0IHNwZWNpZmllciA9IHNwZWNpZmllcnNbaW5kZXhdXG5cbiAgICBpZiAoc3BlY2lmaWVyLnR5cGUgPT09ICdJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXInKSB7XG4gICAgICBpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIgPSBzcGVjaWZpZXJcbiAgICB9IGVsc2Uge1xuICAgICAgb3RoZXJTcGVjaWZpZXJzLnB1c2goc3BlY2lmaWVyKVxuICAgIH1cbiAgfVxuXG4gIGlmIChpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIpIHtcbiAgICAvKiogQHR5cGUge1ZhcmlhYmxlRGVjbGFyYXRvcn0gKi9cbiAgICBjb25zdCBkZWNsYXJhdG9yID0ge1xuICAgICAgdHlwZTogJ1ZhcmlhYmxlRGVjbGFyYXRvcicsXG4gICAgICBpZDogaW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyLmxvY2FsLFxuICAgICAgaW5pdFxuICAgIH1cbiAgICBjcmVhdGUoaW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyLCBkZWNsYXJhdG9yKVxuICAgIGRlY2xhcmF0aW9ucy5wdXNoKGRlY2xhcmF0b3IpXG4gIH1cblxuICBkZWNsYXJhdGlvbnMucHVzaCh7XG4gICAgdHlwZTogJ1ZhcmlhYmxlRGVjbGFyYXRvcicsXG4gICAgaWQ6IHtcbiAgICAgIHR5cGU6ICdPYmplY3RQYXR0ZXJuJyxcbiAgICAgIHByb3BlcnRpZXM6IG90aGVyU3BlY2lmaWVycy5tYXAoZnVuY3Rpb24gKHNwZWNpZmllcikge1xuICAgICAgICAvKiogQHR5cGUge0lkZW50aWZpZXIgfCBMaXRlcmFsfSAqL1xuICAgICAgICBsZXQga2V5ID1cbiAgICAgICAgICBzcGVjaWZpZXIudHlwZSA9PT0gJ0ltcG9ydFNwZWNpZmllcidcbiAgICAgICAgICAgID8gc3BlY2lmaWVyLmltcG9ydGVkXG4gICAgICAgICAgICA6IHNwZWNpZmllci50eXBlID09PSAnRXhwb3J0U3BlY2lmaWVyJ1xuICAgICAgICAgICAgICA/IHNwZWNpZmllci5leHBvcnRlZFxuICAgICAgICAgICAgICA6IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6ICdkZWZhdWx0J31cbiAgICAgICAgbGV0IHZhbHVlID0gc3BlY2lmaWVyLmxvY2FsXG5cbiAgICAgICAgLy8gU3dpdGNoIHRoZW0gYXJvdW5kIGlmIHdl4oCZcmUgZXhwb3J0aW5nLlxuICAgICAgICBpZiAoc3BlY2lmaWVyLnR5cGUgPT09ICdFeHBvcnRTcGVjaWZpZXInKSB7XG4gICAgICAgICAgdmFsdWUgPSBrZXlcbiAgICAgICAgICBrZXkgPSBzcGVjaWZpZXIubG9jYWxcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRvIGRvOiB3aGF0IHRvIGRvIGFib3V0IGxpdGVyYWxzP1xuICAgICAgICAvLyBgY29uc3QgeyBhOiAnYicgfSA9IGMoKWAgZG9lcyBub3Qgd29yaz9cbiAgICAgICAgYXNzZXJ0KHZhbHVlLnR5cGUgPT09ICdJZGVudGlmaWVyJylcblxuICAgICAgICAvKiogQHR5cGUge0Fzc2lnbm1lbnRQcm9wZXJ0eX0gKi9cbiAgICAgICAgY29uc3QgcHJvcGVydHkgPSB7XG4gICAgICAgICAgdHlwZTogJ1Byb3BlcnR5JyxcbiAgICAgICAgICBraW5kOiAnaW5pdCcsXG4gICAgICAgICAgc2hvcnRoYW5kOlxuICAgICAgICAgICAga2V5LnR5cGUgPT09ICdJZGVudGlmaWVyJyAmJlxuICAgICAgICAgICAgdmFsdWUudHlwZSA9PT0gJ0lkZW50aWZpZXInICYmXG4gICAgICAgICAgICBrZXkubmFtZSA9PT0gdmFsdWUubmFtZSxcbiAgICAgICAgICBtZXRob2Q6IGZhbHNlLFxuICAgICAgICAgIGNvbXB1dGVkOiBmYWxzZSxcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfVxuICAgICAgICBjcmVhdGUoc3BlY2lmaWVyLCBwcm9wZXJ0eSlcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5XG4gICAgICB9KVxuICAgIH0sXG4gICAgaW5pdDogaW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyXG4gICAgICA/IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWU6IGltcG9ydE5hbWVzcGFjZVNwZWNpZmllci5sb2NhbC5uYW1lfVxuICAgICAgOiBpbml0XG4gIH0pXG5cbiAgcmV0dXJuIGRlY2xhcmF0aW9uc1xufVxuIl0sIm5hbWVzIjpbIm9rIiwiYXNzZXJ0IiwiY3JlYXRlIiwic3BlY2lmaWVyc1RvRGVjbGFyYXRpb25zIiwic3BlY2lmaWVycyIsImluaXQiLCJpbmRleCIsImRlY2xhcmF0aW9ucyIsIm90aGVyU3BlY2lmaWVycyIsImltcG9ydE5hbWVzcGFjZVNwZWNpZmllciIsImxlbmd0aCIsInNwZWNpZmllciIsInR5cGUiLCJwdXNoIiwiZGVjbGFyYXRvciIsImlkIiwibG9jYWwiLCJwcm9wZXJ0aWVzIiwibWFwIiwia2V5IiwiaW1wb3J0ZWQiLCJleHBvcnRlZCIsIm5hbWUiLCJ2YWx1ZSIsInByb3BlcnR5Iiwia2luZCIsInNob3J0aGFuZCIsIm1ldGhvZCIsImNvbXB1dGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toBinaryAddition: () => (/* binding */ toBinaryAddition)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/**\n * @import {Expression} from 'estree-jsx'\n */ \n/**\n * @param {ReadonlyArray<Expression>} expressions\n *   Expressions.\n * @returns {Expression}\n *   Addition.\n */ function toBinaryAddition(expressions) {\n    let index = -1;\n    /** @type {Expression | undefined} */ let left;\n    while(++index < expressions.length){\n        const right = expressions[index];\n        left = left ? {\n            type: \"BinaryExpression\",\n            left,\n            operator: \"+\",\n            right\n        } : right;\n    }\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(left, \"expected non-empty `expressions` to be passed\");\n    return left;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtdG8tYmluYXJ5LWFkZGl0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0NBRUMsR0FFa0M7QUFFbkM7Ozs7O0NBS0MsR0FDTSxTQUFTRSxpQkFBaUJDLFdBQVc7SUFDMUMsSUFBSUMsUUFBUSxDQUFDO0lBQ2IsbUNBQW1DLEdBQ25DLElBQUlDO0lBRUosTUFBTyxFQUFFRCxRQUFRRCxZQUFZRyxNQUFNLENBQUU7UUFDbkMsTUFBTUMsUUFBUUosV0FBVyxDQUFDQyxNQUFNO1FBQ2hDQyxPQUFPQSxPQUFPO1lBQUNHLE1BQU07WUFBb0JIO1lBQU1JLFVBQVU7WUFBS0Y7UUFBSyxJQUFJQTtJQUN6RTtJQUVBTiwwQ0FBTUEsQ0FBQ0ksTUFBTTtJQUNiLE9BQU9BO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb2xhbmEtbGlxdWlkaXR5LXBvb2wvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtdG8tYmluYXJ5LWFkZGl0aW9uLmpzP2U1N2IiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtFeHByZXNzaW9ufSBmcm9tICdlc3RyZWUtanN4J1xuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5cbi8qKlxuICogQHBhcmFtIHtSZWFkb25seUFycmF5PEV4cHJlc3Npb24+fSBleHByZXNzaW9uc1xuICogICBFeHByZXNzaW9ucy5cbiAqIEByZXR1cm5zIHtFeHByZXNzaW9ufVxuICogICBBZGRpdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQmluYXJ5QWRkaXRpb24oZXhwcmVzc2lvbnMpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtFeHByZXNzaW9uIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgbGVmdFxuXG4gIHdoaWxlICgrK2luZGV4IDwgZXhwcmVzc2lvbnMubGVuZ3RoKSB7XG4gICAgY29uc3QgcmlnaHQgPSBleHByZXNzaW9uc1tpbmRleF1cbiAgICBsZWZ0ID0gbGVmdCA/IHt0eXBlOiAnQmluYXJ5RXhwcmVzc2lvbicsIGxlZnQsIG9wZXJhdG9yOiAnKycsIHJpZ2h0fSA6IHJpZ2h0XG4gIH1cblxuICBhc3NlcnQobGVmdCwgJ2V4cGVjdGVkIG5vbi1lbXB0eSBgZXhwcmVzc2lvbnNgIHRvIGJlIHBhc3NlZCcpXG4gIHJldHVybiBsZWZ0XG59XG4iXSwibmFtZXMiOlsib2siLCJhc3NlcnQiLCJ0b0JpbmFyeUFkZGl0aW9uIiwiZXhwcmVzc2lvbnMiLCJpbmRleCIsImxlZnQiLCJsZW5ndGgiLCJyaWdodCIsInR5cGUiLCJvcGVyYXRvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toIdOrMemberExpression: () => (/* binding */ toIdOrMemberExpression),\n/* harmony export */   toJsxIdOrMemberExpression: () => (/* binding */ toJsxIdOrMemberExpression)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(ssr)/./node_modules/estree-util-is-identifier-name/lib/index.js\");\n/**\n * @import {\n      Identifier,\n      JSXIdentifier,\n      JSXMemberExpression,\n      Literal,\n      MemberExpression\n * } from 'estree-jsx'\n */ \n\n/**\n * @param {ReadonlyArray<number | string>} ids\n *   Identifiers (example: `['list', 0]).\n * @returns {Identifier | MemberExpression}\n *   Identifier or member expression.\n */ function toIdOrMemberExpression(ids) {\n    let index = -1;\n    /** @type {Identifier | Literal | MemberExpression | undefined} */ let object;\n    while(++index < ids.length){\n        const name = ids[index];\n        /** @type {Identifier | Literal} */ const id = typeof name === \"string\" && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__.name)(name) ? {\n            type: \"Identifier\",\n            name\n        } : {\n            type: \"Literal\",\n            value: name\n        };\n        object = object ? {\n            type: \"MemberExpression\",\n            object,\n            property: id,\n            computed: id.type === \"Literal\",\n            optional: false\n        } : id;\n    }\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object, \"expected non-empty `ids` to be passed\");\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object.type !== \"Literal\", \"expected identifier as left-most value\");\n    return object;\n}\n/**\n * @param {ReadonlyArray<number | string>} ids\n *   Identifiers (example: `['list', 0]).\n * @returns {JSXIdentifier | JSXMemberExpression}\n *   Identifier or member expression.\n */ function toJsxIdOrMemberExpression(ids) {\n    let index = -1;\n    /** @type {JSXIdentifier | JSXMemberExpression | undefined} */ let object;\n    while(++index < ids.length){\n        const name = ids[index];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(typeof name === \"string\" && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__.name)(name, {\n            jsx: true\n        }), \"expected valid jsx identifier, not `\" + name + \"`\");\n        /** @type {JSXIdentifier} */ const id = {\n            type: \"JSXIdentifier\",\n            name\n        };\n        object = object ? {\n            type: \"JSXMemberExpression\",\n            object,\n            property: id\n        } : id;\n    }\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object, \"expected non-empty `ids` to be passed\");\n    return object;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtdG8taWQtb3ItbWVtYmVyLWV4cHJlc3Npb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7OztDQVFDLEdBRWtDO0FBQ29DO0FBRXZFOzs7OztDQUtDLEdBQ00sU0FBU0ksdUJBQXVCQyxHQUFHO0lBQ3hDLElBQUlDLFFBQVEsQ0FBQztJQUNiLGdFQUFnRSxHQUNoRSxJQUFJQztJQUVKLE1BQU8sRUFBRUQsUUFBUUQsSUFBSUcsTUFBTSxDQUFFO1FBQzNCLE1BQU1OLE9BQU9HLEdBQUcsQ0FBQ0MsTUFBTTtRQUN2QixpQ0FBaUMsR0FDakMsTUFBTUcsS0FDSixPQUFPUCxTQUFTLFlBQVlDLG9FQUFnQkEsQ0FBQ0QsUUFDekM7WUFBQ1EsTUFBTTtZQUFjUjtRQUFJLElBQ3pCO1lBQUNRLE1BQU07WUFBV0MsT0FBT1Q7UUFBSTtRQUNuQ0ssU0FBU0EsU0FDTDtZQUNFRyxNQUFNO1lBQ05IO1lBQ0FLLFVBQVVIO1lBQ1ZJLFVBQVVKLEdBQUdDLElBQUksS0FBSztZQUN0QkksVUFBVTtRQUNaLElBQ0FMO0lBQ047SUFFQVIsMENBQU1BLENBQUNNLFFBQVE7SUFDZk4sMENBQU1BLENBQUNNLE9BQU9HLElBQUksS0FBSyxXQUFXO0lBQ2xDLE9BQU9IO0FBQ1Q7QUFFQTs7Ozs7Q0FLQyxHQUNNLFNBQVNRLDBCQUEwQlYsR0FBRztJQUMzQyxJQUFJQyxRQUFRLENBQUM7SUFDYiw0REFBNEQsR0FDNUQsSUFBSUM7SUFFSixNQUFPLEVBQUVELFFBQVFELElBQUlHLE1BQU0sQ0FBRTtRQUMzQixNQUFNTixPQUFPRyxHQUFHLENBQUNDLE1BQU07UUFDdkJMLDBDQUFNQSxDQUNKLE9BQU9DLFNBQVMsWUFBWUMsb0VBQWdCQSxDQUFDRCxNQUFNO1lBQUNjLEtBQUs7UUFBSSxJQUM3RCx5Q0FBeUNkLE9BQU87UUFHbEQsMEJBQTBCLEdBQzFCLE1BQU1PLEtBQUs7WUFBQ0MsTUFBTTtZQUFpQlI7UUFBSTtRQUN2Q0ssU0FBU0EsU0FBUztZQUFDRyxNQUFNO1lBQXVCSDtZQUFRSyxVQUFVSDtRQUFFLElBQUlBO0lBQzFFO0lBRUFSLDBDQUFNQSxDQUFDTSxRQUFRO0lBQ2YsT0FBT0E7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFuYS1saXF1aWRpdHktcG9vbC8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC10by1pZC1vci1tZW1iZXItZXhwcmVzc2lvbi5qcz9jMzhlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7XG4gICAgICBJZGVudGlmaWVyLFxuICAgICAgSlNYSWRlbnRpZmllcixcbiAgICAgIEpTWE1lbWJlckV4cHJlc3Npb24sXG4gICAgICBMaXRlcmFsLFxuICAgICAgTWVtYmVyRXhwcmVzc2lvblxuICogfSBmcm9tICdlc3RyZWUtanN4J1xuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5pbXBvcnQge25hbWUgYXMgaXNJZGVudGlmaWVyTmFtZX0gZnJvbSAnZXN0cmVlLXV0aWwtaXMtaWRlbnRpZmllci1uYW1lJ1xuXG4vKipcbiAqIEBwYXJhbSB7UmVhZG9ubHlBcnJheTxudW1iZXIgfCBzdHJpbmc+fSBpZHNcbiAqICAgSWRlbnRpZmllcnMgKGV4YW1wbGU6IGBbJ2xpc3QnLCAwXSkuXG4gKiBAcmV0dXJucyB7SWRlbnRpZmllciB8IE1lbWJlckV4cHJlc3Npb259XG4gKiAgIElkZW50aWZpZXIgb3IgbWVtYmVyIGV4cHJlc3Npb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0lkT3JNZW1iZXJFeHByZXNzaW9uKGlkcykge1xuICBsZXQgaW5kZXggPSAtMVxuICAvKiogQHR5cGUge0lkZW50aWZpZXIgfCBMaXRlcmFsIHwgTWVtYmVyRXhwcmVzc2lvbiB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IG9iamVjdFxuXG4gIHdoaWxlICgrK2luZGV4IDwgaWRzLmxlbmd0aCkge1xuICAgIGNvbnN0IG5hbWUgPSBpZHNbaW5kZXhdXG4gICAgLyoqIEB0eXBlIHtJZGVudGlmaWVyIHwgTGl0ZXJhbH0gKi9cbiAgICBjb25zdCBpZCA9XG4gICAgICB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgaXNJZGVudGlmaWVyTmFtZShuYW1lKVxuICAgICAgICA/IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWV9XG4gICAgICAgIDoge3R5cGU6ICdMaXRlcmFsJywgdmFsdWU6IG5hbWV9XG4gICAgb2JqZWN0ID0gb2JqZWN0XG4gICAgICA/IHtcbiAgICAgICAgICB0eXBlOiAnTWVtYmVyRXhwcmVzc2lvbicsXG4gICAgICAgICAgb2JqZWN0LFxuICAgICAgICAgIHByb3BlcnR5OiBpZCxcbiAgICAgICAgICBjb21wdXRlZDogaWQudHlwZSA9PT0gJ0xpdGVyYWwnLFxuICAgICAgICAgIG9wdGlvbmFsOiBmYWxzZVxuICAgICAgICB9XG4gICAgICA6IGlkXG4gIH1cblxuICBhc3NlcnQob2JqZWN0LCAnZXhwZWN0ZWQgbm9uLWVtcHR5IGBpZHNgIHRvIGJlIHBhc3NlZCcpXG4gIGFzc2VydChvYmplY3QudHlwZSAhPT0gJ0xpdGVyYWwnLCAnZXhwZWN0ZWQgaWRlbnRpZmllciBhcyBsZWZ0LW1vc3QgdmFsdWUnKVxuICByZXR1cm4gb2JqZWN0XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFkb25seUFycmF5PG51bWJlciB8IHN0cmluZz59IGlkc1xuICogICBJZGVudGlmaWVycyAoZXhhbXBsZTogYFsnbGlzdCcsIDBdKS5cbiAqIEByZXR1cm5zIHtKU1hJZGVudGlmaWVyIHwgSlNYTWVtYmVyRXhwcmVzc2lvbn1cbiAqICAgSWRlbnRpZmllciBvciBtZW1iZXIgZXhwcmVzc2lvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvSnN4SWRPck1lbWJlckV4cHJlc3Npb24oaWRzKSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7SlNYSWRlbnRpZmllciB8IEpTWE1lbWJlckV4cHJlc3Npb24gfCB1bmRlZmluZWR9ICovXG4gIGxldCBvYmplY3RcblxuICB3aGlsZSAoKytpbmRleCA8IGlkcy5sZW5ndGgpIHtcbiAgICBjb25zdCBuYW1lID0gaWRzW2luZGV4XVxuICAgIGFzc2VydChcbiAgICAgIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyAmJiBpc0lkZW50aWZpZXJOYW1lKG5hbWUsIHtqc3g6IHRydWV9KSxcbiAgICAgICdleHBlY3RlZCB2YWxpZCBqc3ggaWRlbnRpZmllciwgbm90IGAnICsgbmFtZSArICdgJ1xuICAgIClcblxuICAgIC8qKiBAdHlwZSB7SlNYSWRlbnRpZmllcn0gKi9cbiAgICBjb25zdCBpZCA9IHt0eXBlOiAnSlNYSWRlbnRpZmllcicsIG5hbWV9XG4gICAgb2JqZWN0ID0gb2JqZWN0ID8ge3R5cGU6ICdKU1hNZW1iZXJFeHByZXNzaW9uJywgb2JqZWN0LCBwcm9wZXJ0eTogaWR9IDogaWRcbiAgfVxuXG4gIGFzc2VydChvYmplY3QsICdleHBlY3RlZCBub24tZW1wdHkgYGlkc2AgdG8gYmUgcGFzc2VkJylcbiAgcmV0dXJuIG9iamVjdFxufVxuIl0sIm5hbWVzIjpbIm9rIiwiYXNzZXJ0IiwibmFtZSIsImlzSWRlbnRpZmllck5hbWUiLCJ0b0lkT3JNZW1iZXJFeHByZXNzaW9uIiwiaWRzIiwiaW5kZXgiLCJvYmplY3QiLCJsZW5ndGgiLCJpZCIsInR5cGUiLCJ2YWx1ZSIsInByb3BlcnR5IiwiY29tcHV0ZWQiLCJvcHRpb25hbCIsInRvSnN4SWRPck1lbWJlckV4cHJlc3Npb24iLCJqc3giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/util/extnames.js":
/*!*******************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/extnames.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   md: () => (/* binding */ md),\n/* harmony export */   mdx: () => (/* binding */ mdx)\n/* harmony export */ });\n/* harmony import */ var markdown_extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! markdown-extensions */ \"(ssr)/./node_modules/markdown-extensions/index.js\");\n\nconst md = markdown_extensions__WEBPACK_IMPORTED_MODULE_0__[\"default\"].map(function(d) {\n    return \".\" + d;\n});\nconst mdx = [\n    \".mdx\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXh0bmFtZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9EO0FBRTdDLE1BQU1DLEtBQUtELDJEQUFrQkEsQ0FBQ0UsR0FBRyxDQUFDLFNBQVVDLENBQUM7SUFDbEQsT0FBTyxNQUFNQTtBQUNmLEdBQUU7QUFDSyxNQUFNQyxNQUFNO0lBQUM7Q0FBTyIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFuYS1saXF1aWRpdHktcG9vbC8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9leHRuYW1lcy5qcz9jYWEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtYXJrZG93bkV4dGVuc2lvbnMgZnJvbSAnbWFya2Rvd24tZXh0ZW5zaW9ucydcblxuZXhwb3J0IGNvbnN0IG1kID0gbWFya2Rvd25FeHRlbnNpb25zLm1hcChmdW5jdGlvbiAoZCkge1xuICByZXR1cm4gJy4nICsgZFxufSlcbmV4cG9ydCBjb25zdCBtZHggPSBbJy5tZHgnXVxuIl0sIm5hbWVzIjpbIm1hcmtkb3duRXh0ZW5zaW9ucyIsIm1kIiwibWFwIiwiZCIsIm1keCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/util/extnames.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/util/resolve-evaluate-options.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/resolve-evaluate-options.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveEvaluateOptions: () => (/* binding */ resolveEvaluateOptions)\n/* harmony export */ });\n/**\n * @import {Fragment, Jsx, JsxDev} from 'hast-util-to-jsx-runtime'\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {CompileOptions} from '../compile.js'\n */ /**\n * @typedef {EvaluateProcessorOptions & RunOptions} EvaluateOptions\n *   Configuration for `evaluate`.\n *\n * @typedef {Omit<CompileOptions, 'baseUrl' | 'jsx' | 'jsxImportSource' | 'jsxRuntime' | 'outputFormat' | 'pragma' | 'pragmaFrag' | 'pragmaImportSource' | 'providerImportSource'> } EvaluateProcessorOptions\n *   Compile configuration without JSX options for evaluation.\n *\n * @typedef RunOptions\n *   Configuration to run compiled code.\n *\n *   `Fragment`, `jsx`, and `jsxs` are used when the code is compiled in\n *   production mode (`development: false`).\n *   `Fragment` and `jsxDEV` are used when compiled in development mode\n *   (`development: true`).\n *   `useMDXComponents` is used when the code is compiled with\n *   `providerImportSource: '#'` (the exact value of this compile option\n *   doesn’t matter).\n * @property {URL | string | null | undefined} [baseUrl]\n *   Use this URL as `import.meta.url` and resolve `import` and `export … from`\n *   relative to it (optional, example: `import.meta.url`);\n *   this option can also be given at compile time in `CompileOptions`;\n *   you should pass this (likely at runtime), as you might get runtime errors\n *   when using `import.meta.url` / `import` / `export … from ` otherwise.\n * @property {Fragment} Fragment\n *   Symbol to use for fragments (**required**).\n * @property {Jsx | null | undefined} [jsx]\n *   Function to generate an element with static children in production mode.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Function to generate an element in development mode.\n * @property {Jsx | null | undefined} [jsxs]\n *   Function to generate an element with dynamic children in production mode.\n * @property {UseMdxComponents | null | undefined} [useMDXComponents]\n *   Function to get components from context.\n *\n * @callback UseMdxComponents\n *   Get components from context.\n * @returns {MDXComponents}\n *   Current components.\n */ // Fix to show references to above types in VS Code.\n\"\";\n/**\n * Split compiletime options from runtime options.\n *\n * @param {Readonly<EvaluateOptions> | null | undefined} options\n *   Configuration.\n * @returns {{compiletime: CompileOptions, runtime: RunOptions}}\n *   Split options.\n */ function resolveEvaluateOptions(options) {\n    const { Fragment, baseUrl, development, jsx, jsxDEV, jsxs, useMDXComponents, ...rest } = options || {};\n    if (!Fragment) throw new Error(\"Expected `Fragment` given to `evaluate`\");\n    if (development) {\n        if (!jsxDEV) throw new Error(\"Expected `jsxDEV` given to `evaluate`\");\n    } else {\n        if (!jsx) throw new Error(\"Expected `jsx` given to `evaluate`\");\n        if (!jsxs) throw new Error(\"Expected `jsxs` given to `evaluate`\");\n    }\n    return {\n        compiletime: {\n            ...rest,\n            development,\n            outputFormat: \"function-body\",\n            providerImportSource: useMDXComponents ? \"#\" : undefined\n        },\n        runtime: {\n            Fragment,\n            baseUrl,\n            jsx,\n            jsxDEV,\n            jsxs,\n            useMDXComponents\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvcmVzb2x2ZS1ldmFsdWF0ZS1vcHRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztDQUlDLEdBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBc0NDLEdBRUQsb0RBQW9EO0FBQ3BEO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNBLHVCQUF1QkMsT0FBTztJQUM1QyxNQUFNLEVBQ0pDLFFBQVEsRUFDUkMsT0FBTyxFQUNQQyxXQUFXLEVBQ1hDLEdBQUcsRUFDSEMsTUFBTSxFQUNOQyxJQUFJLEVBQ0pDLGdCQUFnQixFQUNoQixHQUFHQyxNQUNKLEdBQUdSLFdBQVcsQ0FBQztJQUVoQixJQUFJLENBQUNDLFVBQVUsTUFBTSxJQUFJUSxNQUFNO0lBQy9CLElBQUlOLGFBQWE7UUFDZixJQUFJLENBQUNFLFFBQVEsTUFBTSxJQUFJSSxNQUFNO0lBQy9CLE9BQU87UUFDTCxJQUFJLENBQUNMLEtBQUssTUFBTSxJQUFJSyxNQUFNO1FBQzFCLElBQUksQ0FBQ0gsTUFBTSxNQUFNLElBQUlHLE1BQU07SUFDN0I7SUFFQSxPQUFPO1FBQ0xDLGFBQWE7WUFDWCxHQUFHRixJQUFJO1lBQ1BMO1lBQ0FRLGNBQWM7WUFDZEMsc0JBQXNCTCxtQkFBbUIsTUFBTU07UUFDakQ7UUFDQUMsU0FBUztZQUFDYjtZQUFVQztZQUFTRTtZQUFLQztZQUFRQztZQUFNQztRQUFnQjtJQUNsRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYW5hLWxpcXVpZGl0eS1wb29sLy4vbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL3Jlc29sdmUtZXZhbHVhdGUtb3B0aW9ucy5qcz9jZjg3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7RnJhZ21lbnQsIEpzeCwgSnN4RGV2fSBmcm9tICdoYXN0LXV0aWwtdG8tanN4LXJ1bnRpbWUnXG4gKiBAaW1wb3J0IHtNRFhDb21wb25lbnRzfSBmcm9tICdtZHgvdHlwZXMuanMnXG4gKiBAaW1wb3J0IHtDb21waWxlT3B0aW9uc30gZnJvbSAnLi4vY29tcGlsZS5qcydcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFdmFsdWF0ZVByb2Nlc3Nvck9wdGlvbnMgJiBSdW5PcHRpb25zfSBFdmFsdWF0ZU9wdGlvbnNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYGV2YWx1YXRlYC5cbiAqXG4gKiBAdHlwZWRlZiB7T21pdDxDb21waWxlT3B0aW9ucywgJ2Jhc2VVcmwnIHwgJ2pzeCcgfCAnanN4SW1wb3J0U291cmNlJyB8ICdqc3hSdW50aW1lJyB8ICdvdXRwdXRGb3JtYXQnIHwgJ3ByYWdtYScgfCAncHJhZ21hRnJhZycgfCAncHJhZ21hSW1wb3J0U291cmNlJyB8ICdwcm92aWRlckltcG9ydFNvdXJjZSc+IH0gRXZhbHVhdGVQcm9jZXNzb3JPcHRpb25zXG4gKiAgIENvbXBpbGUgY29uZmlndXJhdGlvbiB3aXRob3V0IEpTWCBvcHRpb25zIGZvciBldmFsdWF0aW9uLlxuICpcbiAqIEB0eXBlZGVmIFJ1bk9wdGlvbnNcbiAqICAgQ29uZmlndXJhdGlvbiB0byBydW4gY29tcGlsZWQgY29kZS5cbiAqXG4gKiAgIGBGcmFnbWVudGAsIGBqc3hgLCBhbmQgYGpzeHNgIGFyZSB1c2VkIHdoZW4gdGhlIGNvZGUgaXMgY29tcGlsZWQgaW5cbiAqICAgcHJvZHVjdGlvbiBtb2RlIChgZGV2ZWxvcG1lbnQ6IGZhbHNlYCkuXG4gKiAgIGBGcmFnbWVudGAgYW5kIGBqc3hERVZgIGFyZSB1c2VkIHdoZW4gY29tcGlsZWQgaW4gZGV2ZWxvcG1lbnQgbW9kZVxuICogICAoYGRldmVsb3BtZW50OiB0cnVlYCkuXG4gKiAgIGB1c2VNRFhDb21wb25lbnRzYCBpcyB1c2VkIHdoZW4gdGhlIGNvZGUgaXMgY29tcGlsZWQgd2l0aFxuICogICBgcHJvdmlkZXJJbXBvcnRTb3VyY2U6ICcjJ2AgKHRoZSBleGFjdCB2YWx1ZSBvZiB0aGlzIGNvbXBpbGUgb3B0aW9uXG4gKiAgIGRvZXNu4oCZdCBtYXR0ZXIpLlxuICogQHByb3BlcnR5IHtVUkwgfCBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbYmFzZVVybF1cbiAqICAgVXNlIHRoaXMgVVJMIGFzIGBpbXBvcnQubWV0YS51cmxgIGFuZCByZXNvbHZlIGBpbXBvcnRgIGFuZCBgZXhwb3J0IOKApiBmcm9tYFxuICogICByZWxhdGl2ZSB0byBpdCAob3B0aW9uYWwsIGV4YW1wbGU6IGBpbXBvcnQubWV0YS51cmxgKTtcbiAqICAgdGhpcyBvcHRpb24gY2FuIGFsc28gYmUgZ2l2ZW4gYXQgY29tcGlsZSB0aW1lIGluIGBDb21waWxlT3B0aW9uc2A7XG4gKiAgIHlvdSBzaG91bGQgcGFzcyB0aGlzIChsaWtlbHkgYXQgcnVudGltZSksIGFzIHlvdSBtaWdodCBnZXQgcnVudGltZSBlcnJvcnNcbiAqICAgd2hlbiB1c2luZyBgaW1wb3J0Lm1ldGEudXJsYCAvIGBpbXBvcnRgIC8gYGV4cG9ydCDigKYgZnJvbSBgIG90aGVyd2lzZS5cbiAqIEBwcm9wZXJ0eSB7RnJhZ21lbnR9IEZyYWdtZW50XG4gKiAgIFN5bWJvbCB0byB1c2UgZm9yIGZyYWdtZW50cyAoKipyZXF1aXJlZCoqKS5cbiAqIEBwcm9wZXJ0eSB7SnN4IHwgbnVsbCB8IHVuZGVmaW5lZH0gW2pzeF1cbiAqICAgRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYW4gZWxlbWVudCB3aXRoIHN0YXRpYyBjaGlsZHJlbiBpbiBwcm9kdWN0aW9uIG1vZGUuXG4gKiBAcHJvcGVydHkge0pzeERldiB8IG51bGwgfCB1bmRlZmluZWR9IFtqc3hERVZdXG4gKiAgIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGFuIGVsZW1lbnQgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cbiAqIEBwcm9wZXJ0eSB7SnN4IHwgbnVsbCB8IHVuZGVmaW5lZH0gW2pzeHNdXG4gKiAgIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGFuIGVsZW1lbnQgd2l0aCBkeW5hbWljIGNoaWxkcmVuIGluIHByb2R1Y3Rpb24gbW9kZS5cbiAqIEBwcm9wZXJ0eSB7VXNlTWR4Q29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFt1c2VNRFhDb21wb25lbnRzXVxuICogICBGdW5jdGlvbiB0byBnZXQgY29tcG9uZW50cyBmcm9tIGNvbnRleHQuXG4gKlxuICogQGNhbGxiYWNrIFVzZU1keENvbXBvbmVudHNcbiAqICAgR2V0IGNvbXBvbmVudHMgZnJvbSBjb250ZXh0LlxuICogQHJldHVybnMge01EWENvbXBvbmVudHN9XG4gKiAgIEN1cnJlbnQgY29tcG9uZW50cy5cbiAqL1xuXG4vLyBGaXggdG8gc2hvdyByZWZlcmVuY2VzIHRvIGFib3ZlIHR5cGVzIGluIFZTIENvZGUuXG4nJ1xuXG4vKipcbiAqIFNwbGl0IGNvbXBpbGV0aW1lIG9wdGlvbnMgZnJvbSBydW50aW1lIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxFdmFsdWF0ZU9wdGlvbnM+IHwgbnVsbCB8IHVuZGVmaW5lZH0gb3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uLlxuICogQHJldHVybnMge3tjb21waWxldGltZTogQ29tcGlsZU9wdGlvbnMsIHJ1bnRpbWU6IFJ1bk9wdGlvbnN9fVxuICogICBTcGxpdCBvcHRpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUV2YWx1YXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBGcmFnbWVudCxcbiAgICBiYXNlVXJsLFxuICAgIGRldmVsb3BtZW50LFxuICAgIGpzeCxcbiAgICBqc3hERVYsXG4gICAganN4cyxcbiAgICB1c2VNRFhDb21wb25lbnRzLFxuICAgIC4uLnJlc3RcbiAgfSA9IG9wdGlvbnMgfHwge31cblxuICBpZiAoIUZyYWdtZW50KSB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGBGcmFnbWVudGAgZ2l2ZW4gdG8gYGV2YWx1YXRlYCcpXG4gIGlmIChkZXZlbG9wbWVudCkge1xuICAgIGlmICghanN4REVWKSB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGBqc3hERVZgIGdpdmVuIHRvIGBldmFsdWF0ZWAnKVxuICB9IGVsc2Uge1xuICAgIGlmICghanN4KSB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGBqc3hgIGdpdmVuIHRvIGBldmFsdWF0ZWAnKVxuICAgIGlmICghanN4cykgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBganN4c2AgZ2l2ZW4gdG8gYGV2YWx1YXRlYCcpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNvbXBpbGV0aW1lOiB7XG4gICAgICAuLi5yZXN0LFxuICAgICAgZGV2ZWxvcG1lbnQsXG4gICAgICBvdXRwdXRGb3JtYXQ6ICdmdW5jdGlvbi1ib2R5JyxcbiAgICAgIHByb3ZpZGVySW1wb3J0U291cmNlOiB1c2VNRFhDb21wb25lbnRzID8gJyMnIDogdW5kZWZpbmVkXG4gICAgfSxcbiAgICBydW50aW1lOiB7RnJhZ21lbnQsIGJhc2VVcmwsIGpzeCwganN4REVWLCBqc3hzLCB1c2VNRFhDb21wb25lbnRzfVxuICB9XG59XG4iXSwibmFtZXMiOlsicmVzb2x2ZUV2YWx1YXRlT3B0aW9ucyIsIm9wdGlvbnMiLCJGcmFnbWVudCIsImJhc2VVcmwiLCJkZXZlbG9wbWVudCIsImpzeCIsImpzeERFViIsImpzeHMiLCJ1c2VNRFhDb21wb25lbnRzIiwicmVzdCIsIkVycm9yIiwiY29tcGlsZXRpbWUiLCJvdXRwdXRGb3JtYXQiLCJwcm92aWRlckltcG9ydFNvdXJjZSIsInVuZGVmaW5lZCIsInJ1bnRpbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/util/resolve-evaluate-options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveFileAndOptions: () => (/* binding */ resolveFileAndOptions)\n/* harmony export */ });\n/* harmony import */ var vfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vfile */ \"(ssr)/./node_modules/vfile/lib/index.js\");\n/* harmony import */ var _extnames_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extnames.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/extnames.js\");\n/**\n * @import {Compatible} from 'vfile'\n * @import {CompileOptions} from '../compile.js'\n * @import {ProcessorOptions} from '../core.js'\n */ \n\n/**\n * Create a file and options from a given `vfileCompatible` and options that\n * might contain `format: 'detect'`.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   File.\n * @param {Readonly<CompileOptions> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {{file: VFile, options: ProcessorOptions}}\n *   File and options.\n */ function resolveFileAndOptions(vfileCompatible, options) {\n    const file = looksLikeAVFile(vfileCompatible) ? vfileCompatible : new vfile__WEBPACK_IMPORTED_MODULE_0__.VFile(vfileCompatible);\n    const { format, ...rest } = options || {};\n    return {\n        file,\n        options: {\n            format: format === \"md\" || format === \"mdx\" ? format : file.extname && (rest.mdExtensions || _extnames_js__WEBPACK_IMPORTED_MODULE_1__.md).includes(file.extname) ? \"md\" : \"mdx\",\n            ...rest\n        }\n    };\n}\n/**\n * @param {Readonly<Compatible> | null | undefined} [value]\n *   Thing.\n * @returns {value is VFile}\n *   Check.\n */ function looksLikeAVFile(value) {\n    return Boolean(value && typeof value === \"object\" && \"message\" in value && \"messages\" in value);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvcmVzb2x2ZS1maWxlLWFuZC1vcHRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0NBSUMsR0FFMEI7QUFDSztBQUVoQzs7Ozs7Ozs7OztDQVVDLEdBQ00sU0FBU0Usc0JBQXNCQyxlQUFlLEVBQUVDLE9BQU87SUFDNUQsTUFBTUMsT0FBT0MsZ0JBQWdCSCxtQkFDekJBLGtCQUNBLElBQUlILHdDQUFLQSxDQUFDRztJQUNkLE1BQU0sRUFBQ0ksTUFBTSxFQUFFLEdBQUdDLE1BQUssR0FBR0osV0FBVyxDQUFDO0lBQ3RDLE9BQU87UUFDTEM7UUFDQUQsU0FBUztZQUNQRyxRQUNFQSxXQUFXLFFBQVFBLFdBQVcsUUFDMUJBLFNBQ0FGLEtBQUtJLE9BQU8sSUFBSSxDQUFDRCxLQUFLRSxZQUFZLElBQUlULDRDQUFDLEVBQUdVLFFBQVEsQ0FBQ04sS0FBS0ksT0FBTyxJQUM3RCxPQUNBO1lBQ1IsR0FBR0QsSUFBSTtRQUNUO0lBQ0Y7QUFDRjtBQUVBOzs7OztDQUtDLEdBQ0QsU0FBU0YsZ0JBQWdCTSxLQUFLO0lBQzVCLE9BQU9DLFFBQ0xELFNBQ0UsT0FBT0EsVUFBVSxZQUNqQixhQUFhQSxTQUNiLGNBQWNBO0FBRXBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYW5hLWxpcXVpZGl0eS1wb29sLy4vbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL3Jlc29sdmUtZmlsZS1hbmQtb3B0aW9ucy5qcz8wZDlmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7Q29tcGF0aWJsZX0gZnJvbSAndmZpbGUnXG4gKiBAaW1wb3J0IHtDb21waWxlT3B0aW9uc30gZnJvbSAnLi4vY29tcGlsZS5qcydcbiAqIEBpbXBvcnQge1Byb2Nlc3Nvck9wdGlvbnN9IGZyb20gJy4uL2NvcmUuanMnXG4gKi9cblxuaW1wb3J0IHtWRmlsZX0gZnJvbSAndmZpbGUnXG5pbXBvcnQge21kfSBmcm9tICcuL2V4dG5hbWVzLmpzJ1xuXG4vKipcbiAqIENyZWF0ZSBhIGZpbGUgYW5kIG9wdGlvbnMgZnJvbSBhIGdpdmVuIGB2ZmlsZUNvbXBhdGlibGVgIGFuZCBvcHRpb25zIHRoYXRcbiAqIG1pZ2h0IGNvbnRhaW4gYGZvcm1hdDogJ2RldGVjdCdgLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGF0aWJsZT59IHZmaWxlQ29tcGF0aWJsZVxuICogICBGaWxlLlxuICogQHBhcmFtIHtSZWFkb25seTxDb21waWxlT3B0aW9ucz4gfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0aW9uc11cbiAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICogQHJldHVybnMge3tmaWxlOiBWRmlsZSwgb3B0aW9uczogUHJvY2Vzc29yT3B0aW9uc319XG4gKiAgIEZpbGUgYW5kIG9wdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlRmlsZUFuZE9wdGlvbnModmZpbGVDb21wYXRpYmxlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGZpbGUgPSBsb29rc0xpa2VBVkZpbGUodmZpbGVDb21wYXRpYmxlKVxuICAgID8gdmZpbGVDb21wYXRpYmxlXG4gICAgOiBuZXcgVkZpbGUodmZpbGVDb21wYXRpYmxlKVxuICBjb25zdCB7Zm9ybWF0LCAuLi5yZXN0fSA9IG9wdGlvbnMgfHwge31cbiAgcmV0dXJuIHtcbiAgICBmaWxlLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIGZvcm1hdDpcbiAgICAgICAgZm9ybWF0ID09PSAnbWQnIHx8IGZvcm1hdCA9PT0gJ21keCdcbiAgICAgICAgICA/IGZvcm1hdFxuICAgICAgICAgIDogZmlsZS5leHRuYW1lICYmIChyZXN0Lm1kRXh0ZW5zaW9ucyB8fCBtZCkuaW5jbHVkZXMoZmlsZS5leHRuYW1lKVxuICAgICAgICAgICAgPyAnbWQnXG4gICAgICAgICAgICA6ICdtZHgnLFxuICAgICAgLi4ucmVzdFxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGF0aWJsZT4gfCBudWxsIHwgdW5kZWZpbmVkfSBbdmFsdWVdXG4gKiAgIFRoaW5nLlxuICogQHJldHVybnMge3ZhbHVlIGlzIFZGaWxlfVxuICogICBDaGVjay5cbiAqL1xuZnVuY3Rpb24gbG9va3NMaWtlQVZGaWxlKHZhbHVlKSB7XG4gIHJldHVybiBCb29sZWFuKFxuICAgIHZhbHVlICYmXG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgICAnbWVzc2FnZScgaW4gdmFsdWUgJiZcbiAgICAgICdtZXNzYWdlcycgaW4gdmFsdWVcbiAgKVxufVxuIl0sIm5hbWVzIjpbIlZGaWxlIiwibWQiLCJyZXNvbHZlRmlsZUFuZE9wdGlvbnMiLCJ2ZmlsZUNvbXBhdGlibGUiLCJvcHRpb25zIiwiZmlsZSIsImxvb2tzTGlrZUFWRmlsZSIsImZvcm1hdCIsInJlc3QiLCJleHRuYW1lIiwibWRFeHRlbnNpb25zIiwiaW5jbHVkZXMiLCJ2YWx1ZSIsIkJvb2xlYW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js\n");

/***/ })

};
;