"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/estree-util-scope";
exports.ids = ["vendor-chunks/estree-util-scope"];
exports.modules = {

/***/ "(ssr)/./node_modules/estree-util-scope/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/estree-util-scope/lib/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createVisitors: () => (/* binding */ createVisitors)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/**\n * @import {Node, Pattern} from 'estree'\n * @import {Scope, Visitors} from './types.js'\n */ \n/**\n * Create state to track whatâ€™s defined.\n *\n * @returns {Visitors}\n *   State.\n */ function createVisitors() {\n    /** @type {[topLevel: Scope, ...rest: Array<Scope>]} */ const scopes = [\n        {\n            block: false,\n            defined: []\n        }\n    ];\n    return {\n        enter,\n        exit,\n        scopes\n    };\n    /**\n   * @param {Node} node\n   *   Node.\n   * @returns {undefined}\n   *   Nothing.\n   */ function enter(node) {\n        // On arrow functions, create scope, add parameters.\n        if (node.type === \"ArrowFunctionExpression\") {\n            scopes.push({\n                block: false,\n                defined: []\n            });\n            for (const parameter of node.params){\n                definePattern(parameter, false);\n            }\n        } else if (node.type === \"BlockStatement\" || node.type === \"DoWhileStatement\" || node.type === \"ForInStatement\" || node.type === \"ForOfStatement\" || node.type === \"ForStatement\" || node.type === \"WhileStatement\") {\n            scopes.push({\n                block: true,\n                defined: []\n            });\n        } else if (node.type === \"CatchClause\") {\n            scopes.push({\n                block: true,\n                defined: []\n            });\n            if (node.param) definePattern(node.param, true);\n        } else if (node.type === \"ClassDeclaration\") {\n            defineIdentifier(node.id.name, false);\n        } else if (node.type === \"FunctionDeclaration\") {\n            defineIdentifier(node.id.name, false);\n            scopes.push({\n                block: false,\n                defined: []\n            });\n            for (const parameter of node.params){\n                definePattern(parameter, false);\n            }\n        } else if (node.type === \"FunctionExpression\") {\n            if (node.id) defineIdentifier(node.id.name, false);\n            scopes.push({\n                block: false,\n                defined: []\n            });\n            for (const parameter of node.params){\n                definePattern(parameter, false);\n            }\n        } else if (node.type === \"ImportDeclaration\") {\n            for (const specifier of node.specifiers){\n                defineIdentifier(specifier.local.name, false);\n            }\n        } else if (node.type === \"VariableDeclaration\") {\n            for (const declaration of node.declarations){\n                definePattern(declaration.id, node.kind !== \"var\");\n            }\n        }\n    }\n    /**\n   * @param {Node} node\n   *   Node.\n   * @returns {undefined}\n   *   Nothing.\n   */ function exit(node) {\n        if (node.type === \"ArrowFunctionExpression\" || node.type === \"FunctionDeclaration\" || node.type === \"FunctionExpression\") {\n            const scope = scopes.pop();\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(scope, \"expected scope\");\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(!scope.block, \"expected non-block\");\n        } else if (node.type === \"BlockStatement\" || node.type === \"CatchClause\" || node.type === \"DoWhileStatement\" || node.type === \"ForInStatement\" || node.type === \"ForOfStatement\" || node.type === \"ForStatement\" || node.type === \"WhileStatement\") {\n            const scope = scopes.pop();\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(scope, \"expected scope\");\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(scope.block, \"expected block\");\n        }\n    }\n    /**\n   * Define an identifier in a scope.\n   *\n   * @param {string} id\n   * @param {boolean} block\n   * @returns {undefined}\n   */ function defineIdentifier(id, block) {\n        let index = scopes.length;\n        /** @type {Scope | undefined} */ let scope;\n        while(index--){\n            scope = scopes[index];\n            if (block || !scope.block) {\n                break;\n            }\n        }\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(scope);\n        scope.defined.push(id);\n    }\n    /**\n   * Define a pattern in a scope.\n   *\n   * @param {Pattern} pattern\n   * @param {boolean} block\n   */ function definePattern(pattern, block) {\n        // `[, x]`\n        if (pattern.type === \"ArrayPattern\") {\n            for (const element of pattern.elements){\n                if (element) {\n                    definePattern(element, block);\n                }\n            }\n        } else if (pattern.type === \"AssignmentPattern\") {\n            definePattern(pattern.left, block);\n        } else if (pattern.type === \"Identifier\") {\n            defineIdentifier(pattern.name, block);\n        } else if (pattern.type === \"ObjectPattern\") {\n            for (const property of pattern.properties){\n                // `{key}`, `{key = value}`, `{key: value}`\n                if (property.type === \"Property\") {\n                    definePattern(property.value, block);\n                } else {\n                    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(property.type === \"RestElement\");\n                    definePattern(property, block);\n                }\n            }\n        } else {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(pattern.type === \"RestElement\");\n            definePattern(pattern.argument, block);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/estree-util-scope/lib/index.js\n");

/***/ })

};
;