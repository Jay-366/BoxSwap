"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ogl";
exports.ids = ["vendor-chunks/ogl"];
exports.modules = {

/***/ "(ssr)/./node_modules/ogl/src/core/Geometry.js":
/*!***********************************************!*\
  !*** ./node_modules/ogl/src/core/Geometry.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Geometry: () => (/* binding */ Geometry)\n/* harmony export */ });\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Vec3.js */ \"(ssr)/./node_modules/ogl/src/math/Vec3.js\");\n// attribute params\n// {\n//     data - typed array eg UInt16Array for indices, Float32Array\n//     size - int default 1\n//     instanced - default null. Pass divisor amount\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\n//     normalized - boolean default false\n//     buffer - gl buffer, if buffer exists, don't need to provide data - although needs position data for bounds calculation\n//     stride - default 0 - for when passing in buffer\n//     offset - default 0 - for when passing in buffer\n//     count - default null - for when passing in buffer\n//     min - array - for when passing in buffer\n//     max - array - for when passing in buffer\n// }\n// TODO: fit in transform feedback\n\nconst tempVec3 = /* @__PURE__ */ new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3();\nlet ID = 1;\nlet ATTR_ID = 1;\n// To stop inifinite warnings\nlet isBoundsWarned = false;\nclass Geometry {\n    constructor(gl, attributes = {}){\n        if (!gl.canvas) console.error(\"gl not passed as first argument to Geometry\");\n        this.gl = gl;\n        this.attributes = attributes;\n        this.id = ID++;\n        // Store one VAO per program attribute locations order\n        this.VAOs = {};\n        this.drawRange = {\n            start: 0,\n            count: 0\n        };\n        this.instancedCount = 0;\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        this.gl.renderer.bindVertexArray(null);\n        this.gl.renderer.currentGeometry = null;\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n        // create the buffers\n        for(let key in attributes){\n            this.addAttribute(key, attributes[key]);\n        }\n    }\n    addAttribute(key, attr) {\n        this.attributes[key] = attr;\n        // Set options\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\n        attr.size = attr.size || 1;\n        attr.type = attr.type || (attr.data.constructor === Float32Array ? this.gl.FLOAT : attr.data.constructor === Uint16Array ? this.gl.UNSIGNED_SHORT : this.gl.UNSIGNED_INT); // Uint32Array\n        attr.target = key === \"index\" ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n        attr.normalized = attr.normalized || false;\n        attr.stride = attr.stride || 0;\n        attr.offset = attr.offset || 0;\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\n        attr.divisor = attr.instanced || 0;\n        attr.needsUpdate = false;\n        attr.usage = attr.usage || this.gl.STATIC_DRAW;\n        if (!attr.buffer) {\n            // Push data to buffer\n            this.updateAttribute(attr);\n        }\n        // Update geometry counts. If indexed, ignore regular attributes\n        if (attr.divisor) {\n            this.isInstanced = true;\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\n                console.warn(\"geometry has multiple instanced buffers of different length\");\n                return this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor);\n            }\n            this.instancedCount = attr.count * attr.divisor;\n        } else if (key === \"index\") {\n            this.drawRange.count = attr.count;\n        } else if (!this.attributes.index) {\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\n        }\n    }\n    updateAttribute(attr) {\n        const isNewBuffer = !attr.buffer;\n        if (isNewBuffer) attr.buffer = this.gl.createBuffer();\n        if (this.glState.boundBuffer !== attr.buffer) {\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n        }\n        if (isNewBuffer) {\n            this.gl.bufferData(attr.target, attr.data, attr.usage);\n        } else {\n            this.gl.bufferSubData(attr.target, 0, attr.data);\n        }\n        attr.needsUpdate = false;\n    }\n    setIndex(value) {\n        this.addAttribute(\"index\", value);\n    }\n    setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n    }\n    setInstancedCount(value) {\n        this.instancedCount = value;\n    }\n    createVAO(program) {\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n        this.bindAttributes(program);\n    }\n    bindAttributes(program) {\n        // Link all attributes to program using gl.vertexAttribPointer\n        program.attributeLocations.forEach((location, { name, type })=>{\n            // If geometry missing a required shader attribute\n            if (!this.attributes[name]) {\n                console.warn(`active attribute ${name} not being supplied`);\n                return;\n            }\n            const attr = this.attributes[name];\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n            // For matrix attributes, buffer needs to be defined per column\n            let numLoc = 1;\n            if (type === 35674) numLoc = 2; // mat2\n            if (type === 35675) numLoc = 3; // mat3\n            if (type === 35676) numLoc = 4; // mat4\n            const size = attr.size / numLoc;\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * 4;\n            const offset = numLoc === 1 ? 0 : numLoc * 4;\n            for(let i = 0; i < numLoc; i++){\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\n                this.gl.enableVertexAttribArray(location + i);\n                // For instanced attributes, divisor needs to be set.\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\n            }\n        });\n        // Bind indices if geometry indexed\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\n    }\n    draw({ program, mode = this.gl.TRIANGLES }) {\n        if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n            this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\n        }\n        // Check if any attributes need updating\n        program.attributeLocations.forEach((location, { name })=>{\n            const attr = this.attributes[name];\n            if (attr.needsUpdate) this.updateAttribute(attr);\n        });\n        // For drawElements, offset needs to be multiple of type size\n        let indexBytesPerElement = 2;\n        if (this.attributes.index?.type === this.gl.UNSIGNED_INT) indexBytesPerElement = 4;\n        if (this.isInstanced) {\n            if (this.attributes.index) {\n                this.gl.renderer.drawElementsInstanced(mode, this.drawRange.count, this.attributes.index.type, this.attributes.index.offset + this.drawRange.start * indexBytesPerElement, this.instancedCount);\n            } else {\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\n            }\n        } else {\n            if (this.attributes.index) {\n                this.gl.drawElements(mode, this.drawRange.count, this.attributes.index.type, this.attributes.index.offset + this.drawRange.start * indexBytesPerElement);\n            } else {\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\n            }\n        }\n    }\n    getPosition() {\n        // Use position buffer, or min/max if available\n        const attr = this.attributes.position;\n        // if (attr.min) return [...attr.min, ...attr.max];\n        if (attr.data) return attr;\n        if (isBoundsWarned) return;\n        console.warn(\"No position buffer data found to compute bounds\");\n        return isBoundsWarned = true;\n    }\n    computeBoundingBox(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n        if (!this.bounds) {\n            this.bounds = {\n                min: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(),\n                max: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(),\n                center: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(),\n                scale: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(),\n                radius: Infinity\n            };\n        }\n        const min = this.bounds.min;\n        const max = this.bounds.max;\n        const center = this.bounds.center;\n        const scale = this.bounds.scale;\n        min.set(+Infinity);\n        max.set(-Infinity);\n        // TODO: check size of position (eg triangle with Vec2)\n        for(let i = 0, l = array.length; i < l; i += stride){\n            const x = array[i];\n            const y = array[i + 1];\n            const z = array[i + 2];\n            min.x = Math.min(x, min.x);\n            min.y = Math.min(y, min.y);\n            min.z = Math.min(z, min.z);\n            max.x = Math.max(x, max.x);\n            max.y = Math.max(y, max.y);\n            max.z = Math.max(z, max.z);\n        }\n        scale.sub(max, min);\n        center.add(min, max).divide(2);\n    }\n    computeBoundingSphere(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n        if (!this.bounds) this.computeBoundingBox(attr);\n        let maxRadiusSq = 0;\n        for(let i = 0, l = array.length; i < l; i += stride){\n            tempVec3.fromArray(array, i);\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\n        }\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\n    }\n    remove() {\n        for(let key in this.VAOs){\n            this.gl.renderer.deleteVertexArray(this.VAOs[key]);\n            delete this.VAOs[key];\n        }\n        for(let key in this.attributes){\n            this.gl.deleteBuffer(this.attributes[key].buffer);\n            delete this.attributes[key];\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/core/Geometry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/core/Mesh.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/core/Mesh.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mesh: () => (/* binding */ Mesh)\n/* harmony export */ });\n/* harmony import */ var _Transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Transform.js */ \"(ssr)/./node_modules/ogl/src/core/Transform.js\");\n/* harmony import */ var _math_Mat3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/Mat3.js */ \"(ssr)/./node_modules/ogl/src/math/Mat3.js\");\n/* harmony import */ var _math_Mat4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Mat4.js */ \"(ssr)/./node_modules/ogl/src/math/Mat4.js\");\n\n\n\nlet ID = 0;\nclass Mesh extends _Transform_js__WEBPACK_IMPORTED_MODULE_0__.Transform {\n    constructor(gl, { geometry, program, mode = gl.TRIANGLES, frustumCulled = true, renderOrder = 0 } = {}){\n        super();\n        if (!gl.canvas) console.error(\"gl not passed as first argument to Mesh\");\n        this.gl = gl;\n        this.id = ID++;\n        this.geometry = geometry;\n        this.program = program;\n        this.mode = mode;\n        // Used to skip frustum culling\n        this.frustumCulled = frustumCulled;\n        // Override sorting to force an order\n        this.renderOrder = renderOrder;\n        this.modelViewMatrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_1__.Mat4();\n        this.normalMatrix = new _math_Mat3_js__WEBPACK_IMPORTED_MODULE_2__.Mat3();\n        this.beforeRenderCallbacks = [];\n        this.afterRenderCallbacks = [];\n    }\n    onBeforeRender(f) {\n        this.beforeRenderCallbacks.push(f);\n        return this;\n    }\n    onAfterRender(f) {\n        this.afterRenderCallbacks.push(f);\n        return this;\n    }\n    draw({ camera } = {}) {\n        if (camera) {\n            // Add empty matrix uniforms to program if unset\n            if (!this.program.uniforms.modelMatrix) {\n                Object.assign(this.program.uniforms, {\n                    modelMatrix: {\n                        value: null\n                    },\n                    viewMatrix: {\n                        value: null\n                    },\n                    modelViewMatrix: {\n                        value: null\n                    },\n                    normalMatrix: {\n                        value: null\n                    },\n                    projectionMatrix: {\n                        value: null\n                    },\n                    cameraPosition: {\n                        value: null\n                    }\n                });\n            }\n            // Set the matrix uniforms\n            this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\n            this.program.uniforms.cameraPosition.value = camera.worldPosition;\n            this.program.uniforms.viewMatrix.value = camera.viewMatrix;\n            this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n            this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n            this.program.uniforms.modelMatrix.value = this.worldMatrix;\n            this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\n            this.program.uniforms.normalMatrix.value = this.normalMatrix;\n        }\n        this.beforeRenderCallbacks.forEach((f)=>f && f({\n                mesh: this,\n                camera\n            }));\n        // determine if faces need to be flipped - when mesh scaled negatively\n        let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\n        this.program.use({\n            flipFaces\n        });\n        this.geometry.draw({\n            mode: this.mode,\n            program: this.program\n        });\n        this.afterRenderCallbacks.forEach((f)=>f && f({\n                mesh: this,\n                camera\n            }));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9jb3JlL01lc2guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyQztBQUNKO0FBQ0E7QUFFdkMsSUFBSUcsS0FBSztBQUVGLE1BQU1DLGFBQWFKLG9EQUFTQTtJQUMvQkssWUFBWUMsRUFBRSxFQUFFLEVBQUVDLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxPQUFPSCxHQUFHSSxTQUFTLEVBQUVDLGdCQUFnQixJQUFJLEVBQUVDLGNBQWMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUU7UUFDcEcsS0FBSztRQUNMLElBQUksQ0FBQ04sR0FBR08sTUFBTSxFQUFFQyxRQUFRQyxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDVCxFQUFFLEdBQUdBO1FBQ1YsSUFBSSxDQUFDVSxFQUFFLEdBQUdiO1FBQ1YsSUFBSSxDQUFDSSxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsSUFBSSxHQUFHQTtRQUVaLCtCQUErQjtRQUMvQixJQUFJLENBQUNFLGFBQWEsR0FBR0E7UUFFckIscUNBQXFDO1FBQ3JDLElBQUksQ0FBQ0MsV0FBVyxHQUFHQTtRQUNuQixJQUFJLENBQUNLLGVBQWUsR0FBRyxJQUFJZiwrQ0FBSUE7UUFDL0IsSUFBSSxDQUFDZ0IsWUFBWSxHQUFHLElBQUlqQiwrQ0FBSUE7UUFDNUIsSUFBSSxDQUFDa0IscUJBQXFCLEdBQUcsRUFBRTtRQUMvQixJQUFJLENBQUNDLG9CQUFvQixHQUFHLEVBQUU7SUFDbEM7SUFFQUMsZUFBZUMsQ0FBQyxFQUFFO1FBQ2QsSUFBSSxDQUFDSCxxQkFBcUIsQ0FBQ0ksSUFBSSxDQUFDRDtRQUNoQyxPQUFPLElBQUk7SUFDZjtJQUVBRSxjQUFjRixDQUFDLEVBQUU7UUFDYixJQUFJLENBQUNGLG9CQUFvQixDQUFDRyxJQUFJLENBQUNEO1FBQy9CLE9BQU8sSUFBSTtJQUNmO0lBRUFHLEtBQUssRUFBRUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUU7UUFDbEIsSUFBSUEsUUFBUTtZQUNSLGdEQUFnRDtZQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDbEIsT0FBTyxDQUFDbUIsUUFBUSxDQUFDQyxXQUFXLEVBQUU7Z0JBQ3BDQyxPQUFPQyxNQUFNLENBQUMsSUFBSSxDQUFDdEIsT0FBTyxDQUFDbUIsUUFBUSxFQUFFO29CQUNqQ0MsYUFBYTt3QkFBRUcsT0FBTztvQkFBSztvQkFDM0JDLFlBQVk7d0JBQUVELE9BQU87b0JBQUs7b0JBQzFCZCxpQkFBaUI7d0JBQUVjLE9BQU87b0JBQUs7b0JBQy9CYixjQUFjO3dCQUFFYSxPQUFPO29CQUFLO29CQUM1QkUsa0JBQWtCO3dCQUFFRixPQUFPO29CQUFLO29CQUNoQ0csZ0JBQWdCO3dCQUFFSCxPQUFPO29CQUFLO2dCQUNsQztZQUNKO1lBRUEsMEJBQTBCO1lBQzFCLElBQUksQ0FBQ3ZCLE9BQU8sQ0FBQ21CLFFBQVEsQ0FBQ00sZ0JBQWdCLENBQUNGLEtBQUssR0FBR0wsT0FBT08sZ0JBQWdCO1lBQ3RFLElBQUksQ0FBQ3pCLE9BQU8sQ0FBQ21CLFFBQVEsQ0FBQ08sY0FBYyxDQUFDSCxLQUFLLEdBQUdMLE9BQU9TLGFBQWE7WUFDakUsSUFBSSxDQUFDM0IsT0FBTyxDQUFDbUIsUUFBUSxDQUFDSyxVQUFVLENBQUNELEtBQUssR0FBR0wsT0FBT00sVUFBVTtZQUMxRCxJQUFJLENBQUNmLGVBQWUsQ0FBQ21CLFFBQVEsQ0FBQ1YsT0FBT00sVUFBVSxFQUFFLElBQUksQ0FBQ0ssV0FBVztZQUNqRSxJQUFJLENBQUNuQixZQUFZLENBQUNvQixlQUFlLENBQUMsSUFBSSxDQUFDckIsZUFBZTtZQUN0RCxJQUFJLENBQUNULE9BQU8sQ0FBQ21CLFFBQVEsQ0FBQ0MsV0FBVyxDQUFDRyxLQUFLLEdBQUcsSUFBSSxDQUFDTSxXQUFXO1lBQzFELElBQUksQ0FBQzdCLE9BQU8sQ0FBQ21CLFFBQVEsQ0FBQ1YsZUFBZSxDQUFDYyxLQUFLLEdBQUcsSUFBSSxDQUFDZCxlQUFlO1lBQ2xFLElBQUksQ0FBQ1QsT0FBTyxDQUFDbUIsUUFBUSxDQUFDVCxZQUFZLENBQUNhLEtBQUssR0FBRyxJQUFJLENBQUNiLFlBQVk7UUFDaEU7UUFDQSxJQUFJLENBQUNDLHFCQUFxQixDQUFDb0IsT0FBTyxDQUFDLENBQUNqQixJQUFNQSxLQUFLQSxFQUFFO2dCQUFFa0IsTUFBTSxJQUFJO2dCQUFFZDtZQUFPO1FBRXRFLHNFQUFzRTtRQUN0RSxJQUFJZSxZQUFZLElBQUksQ0FBQ2pDLE9BQU8sQ0FBQ2tDLFFBQVEsSUFBSSxJQUFJLENBQUNMLFdBQVcsQ0FBQ00sV0FBVyxLQUFLO1FBQzFFLElBQUksQ0FBQ25DLE9BQU8sQ0FBQ29DLEdBQUcsQ0FBQztZQUFFSDtRQUFVO1FBQzdCLElBQUksQ0FBQ2xDLFFBQVEsQ0FBQ2tCLElBQUksQ0FBQztZQUFFaEIsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFBRUQsU0FBUyxJQUFJLENBQUNBLE9BQU87UUFBQztRQUM1RCxJQUFJLENBQUNZLG9CQUFvQixDQUFDbUIsT0FBTyxDQUFDLENBQUNqQixJQUFNQSxLQUFLQSxFQUFFO2dCQUFFa0IsTUFBTSxJQUFJO2dCQUFFZDtZQUFPO0lBQ3pFO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb2xhbmEtbGlxdWlkaXR5LXBvb2wvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9jb3JlL01lc2guanM/MjlmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmFuc2Zvcm0gfSBmcm9tICcuL1RyYW5zZm9ybS5qcyc7XG5pbXBvcnQgeyBNYXQzIH0gZnJvbSAnLi4vbWF0aC9NYXQzLmpzJztcbmltcG9ydCB7IE1hdDQgfSBmcm9tICcuLi9tYXRoL01hdDQuanMnO1xuXG5sZXQgSUQgPSAwO1xuXG5leHBvcnQgY2xhc3MgTWVzaCBleHRlbmRzIFRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IoZ2wsIHsgZ2VvbWV0cnksIHByb2dyYW0sIG1vZGUgPSBnbC5UUklBTkdMRVMsIGZydXN0dW1DdWxsZWQgPSB0cnVlLCByZW5kZXJPcmRlciA9IDAgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmICghZ2wuY2FudmFzKSBjb25zb2xlLmVycm9yKCdnbCBub3QgcGFzc2VkIGFzIGZpcnN0IGFyZ3VtZW50IHRvIE1lc2gnKTtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLmlkID0gSUQrKztcbiAgICAgICAgdGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuICAgICAgICB0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuXG4gICAgICAgIC8vIFVzZWQgdG8gc2tpcCBmcnVzdHVtIGN1bGxpbmdcbiAgICAgICAgdGhpcy5mcnVzdHVtQ3VsbGVkID0gZnJ1c3R1bUN1bGxlZDtcblxuICAgICAgICAvLyBPdmVycmlkZSBzb3J0aW5nIHRvIGZvcmNlIGFuIG9yZGVyXG4gICAgICAgIHRoaXMucmVuZGVyT3JkZXIgPSByZW5kZXJPcmRlcjtcbiAgICAgICAgdGhpcy5tb2RlbFZpZXdNYXRyaXggPSBuZXcgTWF0NCgpO1xuICAgICAgICB0aGlzLm5vcm1hbE1hdHJpeCA9IG5ldyBNYXQzKCk7XG4gICAgICAgIHRoaXMuYmVmb3JlUmVuZGVyQ2FsbGJhY2tzID0gW107XG4gICAgICAgIHRoaXMuYWZ0ZXJSZW5kZXJDYWxsYmFja3MgPSBbXTtcbiAgICB9XG5cbiAgICBvbkJlZm9yZVJlbmRlcihmKSB7XG4gICAgICAgIHRoaXMuYmVmb3JlUmVuZGVyQ2FsbGJhY2tzLnB1c2goZik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG9uQWZ0ZXJSZW5kZXIoZikge1xuICAgICAgICB0aGlzLmFmdGVyUmVuZGVyQ2FsbGJhY2tzLnB1c2goZik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRyYXcoeyBjYW1lcmEgfSA9IHt9KSB7XG4gICAgICAgIGlmIChjYW1lcmEpIHtcbiAgICAgICAgICAgIC8vIEFkZCBlbXB0eSBtYXRyaXggdW5pZm9ybXMgdG8gcHJvZ3JhbSBpZiB1bnNldFxuICAgICAgICAgICAgaWYgKCF0aGlzLnByb2dyYW0udW5pZm9ybXMubW9kZWxNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMucHJvZ3JhbS51bmlmb3Jtcywge1xuICAgICAgICAgICAgICAgICAgICBtb2RlbE1hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICB2aWV3TWF0cml4OiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsVmlld01hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICBub3JtYWxNYXRyaXg6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbk1hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICBjYW1lcmFQb3NpdGlvbjogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgdGhlIG1hdHJpeCB1bmlmb3Jtc1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLnByb2plY3Rpb25NYXRyaXgudmFsdWUgPSBjYW1lcmEucHJvamVjdGlvbk1hdHJpeDtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5jYW1lcmFQb3NpdGlvbi52YWx1ZSA9IGNhbWVyYS53b3JsZFBvc2l0aW9uO1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLnZpZXdNYXRyaXgudmFsdWUgPSBjYW1lcmEudmlld01hdHJpeDtcbiAgICAgICAgICAgIHRoaXMubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5KGNhbWVyYS52aWV3TWF0cml4LCB0aGlzLndvcmxkTWF0cml4KTtcbiAgICAgICAgICAgIHRoaXMubm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCh0aGlzLm1vZGVsVmlld01hdHJpeCk7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMubW9kZWxNYXRyaXgudmFsdWUgPSB0aGlzLndvcmxkTWF0cml4O1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLm1vZGVsVmlld01hdHJpeC52YWx1ZSA9IHRoaXMubW9kZWxWaWV3TWF0cml4O1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLm5vcm1hbE1hdHJpeC52YWx1ZSA9IHRoaXMubm9ybWFsTWF0cml4O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmVmb3JlUmVuZGVyQ2FsbGJhY2tzLmZvckVhY2goKGYpID0+IGYgJiYgZih7IG1lc2g6IHRoaXMsIGNhbWVyYSB9KSk7XG5cbiAgICAgICAgLy8gZGV0ZXJtaW5lIGlmIGZhY2VzIG5lZWQgdG8gYmUgZmxpcHBlZCAtIHdoZW4gbWVzaCBzY2FsZWQgbmVnYXRpdmVseVxuICAgICAgICBsZXQgZmxpcEZhY2VzID0gdGhpcy5wcm9ncmFtLmN1bGxGYWNlICYmIHRoaXMud29ybGRNYXRyaXguZGV0ZXJtaW5hbnQoKSA8IDA7XG4gICAgICAgIHRoaXMucHJvZ3JhbS51c2UoeyBmbGlwRmFjZXMgfSk7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnkuZHJhdyh7IG1vZGU6IHRoaXMubW9kZSwgcHJvZ3JhbTogdGhpcy5wcm9ncmFtIH0pO1xuICAgICAgICB0aGlzLmFmdGVyUmVuZGVyQ2FsbGJhY2tzLmZvckVhY2goKGYpID0+IGYgJiYgZih7IG1lc2g6IHRoaXMsIGNhbWVyYSB9KSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIlRyYW5zZm9ybSIsIk1hdDMiLCJNYXQ0IiwiSUQiLCJNZXNoIiwiY29uc3RydWN0b3IiLCJnbCIsImdlb21ldHJ5IiwicHJvZ3JhbSIsIm1vZGUiLCJUUklBTkdMRVMiLCJmcnVzdHVtQ3VsbGVkIiwicmVuZGVyT3JkZXIiLCJjYW52YXMiLCJjb25zb2xlIiwiZXJyb3IiLCJpZCIsIm1vZGVsVmlld01hdHJpeCIsIm5vcm1hbE1hdHJpeCIsImJlZm9yZVJlbmRlckNhbGxiYWNrcyIsImFmdGVyUmVuZGVyQ2FsbGJhY2tzIiwib25CZWZvcmVSZW5kZXIiLCJmIiwicHVzaCIsIm9uQWZ0ZXJSZW5kZXIiLCJkcmF3IiwiY2FtZXJhIiwidW5pZm9ybXMiLCJtb2RlbE1hdHJpeCIsIk9iamVjdCIsImFzc2lnbiIsInZhbHVlIiwidmlld01hdHJpeCIsInByb2plY3Rpb25NYXRyaXgiLCJjYW1lcmFQb3NpdGlvbiIsIndvcmxkUG9zaXRpb24iLCJtdWx0aXBseSIsIndvcmxkTWF0cml4IiwiZ2V0Tm9ybWFsTWF0cml4IiwiZm9yRWFjaCIsIm1lc2giLCJmbGlwRmFjZXMiLCJjdWxsRmFjZSIsImRldGVybWluYW50IiwidXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/core/Mesh.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/core/Program.js":
/*!**********************************************!*\
  !*** ./node_modules/ogl/src/core/Program.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Program: () => (/* binding */ Program)\n/* harmony export */ });\n// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\nlet ID = 1;\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\nclass Program {\n    constructor(gl, { vertex, fragment, uniforms = {}, transparent = false, cullFace = gl.BACK, frontFace = gl.CCW, depthTest = true, depthWrite = true, depthFunc = gl.LEQUAL } = {}){\n        if (!gl.canvas) console.error(\"gl not passed as first argument to Program\");\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n        if (!vertex) console.warn(\"vertex shader not supplied\");\n        if (!fragment) console.warn(\"fragment shader not supplied\");\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n        this.stencilFunc = {};\n        this.stencilOp = {};\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n        // Create empty shaders and attach to program\n        this.vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        this.fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, this.vertexShader);\n        gl.attachShader(this.program, this.fragmentShader);\n        // Compile shaders with source\n        this.setShaders({\n            vertex,\n            fragment\n        });\n    }\n    setShaders({ vertex, fragment }) {\n        if (vertex) {\n            // compile vertex shader and log errors\n            this.gl.shaderSource(this.vertexShader, vertex);\n            this.gl.compileShader(this.vertexShader);\n            if (this.gl.getShaderInfoLog(this.vertexShader) !== \"\") {\n                console.warn(`${this.gl.getShaderInfoLog(this.vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n            }\n        }\n        if (fragment) {\n            // compile fragment shader and log errors\n            this.gl.shaderSource(this.fragmentShader, fragment);\n            this.gl.compileShader(this.fragmentShader);\n            if (this.gl.getShaderInfoLog(this.fragmentShader) !== \"\") {\n                console.warn(`${this.gl.getShaderInfoLog(this.fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n            }\n        }\n        // compile program and log errors\n        this.gl.linkProgram(this.program);\n        if (!this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS)) {\n            return console.warn(this.gl.getProgramInfoLog(this.program));\n        }\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_UNIFORMS);\n        for(let uIndex = 0; uIndex < numUniforms; uIndex++){\n            let uniform = this.gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, this.gl.getUniformLocation(this.program, uniform.name));\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n            uniform.uniformName = split[0];\n            uniform.nameComponents = split.slice(1);\n        }\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_ATTRIBUTES);\n        for(let aIndex = 0; aIndex < numAttribs; aIndex++){\n            const attribute = this.gl.getActiveAttrib(this.program, aIndex);\n            const location = this.gl.getAttribLocation(this.program, attribute.name);\n            // Ignore special built-in inputs. eg gl_VertexID, gl_InstanceID\n            if (location === -1) continue;\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join(\"\");\n    }\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n    setStencilFunc(func, ref, mask) {\n        this.stencilRef = ref;\n        this.stencilFunc.func = func;\n        this.stencilFunc.ref = ref;\n        this.stencilFunc.mask = mask;\n    }\n    setStencilOp(stencilFail, depthFail, depthPass) {\n        this.stencilOp.stencilFail = stencilFail;\n        this.stencilOp.depthFail = depthFail;\n        this.stencilOp.depthPass = depthPass;\n    }\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src) this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n        if (this.stencilFunc.func || this.stencilOp.stencilFail) this.gl.renderer.enable(this.gl.STENCIL_TEST);\n        else this.gl.renderer.disable(this.gl.STENCIL_TEST);\n        this.gl.renderer.setStencilFunc(this.stencilFunc.func, this.stencilFunc.ref, this.stencilFunc.mask);\n        this.gl.renderer.setStencilOp(this.stencilOp.stencilFail, this.stencilOp.depthFail, this.stencilOp.depthPass);\n    }\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.state.currentProgram === this.id;\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.state.currentProgram = this.id;\n        }\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform)=>{\n            let uniform = this.uniforms[activeUniform.uniformName];\n            for (const component of activeUniform.nameComponents){\n                if (!uniform) break;\n                if (component in uniform) {\n                    uniform = uniform[component];\n                } else if (Array.isArray(uniform.value)) {\n                    break;\n                } else {\n                    uniform = undefined;\n                    break;\n                }\n            }\n            if (!uniform) {\n                return warn(`Active uniform ${activeUniform.name} has not been supplied`);\n            }\n            if (uniform && uniform.value === undefined) {\n                return warn(`${activeUniform.name} uniform is missing a value parameter`);\n            }\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value)=>{\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n    switch(type){\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670:\n        case 5124:\n        case 35678:\n        case 36306:\n        case 35680:\n        case 36289:\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671:\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672:\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673:\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\nfunction addLineNumbers(string) {\n    let lines = string.split(\"\\n\");\n    for(let i = 0; i < lines.length; i++){\n        lines[i] = i + 1 + \": \" + lines[i];\n    }\n    return lines.join(\"\\n\");\n}\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for(let i = 0; i < arrayLen; i++)value.set(a[i], i * valueLen);\n    return value;\n}\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for(let i = 0, l = a.length; i < l; i++){\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\nfunction setArray(a, b) {\n    for(let i = 0, l = a.length; i < l; i++){\n        a[i] = b[i];\n    }\n}\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn(\"More than 100 program warnings - stopping logs.\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/core/Program.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/core/Renderer.js":
/*!***********************************************!*\
  !*** ./node_modules/ogl/src/core/Renderer.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Renderer: () => (/* binding */ Renderer)\n/* harmony export */ });\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Vec3.js */ \"(ssr)/./node_modules/ogl/src/math/Vec3.js\");\n\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\n// Not automatic - devs to use these methods manually\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n// gl.clearColor( r, g, b, a );\n// gl.stencilMask( stencilMask );\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n// gl.clearStencil( stencil );\nconst tempVec3 = /* @__PURE__ */ new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3();\nlet ID = 1;\nclass Renderer {\n    constructor({ canvas = document.createElement(\"canvas\"), width = 300, height = 150, dpr = 1, alpha = false, depth = true, stencil = false, antialias = false, premultipliedAlpha = false, preserveDrawingBuffer = false, powerPreference = \"default\", autoClear = true, webgl = 2 } = {}){\n        const attributes = {\n            alpha,\n            depth,\n            stencil,\n            antialias,\n            premultipliedAlpha,\n            preserveDrawingBuffer,\n            powerPreference\n        };\n        this.dpr = dpr;\n        this.alpha = alpha;\n        this.color = true;\n        this.depth = depth;\n        this.stencil = stencil;\n        this.premultipliedAlpha = premultipliedAlpha;\n        this.autoClear = autoClear;\n        this.id = ID++;\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\n        if (webgl === 2) this.gl = canvas.getContext(\"webgl2\", attributes);\n        this.isWebgl2 = !!this.gl;\n        if (!this.gl) this.gl = canvas.getContext(\"webgl\", attributes);\n        if (!this.gl) console.error(\"unable to create webgl context\");\n        // Attach renderer to gl so that all classes have access to internal state functions\n        this.gl.renderer = this;\n        // initialise size values\n        this.setSize(width, height);\n        // gl state stores to avoid redundant calls on methods used internally\n        this.state = {};\n        this.state.blendFunc = {\n            src: this.gl.ONE,\n            dst: this.gl.ZERO\n        };\n        this.state.blendEquation = {\n            modeRGB: this.gl.FUNC_ADD\n        };\n        this.state.cullFace = false;\n        this.state.frontFace = this.gl.CCW;\n        this.state.depthMask = true;\n        this.state.depthFunc = this.gl.LEQUAL;\n        this.state.premultiplyAlpha = false;\n        this.state.flipY = false;\n        this.state.unpackAlignment = 4;\n        this.state.framebuffer = null;\n        this.state.viewport = {\n            x: 0,\n            y: 0,\n            width: null,\n            height: null\n        };\n        this.state.textureUnits = [];\n        this.state.activeTextureUnit = 0;\n        this.state.boundBuffer = null;\n        this.state.uniformLocations = new Map();\n        this.state.currentProgram = null;\n        // store requested extensions\n        this.extensions = {};\n        // Initialise extra format types\n        if (this.isWebgl2) {\n            this.getExtension(\"EXT_color_buffer_float\");\n            this.getExtension(\"OES_texture_float_linear\");\n        } else {\n            this.getExtension(\"OES_texture_float\");\n            this.getExtension(\"OES_texture_float_linear\");\n            this.getExtension(\"OES_texture_half_float\");\n            this.getExtension(\"OES_texture_half_float_linear\");\n            this.getExtension(\"OES_element_index_uint\");\n            this.getExtension(\"OES_standard_derivatives\");\n            this.getExtension(\"EXT_sRGB\");\n            this.getExtension(\"WEBGL_depth_texture\");\n            this.getExtension(\"WEBGL_draw_buffers\");\n        }\n        this.getExtension(\"WEBGL_compressed_texture_astc\");\n        this.getExtension(\"EXT_texture_compression_bptc\");\n        this.getExtension(\"WEBGL_compressed_texture_s3tc\");\n        this.getExtension(\"WEBGL_compressed_texture_etc1\");\n        this.getExtension(\"WEBGL_compressed_texture_pvrtc\");\n        this.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\");\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\n        this.vertexAttribDivisor = this.getExtension(\"ANGLE_instanced_arrays\", \"vertexAttribDivisor\", \"vertexAttribDivisorANGLE\");\n        this.drawArraysInstanced = this.getExtension(\"ANGLE_instanced_arrays\", \"drawArraysInstanced\", \"drawArraysInstancedANGLE\");\n        this.drawElementsInstanced = this.getExtension(\"ANGLE_instanced_arrays\", \"drawElementsInstanced\", \"drawElementsInstancedANGLE\");\n        this.createVertexArray = this.getExtension(\"OES_vertex_array_object\", \"createVertexArray\", \"createVertexArrayOES\");\n        this.bindVertexArray = this.getExtension(\"OES_vertex_array_object\", \"bindVertexArray\", \"bindVertexArrayOES\");\n        this.deleteVertexArray = this.getExtension(\"OES_vertex_array_object\", \"deleteVertexArray\", \"deleteVertexArrayOES\");\n        this.drawBuffers = this.getExtension(\"WEBGL_draw_buffers\", \"drawBuffers\", \"drawBuffersWEBGL\");\n        // Store device parameters\n        this.parameters = {};\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.parameters.maxAnisotropy = this.getExtension(\"EXT_texture_filter_anisotropic\") ? this.gl.getParameter(this.getExtension(\"EXT_texture_filter_anisotropic\").MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;\n    }\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.gl.canvas.width = width * this.dpr;\n        this.gl.canvas.height = height * this.dpr;\n        if (!this.gl.canvas.style) return;\n        Object.assign(this.gl.canvas.style, {\n            width: width + \"px\",\n            height: height + \"px\"\n        });\n    }\n    setViewport(width, height, x = 0, y = 0) {\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\n        this.state.viewport.width = width;\n        this.state.viewport.height = height;\n        this.state.viewport.x = x;\n        this.state.viewport.y = y;\n        this.gl.viewport(x, y, width, height);\n    }\n    setScissor(width, height, x = 0, y = 0) {\n        this.gl.scissor(x, y, width, height);\n    }\n    enable(id) {\n        if (this.state[id] === true) return;\n        this.gl.enable(id);\n        this.state[id] = true;\n    }\n    disable(id) {\n        if (this.state[id] === false) return;\n        this.gl.disable(id);\n        this.state[id] = false;\n    }\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        if (this.state.blendFunc.src === src && this.state.blendFunc.dst === dst && this.state.blendFunc.srcAlpha === srcAlpha && this.state.blendFunc.dstAlpha === dstAlpha) return;\n        this.state.blendFunc.src = src;\n        this.state.blendFunc.dst = dst;\n        this.state.blendFunc.srcAlpha = srcAlpha;\n        this.state.blendFunc.dstAlpha = dstAlpha;\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n        else this.gl.blendFunc(src, dst);\n    }\n    setBlendEquation(modeRGB, modeAlpha) {\n        modeRGB = modeRGB || this.gl.FUNC_ADD;\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\n        this.state.blendEquation.modeRGB = modeRGB;\n        this.state.blendEquation.modeAlpha = modeAlpha;\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n        else this.gl.blendEquation(modeRGB);\n    }\n    setCullFace(value) {\n        if (this.state.cullFace === value) return;\n        this.state.cullFace = value;\n        this.gl.cullFace(value);\n    }\n    setFrontFace(value) {\n        if (this.state.frontFace === value) return;\n        this.state.frontFace = value;\n        this.gl.frontFace(value);\n    }\n    setDepthMask(value) {\n        if (this.state.depthMask === value) return;\n        this.state.depthMask = value;\n        this.gl.depthMask(value);\n    }\n    setDepthFunc(value) {\n        if (this.state.depthFunc === value) return;\n        this.state.depthFunc = value;\n        this.gl.depthFunc(value);\n    }\n    setStencilMask(value) {\n        if (this.state.stencilMask === value) return;\n        this.state.stencilMask = value;\n        this.gl.stencilMask(value);\n    }\n    setStencilFunc(func, ref, mask) {\n        if (this.state.stencilFunc === func && this.state.stencilRef === ref && this.state.stencilFuncMask === mask) return;\n        this.state.stencilFunc = func || this.gl.ALWAYS;\n        this.state.stencilRef = ref || 0;\n        this.state.stencilFuncMask = mask || 0;\n        this.gl.stencilFunc(func || this.gl.ALWAYS, ref || 0, mask || 0);\n    }\n    setStencilOp(stencilFail, depthFail, depthPass) {\n        if (this.state.stencilFail === stencilFail && this.state.stencilDepthFail === depthFail && this.state.stencilDepthPass === depthPass) return;\n        this.state.stencilFail = stencilFail;\n        this.state.stencilDepthFail = depthFail;\n        this.state.stencilDepthPass = depthPass;\n        this.gl.stencilOp(stencilFail, depthFail, depthPass);\n    }\n    activeTexture(value) {\n        if (this.state.activeTextureUnit === value) return;\n        this.state.activeTextureUnit = value;\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\n    }\n    bindFramebuffer({ target = this.gl.FRAMEBUFFER, buffer = null } = {}) {\n        if (this.state.framebuffer === buffer) return;\n        this.state.framebuffer = buffer;\n        this.gl.bindFramebuffer(target, buffer);\n    }\n    getExtension(extension, webgl2Func, extFunc) {\n        // if webgl2 function supported, return func bound to gl context\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\n        // fetch extension once only\n        if (!this.extensions[extension]) {\n            this.extensions[extension] = this.gl.getExtension(extension);\n        }\n        // return extension if no function requested\n        if (!webgl2Func) return this.extensions[extension];\n        // Return null if extension not supported\n        if (!this.extensions[extension]) return null;\n        // return extension function, bound to extension\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\n    }\n    sortOpaque(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else if (a.zDepth !== b.zDepth) {\n            return a.zDepth - b.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n    sortTransparent(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        }\n        if (a.zDepth !== b.zDepth) {\n            return b.zDepth - a.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n    sortUI(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else {\n            return b.id - a.id;\n        }\n    }\n    getRenderList({ scene, camera, frustumCull, sort }) {\n        let renderList = [];\n        if (camera && frustumCull) camera.updateFrustum();\n        // Get visible\n        scene.traverse((node)=>{\n            if (!node.visible) return true;\n            if (!node.draw) return;\n            if (frustumCull && node.frustumCulled && camera) {\n                if (!camera.frustumIntersectsMesh(node)) return;\n            }\n            renderList.push(node);\n        });\n        if (sort) {\n            const opaque = [];\n            const transparent = []; // depthTest true\n            const ui = []; // depthTest false\n            renderList.forEach((node)=>{\n                // Split into the 3 render groups\n                if (!node.program.transparent) {\n                    opaque.push(node);\n                } else if (node.program.depthTest) {\n                    transparent.push(node);\n                } else {\n                    ui.push(node);\n                }\n                node.zDepth = 0;\n                // Only calculate z-depth if renderOrder unset and depthTest is true\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\n                // update z-depth\n                node.worldMatrix.getTranslation(tempVec3);\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\n                node.zDepth = tempVec3.z;\n            });\n            opaque.sort(this.sortOpaque);\n            transparent.sort(this.sortTransparent);\n            ui.sort(this.sortUI);\n            renderList = opaque.concat(transparent, ui);\n        }\n        return renderList;\n    }\n    render({ scene, camera, target = null, update = true, sort = true, frustumCull = true, clear }) {\n        if (target === null) {\n            // make sure no render target bound so draws to canvas\n            this.bindFramebuffer();\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\n        } else {\n            // bind supplied render target and update viewport\n            this.bindFramebuffer(target);\n            this.setViewport(target.width, target.height);\n        }\n        if (clear || this.autoClear && clear !== false) {\n            // Ensure depth buffer writing is enabled so it can be cleared\n            if (this.depth && (!target || target.depth)) {\n                this.enable(this.gl.DEPTH_TEST);\n                this.setDepthMask(true);\n            }\n            // Same for stencil\n            if (this.stencil || !target || target.stencil) {\n                this.enable(this.gl.STENCIL_TEST);\n                this.setStencilMask(0xff);\n            }\n            this.gl.clear((this.color ? this.gl.COLOR_BUFFER_BIT : 0) | (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) | (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0));\n        }\n        // updates all scene graph matrices\n        if (update) scene.updateMatrixWorld();\n        // Update camera separately, in case not in scene graph\n        if (camera) camera.updateMatrixWorld();\n        // Get render list - entails culling and sorting\n        const renderList = this.getRenderList({\n            scene,\n            camera,\n            frustumCull,\n            sort\n        });\n        renderList.forEach((node)=>{\n            node.draw({\n                camera\n            });\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/core/Renderer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/core/Transform.js":
/*!************************************************!*\
  !*** ./node_modules/ogl/src/core/Transform.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transform: () => (/* binding */ Transform)\n/* harmony export */ });\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Vec3.js */ \"(ssr)/./node_modules/ogl/src/math/Vec3.js\");\n/* harmony import */ var _math_Quat_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/Quat.js */ \"(ssr)/./node_modules/ogl/src/math/Quat.js\");\n/* harmony import */ var _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Mat4.js */ \"(ssr)/./node_modules/ogl/src/math/Mat4.js\");\n/* harmony import */ var _math_Euler_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/Euler.js */ \"(ssr)/./node_modules/ogl/src/math/Euler.js\");\n\n\n\n\nclass Transform {\n    constructor(){\n        this.parent = null;\n        this.children = [];\n        this.visible = true;\n        this.matrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\n        this.worldMatrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\n        this.matrixAutoUpdate = true;\n        this.worldMatrixNeedsUpdate = false;\n        this.position = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3();\n        this.quaternion = new _math_Quat_js__WEBPACK_IMPORTED_MODULE_2__.Quat();\n        this.scale = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3(1);\n        this.rotation = new _math_Euler_js__WEBPACK_IMPORTED_MODULE_3__.Euler();\n        this.up = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3(0, 1, 0);\n        this.rotation._target.onChange = ()=>this.quaternion.fromEuler(this.rotation, true);\n        this.quaternion._target.onChange = ()=>this.rotation.fromQuaternion(this.quaternion, undefined, true);\n    }\n    setParent(parent, notifyParent = true) {\n        if (this.parent && parent !== this.parent) this.parent.removeChild(this, false);\n        this.parent = parent;\n        if (notifyParent && parent) parent.addChild(this, false);\n    }\n    addChild(child, notifyChild = true) {\n        if (!~this.children.indexOf(child)) this.children.push(child);\n        if (notifyChild) child.setParent(this, false);\n    }\n    removeChild(child, notifyChild = true) {\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\n        if (notifyChild) child.setParent(null, false);\n    }\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.worldMatrixNeedsUpdate || force) {\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\n            this.worldMatrixNeedsUpdate = false;\n            force = true;\n        }\n        for(let i = 0, l = this.children.length; i < l; i++){\n            this.children[i].updateMatrixWorld(force);\n        }\n    }\n    updateMatrix() {\n        this.matrix.compose(this.quaternion, this.position, this.scale);\n        this.worldMatrixNeedsUpdate = true;\n    }\n    traverse(callback) {\n        // Return true in callback to stop traversing children\n        if (callback(this)) return;\n        for(let i = 0, l = this.children.length; i < l; i++){\n            this.children[i].traverse(callback);\n        }\n    }\n    decompose() {\n        this.matrix.decompose(this.quaternion._target, this.position, this.scale);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n    lookAt(target, invert = false) {\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\n        else this.matrix.lookAt(target, this.position, this.up);\n        this.matrix.getRotation(this.quaternion._target);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/core/Transform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/extras/Triangle.js":
/*!*************************************************!*\
  !*** ./node_modules/ogl/src/extras/Triangle.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Triangle: () => (/* binding */ Triangle)\n/* harmony export */ });\n/* harmony import */ var _core_Geometry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Geometry.js */ \"(ssr)/./node_modules/ogl/src/core/Geometry.js\");\n\nclass Triangle extends _core_Geometry_js__WEBPACK_IMPORTED_MODULE_0__.Geometry {\n    constructor(gl, { attributes = {} } = {}){\n        Object.assign(attributes, {\n            position: {\n                size: 2,\n                data: new Float32Array([\n                    -1,\n                    -1,\n                    3,\n                    -1,\n                    -1,\n                    3\n                ])\n            },\n            uv: {\n                size: 2,\n                data: new Float32Array([\n                    0,\n                    0,\n                    2,\n                    0,\n                    0,\n                    2\n                ])\n            }\n        });\n        super(gl, attributes);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9leHRyYXMvVHJpYW5nbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0M7QUFFeEMsTUFBTUMsaUJBQWlCRCx1REFBUUE7SUFDbENFLFlBQVlDLEVBQUUsRUFBRSxFQUFFQyxhQUFhLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUU7UUFDdENDLE9BQU9DLE1BQU0sQ0FBQ0YsWUFBWTtZQUN0QkcsVUFBVTtnQkFBRUMsTUFBTTtnQkFBR0MsTUFBTSxJQUFJQyxhQUFhO29CQUFDLENBQUM7b0JBQUcsQ0FBQztvQkFBRztvQkFBRyxDQUFDO29CQUFHLENBQUM7b0JBQUc7aUJBQUU7WUFBRTtZQUNwRUMsSUFBSTtnQkFBRUgsTUFBTTtnQkFBR0MsTUFBTSxJQUFJQyxhQUFhO29CQUFDO29CQUFHO29CQUFHO29CQUFHO29CQUFHO29CQUFHO2lCQUFFO1lBQUU7UUFDOUQ7UUFFQSxLQUFLLENBQUNQLElBQUlDO0lBQ2Q7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFuYS1saXF1aWRpdHktcG9vbC8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2V4dHJhcy9UcmlhbmdsZS5qcz9hOTVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9HZW9tZXRyeS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBUcmlhbmdsZSBleHRlbmRzIEdlb21ldHJ5IHtcbiAgICBjb25zdHJ1Y3RvcihnbCwgeyBhdHRyaWJ1dGVzID0ge30gfSA9IHt9KSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlcywge1xuICAgICAgICAgICAgcG9zaXRpb246IHsgc2l6ZTogMiwgZGF0YTogbmV3IEZsb2F0MzJBcnJheShbLTEsIC0xLCAzLCAtMSwgLTEsIDNdKSB9LFxuICAgICAgICAgICAgdXY6IHsgc2l6ZTogMiwgZGF0YTogbmV3IEZsb2F0MzJBcnJheShbMCwgMCwgMiwgMCwgMCwgMl0pIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN1cGVyKGdsLCBhdHRyaWJ1dGVzKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiR2VvbWV0cnkiLCJUcmlhbmdsZSIsImNvbnN0cnVjdG9yIiwiZ2wiLCJhdHRyaWJ1dGVzIiwiT2JqZWN0IiwiYXNzaWduIiwicG9zaXRpb24iLCJzaXplIiwiZGF0YSIsIkZsb2F0MzJBcnJheSIsInV2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/extras/Triangle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/Color.js":
/*!********************************************!*\
  !*** ./node_modules/ogl/src/math/Color.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Color: () => (/* binding */ Color)\n/* harmony export */ });\n/* harmony import */ var _functions_ColorFunc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/ColorFunc.js */ \"(ssr)/./node_modules/ogl/src/math/functions/ColorFunc.js\");\n\n// Color stored as an array of RGB decimal values (between 0 > 1)\n// Constructor and set method accept following formats:\n// new Color() - Empty (defaults to black)\n// new Color([0.2, 0.4, 1.0]) - Decimal Array (or another Color instance)\n// new Color(0.7, 0.0, 0.1) - Decimal RGB values\n// new Color('#ff0000') - Hex string\n// new Color('#ccc') - Short-hand Hex string\n// new Color(0x4f27e8) - Number\n// new Color('red') - Color name string (short list in ColorFunc.js)\nclass Color extends Array {\n    constructor(color){\n        if (Array.isArray(color)) return super(...color);\n        return super(..._functions_ColorFunc_js__WEBPACK_IMPORTED_MODULE_0__.parseColor(...arguments));\n    }\n    get r() {\n        return this[0];\n    }\n    get g() {\n        return this[1];\n    }\n    get b() {\n        return this[2];\n    }\n    set r(v) {\n        this[0] = v;\n    }\n    set g(v) {\n        this[1] = v;\n    }\n    set b(v) {\n        this[2] = v;\n    }\n    set(color) {\n        if (Array.isArray(color)) return this.copy(color);\n        return this.copy(_functions_ColorFunc_js__WEBPACK_IMPORTED_MODULE_0__.parseColor(...arguments));\n    }\n    copy(v) {\n        this[0] = v[0];\n        this[1] = v[1];\n        this[2] = v[2];\n        return this;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL0NvbG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNEO0FBRXRELGlFQUFpRTtBQUNqRSx1REFBdUQ7QUFDdkQsMENBQTBDO0FBQzFDLHlFQUF5RTtBQUN6RSxnREFBZ0Q7QUFDaEQsb0NBQW9DO0FBQ3BDLDRDQUE0QztBQUM1QywrQkFBK0I7QUFDL0Isb0VBQW9FO0FBRTdELE1BQU1DLGNBQWNDO0lBQ3ZCQyxZQUFZQyxLQUFLLENBQUU7UUFDZixJQUFJRixNQUFNRyxPQUFPLENBQUNELFFBQVEsT0FBTyxLQUFLLElBQUlBO1FBQzFDLE9BQU8sS0FBSyxJQUFJSiwrREFBb0IsSUFBSU87SUFDNUM7SUFFQSxJQUFJQyxJQUFJO1FBQ0osT0FBTyxJQUFJLENBQUMsRUFBRTtJQUNsQjtJQUVBLElBQUlDLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxFQUFFO0lBQ2xCO0lBRUEsSUFBSUMsSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLEVBQUU7SUFDbEI7SUFFQSxJQUFJRixFQUFFRyxDQUFDLEVBQUU7UUFDTCxJQUFJLENBQUMsRUFBRSxHQUFHQTtJQUNkO0lBRUEsSUFBSUYsRUFBRUUsQ0FBQyxFQUFFO1FBQ0wsSUFBSSxDQUFDLEVBQUUsR0FBR0E7SUFDZDtJQUVBLElBQUlELEVBQUVDLENBQUMsRUFBRTtRQUNMLElBQUksQ0FBQyxFQUFFLEdBQUdBO0lBQ2Q7SUFFQUMsSUFBSVIsS0FBSyxFQUFFO1FBQ1AsSUFBSUYsTUFBTUcsT0FBTyxDQUFDRCxRQUFRLE9BQU8sSUFBSSxDQUFDUyxJQUFJLENBQUNUO1FBQzNDLE9BQU8sSUFBSSxDQUFDUyxJQUFJLENBQUNiLCtEQUFvQixJQUFJTztJQUM3QztJQUVBTSxLQUFLRixDQUFDLEVBQUU7UUFDSixJQUFJLENBQUMsRUFBRSxHQUFHQSxDQUFDLENBQUMsRUFBRTtRQUNkLElBQUksQ0FBQyxFQUFFLEdBQUdBLENBQUMsQ0FBQyxFQUFFO1FBQ2QsSUFBSSxDQUFDLEVBQUUsR0FBR0EsQ0FBQyxDQUFDLEVBQUU7UUFDZCxPQUFPLElBQUk7SUFDZjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYW5hLWxpcXVpZGl0eS1wb29sLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9Db2xvci5qcz9hYzNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIENvbG9yRnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9Db2xvckZ1bmMuanMnO1xuXG4vLyBDb2xvciBzdG9yZWQgYXMgYW4gYXJyYXkgb2YgUkdCIGRlY2ltYWwgdmFsdWVzIChiZXR3ZWVuIDAgPiAxKVxuLy8gQ29uc3RydWN0b3IgYW5kIHNldCBtZXRob2QgYWNjZXB0IGZvbGxvd2luZyBmb3JtYXRzOlxuLy8gbmV3IENvbG9yKCkgLSBFbXB0eSAoZGVmYXVsdHMgdG8gYmxhY2spXG4vLyBuZXcgQ29sb3IoWzAuMiwgMC40LCAxLjBdKSAtIERlY2ltYWwgQXJyYXkgKG9yIGFub3RoZXIgQ29sb3IgaW5zdGFuY2UpXG4vLyBuZXcgQ29sb3IoMC43LCAwLjAsIDAuMSkgLSBEZWNpbWFsIFJHQiB2YWx1ZXNcbi8vIG5ldyBDb2xvcignI2ZmMDAwMCcpIC0gSGV4IHN0cmluZ1xuLy8gbmV3IENvbG9yKCcjY2NjJykgLSBTaG9ydC1oYW5kIEhleCBzdHJpbmdcbi8vIG5ldyBDb2xvcigweDRmMjdlOCkgLSBOdW1iZXJcbi8vIG5ldyBDb2xvcigncmVkJykgLSBDb2xvciBuYW1lIHN0cmluZyAoc2hvcnQgbGlzdCBpbiBDb2xvckZ1bmMuanMpXG5cbmV4cG9ydCBjbGFzcyBDb2xvciBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xvcikge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb2xvcikpIHJldHVybiBzdXBlciguLi5jb2xvcik7XG4gICAgICAgIHJldHVybiBzdXBlciguLi5Db2xvckZ1bmMucGFyc2VDb2xvciguLi5hcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICBnZXQgcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMF07XG4gICAgfVxuXG4gICAgZ2V0IGcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzFdO1xuICAgIH1cblxuICAgIGdldCBiKCkge1xuICAgICAgICByZXR1cm4gdGhpc1syXTtcbiAgICB9XG5cbiAgICBzZXQgcih2KSB7XG4gICAgICAgIHRoaXNbMF0gPSB2O1xuICAgIH1cblxuICAgIHNldCBnKHYpIHtcbiAgICAgICAgdGhpc1sxXSA9IHY7XG4gICAgfVxuXG4gICAgc2V0IGIodikge1xuICAgICAgICB0aGlzWzJdID0gdjtcbiAgICB9XG5cbiAgICBzZXQoY29sb3IpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29sb3IpKSByZXR1cm4gdGhpcy5jb3B5KGNvbG9yKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29weShDb2xvckZ1bmMucGFyc2VDb2xvciguLi5hcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICBjb3B5KHYpIHtcbiAgICAgICAgdGhpc1swXSA9IHZbMF07XG4gICAgICAgIHRoaXNbMV0gPSB2WzFdO1xuICAgICAgICB0aGlzWzJdID0gdlsyXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkNvbG9yRnVuYyIsIkNvbG9yIiwiQXJyYXkiLCJjb25zdHJ1Y3RvciIsImNvbG9yIiwiaXNBcnJheSIsInBhcnNlQ29sb3IiLCJhcmd1bWVudHMiLCJyIiwiZyIsImIiLCJ2Iiwic2V0IiwiY29weSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/Color.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/Euler.js":
/*!********************************************!*\
  !*** ./node_modules/ogl/src/math/Euler.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Euler: () => (/* binding */ Euler)\n/* harmony export */ });\n/* harmony import */ var _functions_EulerFunc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functions/EulerFunc.js */ \"(ssr)/./node_modules/ogl/src/math/functions/EulerFunc.js\");\n/* harmony import */ var _Mat4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Mat4.js */ \"(ssr)/./node_modules/ogl/src/math/Mat4.js\");\n\n\nconst tmpMat4 = /* @__PURE__ */ new _Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\nclass Euler extends Array {\n    constructor(x = 0, y = x, z = x, order = \"YXZ\"){\n        super(x, y, z);\n        this.order = order;\n        this.onChange = ()=>{};\n        // Keep reference to proxy target to avoid triggering onChange internally\n        this._target = this;\n        // Return a proxy to trigger onChange when array elements are edited directly\n        const triggerProps = [\n            \"0\",\n            \"1\",\n            \"2\"\n        ];\n        return new Proxy(this, {\n            set (target, property) {\n                const success = Reflect.set(...arguments);\n                if (success && triggerProps.includes(property)) target.onChange();\n                return success;\n            }\n        });\n    }\n    get x() {\n        return this[0];\n    }\n    get y() {\n        return this[1];\n    }\n    get z() {\n        return this[2];\n    }\n    set x(v) {\n        this._target[0] = v;\n        this.onChange();\n    }\n    set y(v) {\n        this._target[1] = v;\n        this.onChange();\n    }\n    set z(v) {\n        this._target[2] = v;\n        this.onChange();\n    }\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        this._target[0] = x;\n        this._target[1] = y;\n        this._target[2] = z;\n        this.onChange();\n        return this;\n    }\n    copy(v) {\n        this._target[0] = v[0];\n        this._target[1] = v[1];\n        this._target[2] = v[2];\n        this.onChange();\n        return this;\n    }\n    reorder(order) {\n        this._target.order = order;\n        this.onChange();\n        return this;\n    }\n    fromRotationMatrix(m, order = this.order) {\n        _functions_EulerFunc_js__WEBPACK_IMPORTED_MODULE_1__.fromRotationMatrix(this._target, m, order);\n        this.onChange();\n        return this;\n    }\n    fromQuaternion(q, order = this.order, isInternal) {\n        tmpMat4.fromQuaternion(q);\n        this._target.fromRotationMatrix(tmpMat4, order);\n        // Avoid infinite recursion\n        if (!isInternal) this.onChange();\n        return this;\n    }\n    fromArray(a, o = 0) {\n        this._target[0] = a[o];\n        this._target[1] = a[o + 1];\n        this._target[2] = a[o + 2];\n        return this;\n    }\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL0V1bGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzRDtBQUNyQjtBQUVqQyxNQUFNRSxVQUFVLGFBQWEsR0FBRyxJQUFJRCwwQ0FBSUE7QUFFakMsTUFBTUUsY0FBY0M7SUFDdkJDLFlBQVlDLElBQUksQ0FBQyxFQUFFQyxJQUFJRCxDQUFDLEVBQUVFLElBQUlGLENBQUMsRUFBRUcsUUFBUSxLQUFLLENBQUU7UUFDNUMsS0FBSyxDQUFDSCxHQUFHQyxHQUFHQztRQUNaLElBQUksQ0FBQ0MsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ0MsUUFBUSxHQUFHLEtBQU87UUFFdkIseUVBQXlFO1FBQ3pFLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUk7UUFFbkIsNkVBQTZFO1FBQzdFLE1BQU1DLGVBQWU7WUFBQztZQUFLO1lBQUs7U0FBSTtRQUNwQyxPQUFPLElBQUlDLE1BQU0sSUFBSSxFQUFFO1lBQ25CQyxLQUFJQyxNQUFNLEVBQUVDLFFBQVE7Z0JBQ2hCLE1BQU1DLFVBQVVDLFFBQVFKLEdBQUcsSUFBSUs7Z0JBQy9CLElBQUlGLFdBQVdMLGFBQWFRLFFBQVEsQ0FBQ0osV0FBV0QsT0FBT0wsUUFBUTtnQkFDL0QsT0FBT087WUFDWDtRQUNKO0lBQ0o7SUFFQSxJQUFJWCxJQUFJO1FBQ0osT0FBTyxJQUFJLENBQUMsRUFBRTtJQUNsQjtJQUVBLElBQUlDLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxFQUFFO0lBQ2xCO0lBRUEsSUFBSUMsSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLEVBQUU7SUFDbEI7SUFFQSxJQUFJRixFQUFFZSxDQUFDLEVBQUU7UUFDTCxJQUFJLENBQUNWLE9BQU8sQ0FBQyxFQUFFLEdBQUdVO1FBQ2xCLElBQUksQ0FBQ1gsUUFBUTtJQUNqQjtJQUVBLElBQUlILEVBQUVjLENBQUMsRUFBRTtRQUNMLElBQUksQ0FBQ1YsT0FBTyxDQUFDLEVBQUUsR0FBR1U7UUFDbEIsSUFBSSxDQUFDWCxRQUFRO0lBQ2pCO0lBRUEsSUFBSUYsRUFBRWEsQ0FBQyxFQUFFO1FBQ0wsSUFBSSxDQUFDVixPQUFPLENBQUMsRUFBRSxHQUFHVTtRQUNsQixJQUFJLENBQUNYLFFBQVE7SUFDakI7SUFFQUksSUFBSVIsQ0FBQyxFQUFFQyxJQUFJRCxDQUFDLEVBQUVFLElBQUlGLENBQUMsRUFBRTtRQUNqQixJQUFJQSxFQUFFZ0IsTUFBTSxFQUFFLE9BQU8sSUFBSSxDQUFDQyxJQUFJLENBQUNqQjtRQUMvQixJQUFJLENBQUNLLE9BQU8sQ0FBQyxFQUFFLEdBQUdMO1FBQ2xCLElBQUksQ0FBQ0ssT0FBTyxDQUFDLEVBQUUsR0FBR0o7UUFDbEIsSUFBSSxDQUFDSSxPQUFPLENBQUMsRUFBRSxHQUFHSDtRQUNsQixJQUFJLENBQUNFLFFBQVE7UUFDYixPQUFPLElBQUk7SUFDZjtJQUVBYSxLQUFLRixDQUFDLEVBQUU7UUFDSixJQUFJLENBQUNWLE9BQU8sQ0FBQyxFQUFFLEdBQUdVLENBQUMsQ0FBQyxFQUFFO1FBQ3RCLElBQUksQ0FBQ1YsT0FBTyxDQUFDLEVBQUUsR0FBR1UsQ0FBQyxDQUFDLEVBQUU7UUFDdEIsSUFBSSxDQUFDVixPQUFPLENBQUMsRUFBRSxHQUFHVSxDQUFDLENBQUMsRUFBRTtRQUN0QixJQUFJLENBQUNYLFFBQVE7UUFDYixPQUFPLElBQUk7SUFDZjtJQUVBYyxRQUFRZixLQUFLLEVBQUU7UUFDWCxJQUFJLENBQUNFLE9BQU8sQ0FBQ0YsS0FBSyxHQUFHQTtRQUNyQixJQUFJLENBQUNDLFFBQVE7UUFDYixPQUFPLElBQUk7SUFDZjtJQUVBZSxtQkFBbUJDLENBQUMsRUFBRWpCLFFBQVEsSUFBSSxDQUFDQSxLQUFLLEVBQUU7UUFDdENULHVFQUE0QixDQUFDLElBQUksQ0FBQ1csT0FBTyxFQUFFZSxHQUFHakI7UUFDOUMsSUFBSSxDQUFDQyxRQUFRO1FBQ2IsT0FBTyxJQUFJO0lBQ2Y7SUFFQWlCLGVBQWVDLENBQUMsRUFBRW5CLFFBQVEsSUFBSSxDQUFDQSxLQUFLLEVBQUVvQixVQUFVLEVBQUU7UUFDOUMzQixRQUFReUIsY0FBYyxDQUFDQztRQUN2QixJQUFJLENBQUNqQixPQUFPLENBQUNjLGtCQUFrQixDQUFDdkIsU0FBU087UUFDekMsMkJBQTJCO1FBQzNCLElBQUksQ0FBQ29CLFlBQVksSUFBSSxDQUFDbkIsUUFBUTtRQUM5QixPQUFPLElBQUk7SUFDZjtJQUVBb0IsVUFBVUMsQ0FBQyxFQUFFQyxJQUFJLENBQUMsRUFBRTtRQUNoQixJQUFJLENBQUNyQixPQUFPLENBQUMsRUFBRSxHQUFHb0IsQ0FBQyxDQUFDQyxFQUFFO1FBQ3RCLElBQUksQ0FBQ3JCLE9BQU8sQ0FBQyxFQUFFLEdBQUdvQixDQUFDLENBQUNDLElBQUksRUFBRTtRQUMxQixJQUFJLENBQUNyQixPQUFPLENBQUMsRUFBRSxHQUFHb0IsQ0FBQyxDQUFDQyxJQUFJLEVBQUU7UUFDMUIsT0FBTyxJQUFJO0lBQ2Y7SUFFQUMsUUFBUUYsSUFBSSxFQUFFLEVBQUVDLElBQUksQ0FBQyxFQUFFO1FBQ25CRCxDQUFDLENBQUNDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRTtRQUNkRCxDQUFDLENBQUNDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFO1FBQ2xCRCxDQUFDLENBQUNDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFO1FBQ2xCLE9BQU9EO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFuYS1saXF1aWRpdHktcG9vbC8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvRXVsZXIuanM/N2NmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBFdWxlckZ1bmMgZnJvbSAnLi9mdW5jdGlvbnMvRXVsZXJGdW5jLmpzJztcbmltcG9ydCB7IE1hdDQgfSBmcm9tICcuL01hdDQuanMnO1xuXG5jb25zdCB0bXBNYXQ0ID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXQ0KCk7XG5cbmV4cG9ydCBjbGFzcyBFdWxlciBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IHgsIHogPSB4LCBvcmRlciA9ICdZWFonKSB7XG4gICAgICAgIHN1cGVyKHgsIHksIHopO1xuICAgICAgICB0aGlzLm9yZGVyID0gb3JkZXI7XG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSAoKSA9PiB7fTtcblxuICAgICAgICAvLyBLZWVwIHJlZmVyZW5jZSB0byBwcm94eSB0YXJnZXQgdG8gYXZvaWQgdHJpZ2dlcmluZyBvbkNoYW5nZSBpbnRlcm5hbGx5XG4gICAgICAgIHRoaXMuX3RhcmdldCA9IHRoaXM7XG5cbiAgICAgICAgLy8gUmV0dXJuIGEgcHJveHkgdG8gdHJpZ2dlciBvbkNoYW5nZSB3aGVuIGFycmF5IGVsZW1lbnRzIGFyZSBlZGl0ZWQgZGlyZWN0bHlcbiAgICAgICAgY29uc3QgdHJpZ2dlclByb3BzID0gWycwJywgJzEnLCAnMiddO1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRoaXMsIHtcbiAgICAgICAgICAgIHNldCh0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IFJlZmxlY3Quc2V0KC4uLmFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MgJiYgdHJpZ2dlclByb3BzLmluY2x1ZGVzKHByb3BlcnR5KSkgdGFyZ2V0Lm9uQ2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXQgeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMF07XG4gICAgfVxuXG4gICAgZ2V0IHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzFdO1xuICAgIH1cblxuICAgIGdldCB6KCkge1xuICAgICAgICByZXR1cm4gdGhpc1syXTtcbiAgICB9XG5cbiAgICBzZXQgeCh2KSB7XG4gICAgICAgIHRoaXMuX3RhcmdldFswXSA9IHY7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBzZXQgeSh2KSB7XG4gICAgICAgIHRoaXMuX3RhcmdldFsxXSA9IHY7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBzZXQgeih2KSB7XG4gICAgICAgIHRoaXMuX3RhcmdldFsyXSA9IHY7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBzZXQoeCwgeSA9IHgsIHogPSB4KSB7XG4gICAgICAgIGlmICh4Lmxlbmd0aCkgcmV0dXJuIHRoaXMuY29weSh4KTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzBdID0geDtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzFdID0geTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzJdID0gejtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb3B5KHYpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzBdID0gdlswXTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzFdID0gdlsxXTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzJdID0gdlsyXTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZW9yZGVyKG9yZGVyKSB7XG4gICAgICAgIHRoaXMuX3RhcmdldC5vcmRlciA9IG9yZGVyO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZyb21Sb3RhdGlvbk1hdHJpeChtLCBvcmRlciA9IHRoaXMub3JkZXIpIHtcbiAgICAgICAgRXVsZXJGdW5jLmZyb21Sb3RhdGlvbk1hdHJpeCh0aGlzLl90YXJnZXQsIG0sIG9yZGVyKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tUXVhdGVybmlvbihxLCBvcmRlciA9IHRoaXMub3JkZXIsIGlzSW50ZXJuYWwpIHtcbiAgICAgICAgdG1wTWF0NC5mcm9tUXVhdGVybmlvbihxKTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0LmZyb21Sb3RhdGlvbk1hdHJpeCh0bXBNYXQ0LCBvcmRlcik7XG4gICAgICAgIC8vIEF2b2lkIGluZmluaXRlIHJlY3Vyc2lvblxuICAgICAgICBpZiAoIWlzSW50ZXJuYWwpIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbUFycmF5KGEsIG8gPSAwKSB7XG4gICAgICAgIHRoaXMuX3RhcmdldFswXSA9IGFbb107XG4gICAgICAgIHRoaXMuX3RhcmdldFsxXSA9IGFbbyArIDFdO1xuICAgICAgICB0aGlzLl90YXJnZXRbMl0gPSBhW28gKyAyXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdG9BcnJheShhID0gW10sIG8gPSAwKSB7XG4gICAgICAgIGFbb10gPSB0aGlzWzBdO1xuICAgICAgICBhW28gKyAxXSA9IHRoaXNbMV07XG4gICAgICAgIGFbbyArIDJdID0gdGhpc1syXTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkV1bGVyRnVuYyIsIk1hdDQiLCJ0bXBNYXQ0IiwiRXVsZXIiLCJBcnJheSIsImNvbnN0cnVjdG9yIiwieCIsInkiLCJ6Iiwib3JkZXIiLCJvbkNoYW5nZSIsIl90YXJnZXQiLCJ0cmlnZ2VyUHJvcHMiLCJQcm94eSIsInNldCIsInRhcmdldCIsInByb3BlcnR5Iiwic3VjY2VzcyIsIlJlZmxlY3QiLCJhcmd1bWVudHMiLCJpbmNsdWRlcyIsInYiLCJsZW5ndGgiLCJjb3B5IiwicmVvcmRlciIsImZyb21Sb3RhdGlvbk1hdHJpeCIsIm0iLCJmcm9tUXVhdGVybmlvbiIsInEiLCJpc0ludGVybmFsIiwiZnJvbUFycmF5IiwiYSIsIm8iLCJ0b0FycmF5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/Euler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/Mat3.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/math/Mat3.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mat3: () => (/* binding */ Mat3)\n/* harmony export */ });\n/* harmony import */ var _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/Mat3Func.js */ \"(ssr)/./node_modules/ogl/src/math/functions/Mat3Func.js\");\n\nclass Mat3 extends Array {\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1){\n        super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n        if (m00.length) return this.copy(m00);\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n    translate(v, m = this) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.translate(this, m, v);\n        return this;\n    }\n    rotate(v, m = this) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.rotate(this, m, v);\n        return this;\n    }\n    scale(v, m = this) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, m, v);\n        return this;\n    }\n    multiply(ma, mb) {\n        if (mb) {\n            _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, ma, mb);\n        } else {\n            _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, this, ma);\n        }\n        return this;\n    }\n    identity() {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.identity(this);\n        return this;\n    }\n    copy(m) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.copy(this, m);\n        return this;\n    }\n    fromMatrix4(m) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.fromMat4(this, m);\n        return this;\n    }\n    fromQuaternion(q) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.fromQuat(this, q);\n        return this;\n    }\n    fromBasis(vec3a, vec3b, vec3c) {\n        this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\n        return this;\n    }\n    inverse(m = this) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.invert(this, m);\n        return this;\n    }\n    getNormalMatrix(m) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.normalFromMat4(this, m);\n        return this;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL01hdDMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0Q7QUFFN0MsTUFBTUMsYUFBYUM7SUFDdEJDLFlBQVlDLE1BQU0sQ0FBQyxFQUFFQyxNQUFNLENBQUMsRUFBRUMsTUFBTSxDQUFDLEVBQUVDLE1BQU0sQ0FBQyxFQUFFQyxNQUFNLENBQUMsRUFBRUMsTUFBTSxDQUFDLEVBQUVDLE1BQU0sQ0FBQyxFQUFFQyxNQUFNLENBQUMsRUFBRUMsTUFBTSxDQUFDLENBQUU7UUFDekYsS0FBSyxDQUFDUixLQUFLQyxLQUFLQyxLQUFLQyxLQUFLQyxLQUFLQyxLQUFLQyxLQUFLQyxLQUFLQztRQUM5QyxPQUFPLElBQUk7SUFDZjtJQUVBQyxJQUFJVCxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFO1FBQzdDLElBQUlSLElBQUlVLE1BQU0sRUFBRSxPQUFPLElBQUksQ0FBQ0MsSUFBSSxDQUFDWDtRQUNqQ0osdURBQVksQ0FBQyxJQUFJLEVBQUVJLEtBQUtDLEtBQUtDLEtBQUtDLEtBQUtDLEtBQUtDLEtBQUtDLEtBQUtDLEtBQUtDO1FBQzNELE9BQU8sSUFBSTtJQUNmO0lBRUFJLFVBQVVDLENBQUMsRUFBRUMsSUFBSSxJQUFJLEVBQUU7UUFDbkJsQiw2REFBa0IsQ0FBQyxJQUFJLEVBQUVrQixHQUFHRDtRQUM1QixPQUFPLElBQUk7SUFDZjtJQUVBRSxPQUFPRixDQUFDLEVBQUVDLElBQUksSUFBSSxFQUFFO1FBQ2hCbEIsMERBQWUsQ0FBQyxJQUFJLEVBQUVrQixHQUFHRDtRQUN6QixPQUFPLElBQUk7SUFDZjtJQUVBRyxNQUFNSCxDQUFDLEVBQUVDLElBQUksSUFBSSxFQUFFO1FBQ2ZsQix5REFBYyxDQUFDLElBQUksRUFBRWtCLEdBQUdEO1FBQ3hCLE9BQU8sSUFBSTtJQUNmO0lBRUFJLFNBQVNDLEVBQUUsRUFBRUMsRUFBRSxFQUFFO1FBQ2IsSUFBSUEsSUFBSTtZQUNKdkIsNERBQWlCLENBQUMsSUFBSSxFQUFFc0IsSUFBSUM7UUFDaEMsT0FBTztZQUNIdkIsNERBQWlCLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRXNCO1FBQ2xDO1FBQ0EsT0FBTyxJQUFJO0lBQ2Y7SUFFQUUsV0FBVztRQUNQeEIsNERBQWlCLENBQUMsSUFBSTtRQUN0QixPQUFPLElBQUk7SUFDZjtJQUVBZSxLQUFLRyxDQUFDLEVBQUU7UUFDSmxCLHdEQUFhLENBQUMsSUFBSSxFQUFFa0I7UUFDcEIsT0FBTyxJQUFJO0lBQ2Y7SUFFQU8sWUFBWVAsQ0FBQyxFQUFFO1FBQ1hsQiw0REFBaUIsQ0FBQyxJQUFJLEVBQUVrQjtRQUN4QixPQUFPLElBQUk7SUFDZjtJQUVBUyxlQUFlQyxDQUFDLEVBQUU7UUFDZDVCLDREQUFpQixDQUFDLElBQUksRUFBRTRCO1FBQ3hCLE9BQU8sSUFBSTtJQUNmO0lBRUFFLFVBQVVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUU7UUFDM0IsSUFBSSxDQUFDcEIsR0FBRyxDQUFDa0IsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUUsRUFBRUMsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUUsRUFBRUMsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUU7UUFDakcsT0FBTyxJQUFJO0lBQ2Y7SUFFQUMsUUFBUWhCLElBQUksSUFBSSxFQUFFO1FBQ2RsQiwwREFBZSxDQUFDLElBQUksRUFBRWtCO1FBQ3RCLE9BQU8sSUFBSTtJQUNmO0lBRUFrQixnQkFBZ0JsQixDQUFDLEVBQUU7UUFDZmxCLGtFQUF1QixDQUFDLElBQUksRUFBRWtCO1FBQzlCLE9BQU8sSUFBSTtJQUNmO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb2xhbmEtbGlxdWlkaXR5LXBvb2wvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL01hdDMuanM/YTgyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBNYXQzRnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9NYXQzRnVuYy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBNYXQzIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKG0wMCA9IDEsIG0wMSA9IDAsIG0wMiA9IDAsIG0xMCA9IDAsIG0xMSA9IDEsIG0xMiA9IDAsIG0yMCA9IDAsIG0yMSA9IDAsIG0yMiA9IDEpIHtcbiAgICAgICAgc3VwZXIobTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNldChtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKSB7XG4gICAgICAgIGlmIChtMDAubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KG0wMCk7XG4gICAgICAgIE1hdDNGdW5jLnNldCh0aGlzLCBtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdHJhbnNsYXRlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDNGdW5jLnRyYW5zbGF0ZSh0aGlzLCBtLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcm90YXRlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDNGdW5jLnJvdGF0ZSh0aGlzLCBtLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2NhbGUodiwgbSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMuc2NhbGUodGhpcywgbSwgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG11bHRpcGx5KG1hLCBtYikge1xuICAgICAgICBpZiAobWIpIHtcbiAgICAgICAgICAgIE1hdDNGdW5jLm11bHRpcGx5KHRoaXMsIG1hLCBtYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBNYXQzRnVuYy5tdWx0aXBseSh0aGlzLCB0aGlzLCBtYSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWRlbnRpdHkoKSB7XG4gICAgICAgIE1hdDNGdW5jLmlkZW50aXR5KHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb3B5KG0pIHtcbiAgICAgICAgTWF0M0Z1bmMuY29weSh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbU1hdHJpeDQobSkge1xuICAgICAgICBNYXQzRnVuYy5mcm9tTWF0NCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVF1YXRlcm5pb24ocSkge1xuICAgICAgICBNYXQzRnVuYy5mcm9tUXVhdCh0aGlzLCBxKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbUJhc2lzKHZlYzNhLCB2ZWMzYiwgdmVjM2MpIHtcbiAgICAgICAgdGhpcy5zZXQodmVjM2FbMF0sIHZlYzNhWzFdLCB2ZWMzYVsyXSwgdmVjM2JbMF0sIHZlYzNiWzFdLCB2ZWMzYlsyXSwgdmVjM2NbMF0sIHZlYzNjWzFdLCB2ZWMzY1syXSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGludmVyc2UobSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMuaW52ZXJ0KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXROb3JtYWxNYXRyaXgobSkge1xuICAgICAgICBNYXQzRnVuYy5ub3JtYWxGcm9tTWF0NCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIk1hdDNGdW5jIiwiTWF0MyIsIkFycmF5IiwiY29uc3RydWN0b3IiLCJtMDAiLCJtMDEiLCJtMDIiLCJtMTAiLCJtMTEiLCJtMTIiLCJtMjAiLCJtMjEiLCJtMjIiLCJzZXQiLCJsZW5ndGgiLCJjb3B5IiwidHJhbnNsYXRlIiwidiIsIm0iLCJyb3RhdGUiLCJzY2FsZSIsIm11bHRpcGx5IiwibWEiLCJtYiIsImlkZW50aXR5IiwiZnJvbU1hdHJpeDQiLCJmcm9tTWF0NCIsImZyb21RdWF0ZXJuaW9uIiwicSIsImZyb21RdWF0IiwiZnJvbUJhc2lzIiwidmVjM2EiLCJ2ZWMzYiIsInZlYzNjIiwiaW52ZXJzZSIsImludmVydCIsImdldE5vcm1hbE1hdHJpeCIsIm5vcm1hbEZyb21NYXQ0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/Mat3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/Mat4.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/math/Mat4.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mat4: () => (/* binding */ Mat4)\n/* harmony export */ });\n/* harmony import */ var _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/Mat4Func.js */ \"(ssr)/./node_modules/ogl/src/math/functions/Mat4Func.js\");\n\nclass Mat4 extends Array {\n    constructor(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m10 = 0, m11 = 1, m12 = 0, m13 = 0, m20 = 0, m21 = 0, m22 = 1, m23 = 0, m30 = 0, m31 = 0, m32 = 0, m33 = 1){\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n    get x() {\n        return this[12];\n    }\n    get y() {\n        return this[13];\n    }\n    get z() {\n        return this[14];\n    }\n    get w() {\n        return this[15];\n    }\n    set x(v) {\n        this[12] = v;\n    }\n    set y(v) {\n        this[13] = v;\n    }\n    set z(v) {\n        this[14] = v;\n    }\n    set w(v) {\n        this[15] = v;\n    }\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n        if (m00.length) return this.copy(m00);\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n    translate(v, m = this) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.translate(this, m, v);\n        return this;\n    }\n    rotate(v, axis, m = this) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.rotate(this, m, v, axis);\n        return this;\n    }\n    scale(v, m = this) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, m, typeof v === \"number\" ? [\n            v,\n            v,\n            v\n        ] : v);\n        return this;\n    }\n    add(ma, mb) {\n        if (mb) _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.add(this, ma, mb);\n        else _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.add(this, this, ma);\n        return this;\n    }\n    sub(ma, mb) {\n        if (mb) _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.subtract(this, ma, mb);\n        else _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.subtract(this, this, ma);\n        return this;\n    }\n    multiply(ma, mb) {\n        if (!ma.length) {\n            _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.multiplyScalar(this, this, ma);\n        } else if (mb) {\n            _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, ma, mb);\n        } else {\n            _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, this, ma);\n        }\n        return this;\n    }\n    identity() {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.identity(this);\n        return this;\n    }\n    copy(m) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.copy(this, m);\n        return this;\n    }\n    fromPerspective({ fov, aspect, near, far } = {}) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.perspective(this, fov, aspect, near, far);\n        return this;\n    }\n    fromOrthogonal({ left, right, bottom, top, near, far }) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.ortho(this, left, right, bottom, top, near, far);\n        return this;\n    }\n    fromQuaternion(q) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.fromQuat(this, q);\n        return this;\n    }\n    setPosition(v) {\n        this.x = v[0];\n        this.y = v[1];\n        this.z = v[2];\n        return this;\n    }\n    inverse(m = this) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.invert(this, m);\n        return this;\n    }\n    compose(q, pos, scale) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.compose(this, q, pos, scale);\n        return this;\n    }\n    decompose(q, pos, scale) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.decompose(this, q, pos, scale);\n        return this;\n    }\n    getRotation(q) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.getRotation(q, this);\n        return this;\n    }\n    getTranslation(pos) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.getTranslation(pos, this);\n        return this;\n    }\n    getScaling(scale) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.getScaling(scale, this);\n        return this;\n    }\n    getMaxScaleOnAxis() {\n        return _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.getMaxScaleOnAxis(this);\n    }\n    lookAt(eye, target, up) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.targetTo(this, eye, target, up);\n        return this;\n    }\n    determinant() {\n        return _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.determinant(this);\n    }\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this[4] = a[o + 4];\n        this[5] = a[o + 5];\n        this[6] = a[o + 6];\n        this[7] = a[o + 7];\n        this[8] = a[o + 8];\n        this[9] = a[o + 9];\n        this[10] = a[o + 10];\n        this[11] = a[o + 11];\n        this[12] = a[o + 12];\n        this[13] = a[o + 13];\n        this[14] = a[o + 14];\n        this[15] = a[o + 15];\n        return this;\n    }\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        a[o + 4] = this[4];\n        a[o + 5] = this[5];\n        a[o + 6] = this[6];\n        a[o + 7] = this[7];\n        a[o + 8] = this[8];\n        a[o + 9] = this[9];\n        a[o + 10] = this[10];\n        a[o + 11] = this[11];\n        a[o + 12] = this[12];\n        a[o + 13] = this[13];\n        a[o + 14] = this[14];\n        a[o + 15] = this[15];\n        return a;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/Mat4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/Quat.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/math/Quat.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Quat: () => (/* binding */ Quat)\n/* harmony export */ });\n/* harmony import */ var _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/QuatFunc.js */ \"(ssr)/./node_modules/ogl/src/math/functions/QuatFunc.js\");\n\nclass Quat extends Array {\n    constructor(x = 0, y = 0, z = 0, w = 1){\n        super(x, y, z, w);\n        this.onChange = ()=>{};\n        // Keep reference to proxy target to avoid triggering onChange internally\n        this._target = this;\n        // Return a proxy to trigger onChange when array elements are edited directly\n        const triggerProps = [\n            \"0\",\n            \"1\",\n            \"2\",\n            \"3\"\n        ];\n        return new Proxy(this, {\n            set (target, property) {\n                const success = Reflect.set(...arguments);\n                if (success && triggerProps.includes(property)) target.onChange();\n                return success;\n            }\n        });\n    }\n    get x() {\n        return this[0];\n    }\n    get y() {\n        return this[1];\n    }\n    get z() {\n        return this[2];\n    }\n    get w() {\n        return this[3];\n    }\n    set x(v) {\n        this._target[0] = v;\n        this.onChange();\n    }\n    set y(v) {\n        this._target[1] = v;\n        this.onChange();\n    }\n    set z(v) {\n        this._target[2] = v;\n        this.onChange();\n    }\n    set w(v) {\n        this._target[3] = v;\n        this.onChange();\n    }\n    identity() {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.identity(this._target);\n        this.onChange();\n        return this;\n    }\n    set(x, y, z, w) {\n        if (x.length) return this.copy(x);\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.set(this._target, x, y, z, w);\n        this.onChange();\n        return this;\n    }\n    rotateX(a) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.rotateX(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n    rotateY(a) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.rotateY(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n    rotateZ(a) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.rotateZ(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n    inverse(q = this._target) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.invert(this._target, q);\n        this.onChange();\n        return this;\n    }\n    conjugate(q = this._target) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.conjugate(this._target, q);\n        this.onChange();\n        return this;\n    }\n    copy(q) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.copy(this._target, q);\n        this.onChange();\n        return this;\n    }\n    normalize(q = this._target) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.normalize(this._target, q);\n        this.onChange();\n        return this;\n    }\n    multiply(qA, qB) {\n        if (qB) {\n            _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this._target, qA, qB);\n        } else {\n            _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this._target, this._target, qA);\n        }\n        this.onChange();\n        return this;\n    }\n    dot(v) {\n        return _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.dot(this._target, v);\n    }\n    fromMatrix3(matrix3) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.fromMat3(this._target, matrix3);\n        this.onChange();\n        return this;\n    }\n    fromEuler(euler, isInternal) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.fromEuler(this._target, euler, euler.order);\n        // Avoid infinite recursion\n        if (!isInternal) this.onChange();\n        return this;\n    }\n    fromAxisAngle(axis, a) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.setAxisAngle(this._target, axis, a);\n        this.onChange();\n        return this;\n    }\n    slerp(q, t) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.slerp(this._target, this._target, q, t);\n        this.onChange();\n        return this;\n    }\n    fromArray(a, o = 0) {\n        this._target[0] = a[o];\n        this._target[1] = a[o + 1];\n        this._target[2] = a[o + 2];\n        this._target[3] = a[o + 3];\n        this.onChange();\n        return this;\n    }\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/Quat.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/Vec3.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/math/Vec3.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Vec3: () => (/* binding */ Vec3)\n/* harmony export */ });\n/* harmony import */ var _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/Vec3Func.js */ \"(ssr)/./node_modules/ogl/src/math/functions/Vec3Func.js\");\n\nclass Vec3 extends Array {\n    constructor(x = 0, y = x, z = x){\n        super(x, y, z);\n        return this;\n    }\n    get x() {\n        return this[0];\n    }\n    get y() {\n        return this[1];\n    }\n    get z() {\n        return this[2];\n    }\n    set x(v) {\n        this[0] = v;\n    }\n    set y(v) {\n        this[1] = v;\n    }\n    set z(v) {\n        this[2] = v;\n    }\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.set(this, x, y, z);\n        return this;\n    }\n    copy(v) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.copy(this, v);\n        return this;\n    }\n    add(va, vb) {\n        if (vb) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.add(this, va, vb);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.add(this, this, va);\n        return this;\n    }\n    sub(va, vb) {\n        if (vb) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.subtract(this, va, vb);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.subtract(this, this, va);\n        return this;\n    }\n    multiply(v) {\n        if (v.length) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, this, v);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, this, v);\n        return this;\n    }\n    divide(v) {\n        if (v.length) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.divide(this, this, v);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, this, 1 / v);\n        return this;\n    }\n    inverse(v = this) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.inverse(this, v);\n        return this;\n    }\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.length(this);\n    }\n    distance(v) {\n        if (v) return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.distance(this, v);\n        else return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.length(this);\n    }\n    squaredLen() {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.squaredLength(this);\n    }\n    squaredDistance(v) {\n        if (v) return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.squaredDistance(this, v);\n        else return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.squaredLength(this);\n    }\n    negate(v = this) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.negate(this, v);\n        return this;\n    }\n    cross(va, vb) {\n        if (vb) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.cross(this, va, vb);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.cross(this, this, va);\n        return this;\n    }\n    scale(v) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, this, v);\n        return this;\n    }\n    normalize() {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.normalize(this, this);\n        return this;\n    }\n    dot(v) {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.dot(this, v);\n    }\n    equals(v) {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.exactEquals(this, v);\n    }\n    applyMatrix3(mat3) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.transformMat3(this, this, mat3);\n        return this;\n    }\n    applyMatrix4(mat4) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.transformMat4(this, this, mat4);\n        return this;\n    }\n    scaleRotateMatrix4(mat4) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.scaleRotateMat4(this, this, mat4);\n        return this;\n    }\n    applyQuaternion(q) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.transformQuat(this, this, q);\n        return this;\n    }\n    angle(v) {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.angle(this, v);\n    }\n    lerp(v, t) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.lerp(this, this, v, t);\n        return this;\n    }\n    smoothLerp(v, decay, dt) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.smoothLerp(this, this, v, decay, dt);\n        return this;\n    }\n    clone() {\n        return new Vec3(this[0], this[1], this[2]);\n    }\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n    transformDirection(mat4) {\n        const x = this[0];\n        const y = this[1];\n        const z = this[2];\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n        return this.normalize();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/Vec3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/functions/ColorFunc.js":
/*!**********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/ColorFunc.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hexToRGB: () => (/* binding */ hexToRGB),\n/* harmony export */   numberToRGB: () => (/* binding */ numberToRGB),\n/* harmony export */   parseColor: () => (/* binding */ parseColor)\n/* harmony export */ });\nconst NAMES = {\n    black: \"#000000\",\n    white: \"#ffffff\",\n    red: \"#ff0000\",\n    green: \"#00ff00\",\n    blue: \"#0000ff\",\n    fuchsia: \"#ff00ff\",\n    cyan: \"#00ffff\",\n    yellow: \"#ffff00\",\n    orange: \"#ff8000\"\n};\nfunction hexToRGB(hex) {\n    if (hex.length === 4) hex = hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];\n    const rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    if (!rgb) console.warn(`Unable to convert hex string ${hex} to rgb values`);\n    return [\n        parseInt(rgb[1], 16) / 255,\n        parseInt(rgb[2], 16) / 255,\n        parseInt(rgb[3], 16) / 255\n    ];\n}\nfunction numberToRGB(num) {\n    num = parseInt(num);\n    return [\n        (num >> 16 & 255) / 255,\n        (num >> 8 & 255) / 255,\n        (num & 255) / 255\n    ];\n}\nfunction parseColor(color) {\n    // Empty\n    if (color === undefined) return [\n        0,\n        0,\n        0\n    ];\n    // Decimal\n    if (arguments.length === 3) return arguments;\n    // Number\n    if (!isNaN(color)) return numberToRGB(color);\n    // Hex\n    if (color[0] === \"#\") return hexToRGB(color);\n    // Names\n    if (NAMES[color.toLowerCase()]) return hexToRGB(NAMES[color.toLowerCase()]);\n    console.warn(\"Color format not recognised\");\n    return [\n        0,\n        0,\n        0\n    ];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL2Z1bmN0aW9ucy9Db2xvckZ1bmMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTUEsUUFBUTtJQUNWQyxPQUFPO0lBQ1BDLE9BQU87SUFDUEMsS0FBSztJQUNMQyxPQUFPO0lBQ1BDLE1BQU07SUFDTkMsU0FBUztJQUNUQyxNQUFNO0lBQ05DLFFBQVE7SUFDUkMsUUFBUTtBQUNaO0FBRU8sU0FBU0MsU0FBU0MsR0FBRztJQUN4QixJQUFJQSxJQUFJQyxNQUFNLEtBQUssR0FBR0QsTUFBTUEsR0FBRyxDQUFDLEVBQUUsR0FBR0EsR0FBRyxDQUFDLEVBQUUsR0FBR0EsR0FBRyxDQUFDLEVBQUUsR0FBR0EsR0FBRyxDQUFDLEVBQUUsR0FBR0EsR0FBRyxDQUFDLEVBQUUsR0FBR0EsR0FBRyxDQUFDLEVBQUUsR0FBR0EsR0FBRyxDQUFDLEVBQUU7SUFDeEYsTUFBTUUsTUFBTSw0Q0FBNENDLElBQUksQ0FBQ0g7SUFDN0QsSUFBSSxDQUFDRSxLQUFLRSxRQUFRQyxJQUFJLENBQUMsQ0FBQyw2QkFBNkIsRUFBRUwsSUFBSSxjQUFjLENBQUM7SUFDMUUsT0FBTztRQUFDTSxTQUFTSixHQUFHLENBQUMsRUFBRSxFQUFFLE1BQU07UUFBS0ksU0FBU0osR0FBRyxDQUFDLEVBQUUsRUFBRSxNQUFNO1FBQUtJLFNBQVNKLEdBQUcsQ0FBQyxFQUFFLEVBQUUsTUFBTTtLQUFJO0FBQy9GO0FBRU8sU0FBU0ssWUFBWUMsR0FBRztJQUMzQkEsTUFBTUYsU0FBU0U7SUFDZixPQUFPO1FBQUUsUUFBUSxLQUFNLEdBQUUsSUFBSztRQUFNLFFBQVEsSUFBSyxHQUFFLElBQUs7UUFBTUEsQ0FBQUEsTUFBTSxHQUFFLElBQUs7S0FBSTtBQUNuRjtBQUVPLFNBQVNDLFdBQVdDLEtBQUs7SUFDNUIsUUFBUTtJQUNSLElBQUlBLFVBQVVDLFdBQVcsT0FBTztRQUFDO1FBQUc7UUFBRztLQUFFO0lBRXpDLFVBQVU7SUFDVixJQUFJQyxVQUFVWCxNQUFNLEtBQUssR0FBRyxPQUFPVztJQUVuQyxTQUFTO0lBQ1QsSUFBSSxDQUFDQyxNQUFNSCxRQUFRLE9BQU9ILFlBQVlHO0lBRXRDLE1BQU07SUFDTixJQUFJQSxLQUFLLENBQUMsRUFBRSxLQUFLLEtBQUssT0FBT1gsU0FBU1c7SUFFdEMsUUFBUTtJQUNSLElBQUlyQixLQUFLLENBQUNxQixNQUFNSSxXQUFXLEdBQUcsRUFBRSxPQUFPZixTQUFTVixLQUFLLENBQUNxQixNQUFNSSxXQUFXLEdBQUc7SUFFMUVWLFFBQVFDLElBQUksQ0FBQztJQUNiLE9BQU87UUFBQztRQUFHO1FBQUc7S0FBRTtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFuYS1saXF1aWRpdHktcG9vbC8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL0NvbG9yRnVuYy5qcz83ZDdjIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE5BTUVTID0ge1xuICAgIGJsYWNrOiAnIzAwMDAwMCcsXG4gICAgd2hpdGU6ICcjZmZmZmZmJyxcbiAgICByZWQ6ICcjZmYwMDAwJyxcbiAgICBncmVlbjogJyMwMGZmMDAnLFxuICAgIGJsdWU6ICcjMDAwMGZmJyxcbiAgICBmdWNoc2lhOiAnI2ZmMDBmZicsXG4gICAgY3lhbjogJyMwMGZmZmYnLFxuICAgIHllbGxvdzogJyNmZmZmMDAnLFxuICAgIG9yYW5nZTogJyNmZjgwMDAnLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGhleFRvUkdCKGhleCkge1xuICAgIGlmIChoZXgubGVuZ3RoID09PSA0KSBoZXggPSBoZXhbMF0gKyBoZXhbMV0gKyBoZXhbMV0gKyBoZXhbMl0gKyBoZXhbMl0gKyBoZXhbM10gKyBoZXhbM107XG4gICAgY29uc3QgcmdiID0gL14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaS5leGVjKGhleCk7XG4gICAgaWYgKCFyZ2IpIGNvbnNvbGUud2FybihgVW5hYmxlIHRvIGNvbnZlcnQgaGV4IHN0cmluZyAke2hleH0gdG8gcmdiIHZhbHVlc2ApO1xuICAgIHJldHVybiBbcGFyc2VJbnQocmdiWzFdLCAxNikgLyAyNTUsIHBhcnNlSW50KHJnYlsyXSwgMTYpIC8gMjU1LCBwYXJzZUludChyZ2JbM10sIDE2KSAvIDI1NV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBudW1iZXJUb1JHQihudW0pIHtcbiAgICBudW0gPSBwYXJzZUludChudW0pO1xuICAgIHJldHVybiBbKChudW0gPj4gMTYpICYgMjU1KSAvIDI1NSwgKChudW0gPj4gOCkgJiAyNTUpIC8gMjU1LCAobnVtICYgMjU1KSAvIDI1NV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNvbG9yKGNvbG9yKSB7XG4gICAgLy8gRW1wdHlcbiAgICBpZiAoY29sb3IgPT09IHVuZGVmaW5lZCkgcmV0dXJuIFswLCAwLCAwXTtcblxuICAgIC8vIERlY2ltYWxcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykgcmV0dXJuIGFyZ3VtZW50cztcblxuICAgIC8vIE51bWJlclxuICAgIGlmICghaXNOYU4oY29sb3IpKSByZXR1cm4gbnVtYmVyVG9SR0IoY29sb3IpO1xuXG4gICAgLy8gSGV4XG4gICAgaWYgKGNvbG9yWzBdID09PSAnIycpIHJldHVybiBoZXhUb1JHQihjb2xvcik7XG5cbiAgICAvLyBOYW1lc1xuICAgIGlmIChOQU1FU1tjb2xvci50b0xvd2VyQ2FzZSgpXSkgcmV0dXJuIGhleFRvUkdCKE5BTUVTW2NvbG9yLnRvTG93ZXJDYXNlKCldKTtcblxuICAgIGNvbnNvbGUud2FybignQ29sb3IgZm9ybWF0IG5vdCByZWNvZ25pc2VkJyk7XG4gICAgcmV0dXJuIFswLCAwLCAwXTtcbn1cbiJdLCJuYW1lcyI6WyJOQU1FUyIsImJsYWNrIiwid2hpdGUiLCJyZWQiLCJncmVlbiIsImJsdWUiLCJmdWNoc2lhIiwiY3lhbiIsInllbGxvdyIsIm9yYW5nZSIsImhleFRvUkdCIiwiaGV4IiwibGVuZ3RoIiwicmdiIiwiZXhlYyIsImNvbnNvbGUiLCJ3YXJuIiwicGFyc2VJbnQiLCJudW1iZXJUb1JHQiIsIm51bSIsInBhcnNlQ29sb3IiLCJjb2xvciIsInVuZGVmaW5lZCIsImFyZ3VtZW50cyIsImlzTmFOIiwidG9Mb3dlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/functions/ColorFunc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/functions/EulerFunc.js":
/*!**********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/EulerFunc.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromRotationMatrix: () => (/* binding */ fromRotationMatrix)\n/* harmony export */ });\n// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nfunction fromRotationMatrix(out, m, order = \"YXZ\") {\n    if (order === \"XYZ\") {\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\n        if (Math.abs(m[8]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[2] = Math.atan2(-m[4], m[0]);\n        } else {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[2] = 0;\n        }\n    } else if (order === \"YXZ\") {\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\n        if (Math.abs(m[9]) < 0.99999) {\n            out[1] = Math.atan2(m[8], m[10]);\n            out[2] = Math.atan2(m[1], m[5]);\n        } else {\n            out[1] = Math.atan2(-m[2], m[0]);\n            out[2] = 0;\n        }\n    } else if (order === \"ZXY\") {\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\n        if (Math.abs(m[6]) < 0.99999) {\n            out[1] = Math.atan2(-m[2], m[10]);\n            out[2] = Math.atan2(-m[4], m[5]);\n        } else {\n            out[1] = 0;\n            out[2] = Math.atan2(m[1], m[0]);\n        }\n    } else if (order === \"ZYX\") {\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\n        if (Math.abs(m[2]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[10]);\n            out[2] = Math.atan2(m[1], m[0]);\n        } else {\n            out[0] = 0;\n            out[2] = Math.atan2(-m[4], m[5]);\n        }\n    } else if (order === \"YZX\") {\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\n        if (Math.abs(m[1]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[5]);\n            out[1] = Math.atan2(-m[2], m[0]);\n        } else {\n            out[0] = 0;\n            out[1] = Math.atan2(m[8], m[10]);\n        }\n    } else if (order === \"XZY\") {\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\n        if (Math.abs(m[4]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[1] = Math.atan2(m[8], m[0]);\n        } else {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[1] = 0;\n        }\n    }\n    return out;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL2Z1bmN0aW9ucy9FdWxlckZ1bmMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHVFQUF1RTtBQUNoRSxTQUFTQSxtQkFBbUJDLEdBQUcsRUFBRUMsQ0FBQyxFQUFFQyxRQUFRLEtBQUs7SUFDcEQsSUFBSUEsVUFBVSxPQUFPO1FBQ2pCRixHQUFHLENBQUMsRUFBRSxHQUFHRyxLQUFLQyxJQUFJLENBQUNELEtBQUtFLEdBQUcsQ0FBQ0YsS0FBS0csR0FBRyxDQUFDTCxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSTtRQUNoRCxJQUFJRSxLQUFLSSxHQUFHLENBQUNOLENBQUMsQ0FBQyxFQUFFLElBQUksU0FBUztZQUMxQkQsR0FBRyxDQUFDLEVBQUUsR0FBR0csS0FBS0ssS0FBSyxDQUFDLENBQUNQLENBQUMsQ0FBQyxFQUFFLEVBQUVBLENBQUMsQ0FBQyxHQUFHO1lBQ2hDRCxHQUFHLENBQUMsRUFBRSxHQUFHRyxLQUFLSyxLQUFLLENBQUMsQ0FBQ1AsQ0FBQyxDQUFDLEVBQUUsRUFBRUEsQ0FBQyxDQUFDLEVBQUU7UUFDbkMsT0FBTztZQUNIRCxHQUFHLENBQUMsRUFBRSxHQUFHRyxLQUFLSyxLQUFLLENBQUNQLENBQUMsQ0FBQyxFQUFFLEVBQUVBLENBQUMsQ0FBQyxFQUFFO1lBQzlCRCxHQUFHLENBQUMsRUFBRSxHQUFHO1FBQ2I7SUFDSixPQUFPLElBQUlFLFVBQVUsT0FBTztRQUN4QkYsR0FBRyxDQUFDLEVBQUUsR0FBR0csS0FBS0MsSUFBSSxDQUFDLENBQUNELEtBQUtFLEdBQUcsQ0FBQ0YsS0FBS0csR0FBRyxDQUFDTCxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSTtRQUNqRCxJQUFJRSxLQUFLSSxHQUFHLENBQUNOLENBQUMsQ0FBQyxFQUFFLElBQUksU0FBUztZQUMxQkQsR0FBRyxDQUFDLEVBQUUsR0FBR0csS0FBS0ssS0FBSyxDQUFDUCxDQUFDLENBQUMsRUFBRSxFQUFFQSxDQUFDLENBQUMsR0FBRztZQUMvQkQsR0FBRyxDQUFDLEVBQUUsR0FBR0csS0FBS0ssS0FBSyxDQUFDUCxDQUFDLENBQUMsRUFBRSxFQUFFQSxDQUFDLENBQUMsRUFBRTtRQUNsQyxPQUFPO1lBQ0hELEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEtBQUtLLEtBQUssQ0FBQyxDQUFDUCxDQUFDLENBQUMsRUFBRSxFQUFFQSxDQUFDLENBQUMsRUFBRTtZQUMvQkQsR0FBRyxDQUFDLEVBQUUsR0FBRztRQUNiO0lBQ0osT0FBTyxJQUFJRSxVQUFVLE9BQU87UUFDeEJGLEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEtBQUtDLElBQUksQ0FBQ0QsS0FBS0UsR0FBRyxDQUFDRixLQUFLRyxHQUFHLENBQUNMLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJO1FBQ2hELElBQUlFLEtBQUtJLEdBQUcsQ0FBQ04sQ0FBQyxDQUFDLEVBQUUsSUFBSSxTQUFTO1lBQzFCRCxHQUFHLENBQUMsRUFBRSxHQUFHRyxLQUFLSyxLQUFLLENBQUMsQ0FBQ1AsQ0FBQyxDQUFDLEVBQUUsRUFBRUEsQ0FBQyxDQUFDLEdBQUc7WUFDaENELEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEtBQUtLLEtBQUssQ0FBQyxDQUFDUCxDQUFDLENBQUMsRUFBRSxFQUFFQSxDQUFDLENBQUMsRUFBRTtRQUNuQyxPQUFPO1lBQ0hELEdBQUcsQ0FBQyxFQUFFLEdBQUc7WUFDVEEsR0FBRyxDQUFDLEVBQUUsR0FBR0csS0FBS0ssS0FBSyxDQUFDUCxDQUFDLENBQUMsRUFBRSxFQUFFQSxDQUFDLENBQUMsRUFBRTtRQUNsQztJQUNKLE9BQU8sSUFBSUMsVUFBVSxPQUFPO1FBQ3hCRixHQUFHLENBQUMsRUFBRSxHQUFHRyxLQUFLQyxJQUFJLENBQUMsQ0FBQ0QsS0FBS0UsR0FBRyxDQUFDRixLQUFLRyxHQUFHLENBQUNMLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJO1FBQ2pELElBQUlFLEtBQUtJLEdBQUcsQ0FBQ04sQ0FBQyxDQUFDLEVBQUUsSUFBSSxTQUFTO1lBQzFCRCxHQUFHLENBQUMsRUFBRSxHQUFHRyxLQUFLSyxLQUFLLENBQUNQLENBQUMsQ0FBQyxFQUFFLEVBQUVBLENBQUMsQ0FBQyxHQUFHO1lBQy9CRCxHQUFHLENBQUMsRUFBRSxHQUFHRyxLQUFLSyxLQUFLLENBQUNQLENBQUMsQ0FBQyxFQUFFLEVBQUVBLENBQUMsQ0FBQyxFQUFFO1FBQ2xDLE9BQU87WUFDSEQsR0FBRyxDQUFDLEVBQUUsR0FBRztZQUNUQSxHQUFHLENBQUMsRUFBRSxHQUFHRyxLQUFLSyxLQUFLLENBQUMsQ0FBQ1AsQ0FBQyxDQUFDLEVBQUUsRUFBRUEsQ0FBQyxDQUFDLEVBQUU7UUFDbkM7SUFDSixPQUFPLElBQUlDLFVBQVUsT0FBTztRQUN4QkYsR0FBRyxDQUFDLEVBQUUsR0FBR0csS0FBS0MsSUFBSSxDQUFDRCxLQUFLRSxHQUFHLENBQUNGLEtBQUtHLEdBQUcsQ0FBQ0wsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUk7UUFDaEQsSUFBSUUsS0FBS0ksR0FBRyxDQUFDTixDQUFDLENBQUMsRUFBRSxJQUFJLFNBQVM7WUFDMUJELEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEtBQUtLLEtBQUssQ0FBQyxDQUFDUCxDQUFDLENBQUMsRUFBRSxFQUFFQSxDQUFDLENBQUMsRUFBRTtZQUMvQkQsR0FBRyxDQUFDLEVBQUUsR0FBR0csS0FBS0ssS0FBSyxDQUFDLENBQUNQLENBQUMsQ0FBQyxFQUFFLEVBQUVBLENBQUMsQ0FBQyxFQUFFO1FBQ25DLE9BQU87WUFDSEQsR0FBRyxDQUFDLEVBQUUsR0FBRztZQUNUQSxHQUFHLENBQUMsRUFBRSxHQUFHRyxLQUFLSyxLQUFLLENBQUNQLENBQUMsQ0FBQyxFQUFFLEVBQUVBLENBQUMsQ0FBQyxHQUFHO1FBQ25DO0lBQ0osT0FBTyxJQUFJQyxVQUFVLE9BQU87UUFDeEJGLEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEtBQUtDLElBQUksQ0FBQyxDQUFDRCxLQUFLRSxHQUFHLENBQUNGLEtBQUtHLEdBQUcsQ0FBQ0wsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUk7UUFDakQsSUFBSUUsS0FBS0ksR0FBRyxDQUFDTixDQUFDLENBQUMsRUFBRSxJQUFJLFNBQVM7WUFDMUJELEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEtBQUtLLEtBQUssQ0FBQ1AsQ0FBQyxDQUFDLEVBQUUsRUFBRUEsQ0FBQyxDQUFDLEVBQUU7WUFDOUJELEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEtBQUtLLEtBQUssQ0FBQ1AsQ0FBQyxDQUFDLEVBQUUsRUFBRUEsQ0FBQyxDQUFDLEVBQUU7UUFDbEMsT0FBTztZQUNIRCxHQUFHLENBQUMsRUFBRSxHQUFHRyxLQUFLSyxLQUFLLENBQUMsQ0FBQ1AsQ0FBQyxDQUFDLEVBQUUsRUFBRUEsQ0FBQyxDQUFDLEdBQUc7WUFDaENELEdBQUcsQ0FBQyxFQUFFLEdBQUc7UUFDYjtJQUNKO0lBRUEsT0FBT0E7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFuYS1saXF1aWRpdHktcG9vbC8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL0V1bGVyRnVuYy5qcz9jYjM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uTWF0cml4KG91dCwgbSwgb3JkZXIgPSAnWVhaJykge1xuICAgIGlmIChvcmRlciA9PT0gJ1hZWicpIHtcbiAgICAgICAgb3V0WzFdID0gTWF0aC5hc2luKE1hdGgubWluKE1hdGgubWF4KG1bOF0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVs4XSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKC1tWzldLCBtWzEwXSk7XG4gICAgICAgICAgICBvdXRbMl0gPSBNYXRoLmF0YW4yKC1tWzRdLCBtWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIobVs2XSwgbVs1XSk7XG4gICAgICAgICAgICBvdXRbMl0gPSAwO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1lYWicpIHtcbiAgICAgICAgb3V0WzBdID0gTWF0aC5hc2luKC1NYXRoLm1pbihNYXRoLm1heChtWzldLCAtMSksIDEpKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKG1bOV0pIDwgMC45OTk5OSkge1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMihtWzhdLCBtWzEwXSk7XG4gICAgICAgICAgICBvdXRbMl0gPSBNYXRoLmF0YW4yKG1bMV0sIG1bNV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMigtbVsyXSwgbVswXSk7XG4gICAgICAgICAgICBvdXRbMl0gPSAwO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1pYWScpIHtcbiAgICAgICAgb3V0WzBdID0gTWF0aC5hc2luKE1hdGgubWluKE1hdGgubWF4KG1bNl0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVs2XSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKC1tWzJdLCBtWzEwXSk7XG4gICAgICAgICAgICBvdXRbMl0gPSBNYXRoLmF0YW4yKC1tWzRdLCBtWzVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dFsxXSA9IDA7XG4gICAgICAgICAgICBvdXRbMl0gPSBNYXRoLmF0YW4yKG1bMV0sIG1bMF0pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1pZWCcpIHtcbiAgICAgICAgb3V0WzFdID0gTWF0aC5hc2luKC1NYXRoLm1pbihNYXRoLm1heChtWzJdLCAtMSksIDEpKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKG1bMl0pIDwgMC45OTk5OSkge1xuICAgICAgICAgICAgb3V0WzBdID0gTWF0aC5hdGFuMihtWzZdLCBtWzEwXSk7XG4gICAgICAgICAgICBvdXRbMl0gPSBNYXRoLmF0YW4yKG1bMV0sIG1bMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzBdID0gMDtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIoLW1bNF0sIG1bNV0pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1laWCcpIHtcbiAgICAgICAgb3V0WzJdID0gTWF0aC5hc2luKE1hdGgubWluKE1hdGgubWF4KG1bMV0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVsxXSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKC1tWzldLCBtWzVdKTtcbiAgICAgICAgICAgIG91dFsxXSA9IE1hdGguYXRhbjIoLW1bMl0sIG1bMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzBdID0gMDtcbiAgICAgICAgICAgIG91dFsxXSA9IE1hdGguYXRhbjIobVs4XSwgbVsxMF0pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1haWScpIHtcbiAgICAgICAgb3V0WzJdID0gTWF0aC5hc2luKC1NYXRoLm1pbihNYXRoLm1heChtWzRdLCAtMSksIDEpKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKG1bNF0pIDwgMC45OTk5OSkge1xuICAgICAgICAgICAgb3V0WzBdID0gTWF0aC5hdGFuMihtWzZdLCBtWzVdKTtcbiAgICAgICAgICAgIG91dFsxXSA9IE1hdGguYXRhbjIobVs4XSwgbVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKC1tWzldLCBtWzEwXSk7XG4gICAgICAgICAgICBvdXRbMV0gPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn1cbiJdLCJuYW1lcyI6WyJmcm9tUm90YXRpb25NYXRyaXgiLCJvdXQiLCJtIiwib3JkZXIiLCJNYXRoIiwiYXNpbiIsIm1pbiIsIm1heCIsImFicyIsImF0YW4yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/functions/EulerFunc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/functions/Mat3Func.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/Mat3Func.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   determinant: () => (/* binding */ determinant),\n/* harmony export */   fromMat4: () => (/* binding */ fromMat4),\n/* harmony export */   fromQuat: () => (/* binding */ fromQuat),\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   multiplyScalar: () => (/* binding */ multiplyScalar),\n/* harmony export */   normalFromMat4: () => (/* binding */ normalFromMat4),\n/* harmony export */   projection: () => (/* binding */ projection),\n/* harmony export */   rotate: () => (/* binding */ rotate),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   subtract: () => (/* binding */ subtract),\n/* harmony export */   translate: () => (/* binding */ translate),\n/* harmony export */   transpose: () => (/* binding */ transpose)\n/* harmony export */ });\nconst EPSILON = 0.000001;\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */ function fromMat4(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */ function fromQuat(out, q) {\n    let x = q[0], y = q[1], z = q[2], w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n    return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */ function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */ function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */ function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n    return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */ function invert(out, a) {\n    let a00 = a[0], a01 = a[1], a02 = a[2];\n    let a10 = a[3], a11 = a[4], a12 = a[5];\n    let a20 = a[6], a21 = a[7], a22 = a[8];\n    let b01 = a22 * a11 - a12 * a21;\n    let b11 = -a22 * a10 + a12 * a20;\n    let b21 = a21 * a10 - a11 * a20;\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */ function determinant(a) {\n    let a00 = a[0], a01 = a[1], a02 = a[2];\n    let a10 = a[3], a11 = a[4], a12 = a[5];\n    let a20 = a[6], a21 = a[7], a22 = a[8];\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */ function multiply(out, a, b) {\n    let a00 = a[0], a01 = a[1], a02 = a[2];\n    let a10 = a[3], a11 = a[4], a12 = a[5];\n    let a20 = a[6], a21 = a[7], a22 = a[8];\n    let b00 = b[0], b01 = b[1], b02 = b[2];\n    let b10 = b[3], b11 = b[4], b12 = b[5];\n    let b20 = b[6], b21 = b[7], b22 = b[8];\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */ function translate(out, a, v) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], x = v[0], y = v[1];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */ function rotate(out, a, rad) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], s = Math.sin(rad), c = Math.cos(rad);\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/ function scale(out, a, v) {\n    let x = v[0], y = v[1];\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */ function normalFromMat4(out, a) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */ function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */ function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/functions/Mat3Func.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/functions/Mat4Func.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/Mat4Func.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   compose: () => (/* binding */ compose),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   decompose: () => (/* binding */ decompose),\n/* harmony export */   determinant: () => (/* binding */ determinant),\n/* harmony export */   fromQuat: () => (/* binding */ fromQuat),\n/* harmony export */   fromRotationTranslationScale: () => (/* binding */ fromRotationTranslationScale),\n/* harmony export */   getMaxScaleOnAxis: () => (/* binding */ getMaxScaleOnAxis),\n/* harmony export */   getRotation: () => (/* binding */ getRotation),\n/* harmony export */   getScaling: () => (/* binding */ getScaling),\n/* harmony export */   getTranslation: () => (/* binding */ getTranslation),\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   multiplyScalar: () => (/* binding */ multiplyScalar),\n/* harmony export */   ortho: () => (/* binding */ ortho),\n/* harmony export */   perspective: () => (/* binding */ perspective),\n/* harmony export */   rotate: () => (/* binding */ rotate),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   subtract: () => (/* binding */ subtract),\n/* harmony export */   targetTo: () => (/* binding */ targetTo),\n/* harmony export */   translate: () => (/* binding */ translate),\n/* harmony export */   transpose: () => (/* binding */ transpose)\n/* harmony export */ });\n/* harmony import */ var _Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec3Func.js */ \"(ssr)/./node_modules/ogl/src/math/functions/Vec3Func.js\");\n\nconst EPSILON = 0.000001;\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */ function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */ function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */ function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1], a02 = a[2], a03 = a[3];\n        let a12 = a[6], a13 = a[7];\n        let a23 = a[11];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n    return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */ function invert(out, a) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n    return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */ function determinant(a) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */ function multiply(out, a, b) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    // Cache only the current line of the second matrix\n    let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */ function translate(out, a, v) {\n    let x = v[0], y = v[1], z = v[2];\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n    return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/ function scale(out, a, v) {\n    let x = v[0], y = v[1], z = v[2];\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */ function rotate(out, a, rad, axis) {\n    let x = axis[0], y = axis[1], z = axis[2];\n    let len = Math.hypot(x, y, z);\n    let s, c, t;\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    let b00, b01, b02;\n    let b10, b11, b12;\n    let b20, b21, b22;\n    if (Math.abs(len) < EPSILON) {\n        return null;\n    }\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */ function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n    return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */ function getScaling(out, mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n    return out;\n}\nfunction getMaxScaleOnAxis(mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\n    return Math.sqrt(Math.max(x, y, z));\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */ const getRotation = function() {\n    const temp = [\n        1,\n        1,\n        1\n    ];\n    return function(out, mat) {\n        let scaling = temp;\n        getScaling(scaling, mat);\n        let is1 = 1 / scaling[0];\n        let is2 = 1 / scaling[1];\n        let is3 = 1 / scaling[2];\n        let sm11 = mat[0] * is1;\n        let sm12 = mat[1] * is2;\n        let sm13 = mat[2] * is3;\n        let sm21 = mat[4] * is1;\n        let sm22 = mat[5] * is2;\n        let sm23 = mat[6] * is3;\n        let sm31 = mat[8] * is1;\n        let sm32 = mat[9] * is2;\n        let sm33 = mat[10] * is3;\n        let trace = sm11 + sm22 + sm33;\n        let S = 0;\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (sm23 - sm32) / S;\n            out[1] = (sm31 - sm13) / S;\n            out[2] = (sm12 - sm21) / S;\n        } else if (sm11 > sm22 && sm11 > sm33) {\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n            out[3] = (sm23 - sm32) / S;\n            out[0] = 0.25 * S;\n            out[1] = (sm12 + sm21) / S;\n            out[2] = (sm31 + sm13) / S;\n        } else if (sm22 > sm33) {\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n            out[3] = (sm31 - sm13) / S;\n            out[0] = (sm12 + sm21) / S;\n            out[1] = 0.25 * S;\n            out[2] = (sm23 + sm32) / S;\n        } else {\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n            out[3] = (sm12 - sm21) / S;\n            out[0] = (sm31 + sm13) / S;\n            out[1] = (sm23 + sm32) / S;\n            out[2] = 0.25 * S;\n        }\n        return out;\n    };\n}();\n/**\n * From glTF-Transform\n * https://github.com/donmccurdy/glTF-Transform/blob/main/packages/core/src/utils/math-utils.ts\n *\n * Decompose a mat4 to TRS properties.\n *\n * Equivalent to the Matrix4 decompose() method in three.js, and intentionally not using the\n * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param {mat4} srcMat Matrix element, to be decomposed to TRS properties.\n * @param {quat4} dstRotation Rotation element, to be overwritten.\n * @param {vec3} dstTranslation Translation element, to be overwritten.\n * @param {vec3} dstScale Scale element, to be overwritten\n */ function decompose(srcMat, dstRotation, dstTranslation, dstScale) {\n    let sx = _Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.length([\n        srcMat[0],\n        srcMat[1],\n        srcMat[2]\n    ]);\n    const sy = _Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.length([\n        srcMat[4],\n        srcMat[5],\n        srcMat[6]\n    ]);\n    const sz = _Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.length([\n        srcMat[8],\n        srcMat[9],\n        srcMat[10]\n    ]);\n    // if determine is negative, we need to invert one scale\n    const det = determinant(srcMat);\n    if (det < 0) sx = -sx;\n    dstTranslation[0] = srcMat[12];\n    dstTranslation[1] = srcMat[13];\n    dstTranslation[2] = srcMat[14];\n    // scale the rotation part\n    const _m1 = srcMat.slice();\n    const invSX = 1 / sx;\n    const invSY = 1 / sy;\n    const invSZ = 1 / sz;\n    _m1[0] *= invSX;\n    _m1[1] *= invSX;\n    _m1[2] *= invSX;\n    _m1[4] *= invSY;\n    _m1[5] *= invSY;\n    _m1[6] *= invSY;\n    _m1[8] *= invSZ;\n    _m1[9] *= invSZ;\n    _m1[10] *= invSZ;\n    getRotation(dstRotation, _m1);\n    dstScale[0] = sx;\n    dstScale[1] = sy;\n    dstScale[2] = sz;\n}\n/**\n * From glTF-Transform\n * https://github.com/donmccurdy/glTF-Transform/blob/main/packages/core/src/utils/math-utils.ts\n *\n * Compose TRS properties to a mat4.\n *\n * Equivalent to the Matrix4 compose() method in three.js, and intentionally not using the\n * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param {mat4} dstMat Matrix element, to be modified and returned.\n * @param {quat4} srcRotation Rotation element of matrix.\n * @param {vec3} srcTranslation Translation element of matrix.\n * @param {vec3} srcScale Scale element of matrix.\n * @returns {mat4} dstMat, overwritten to mat4 equivalent of given TRS properties.\n */ function compose(dstMat, srcRotation, srcTranslation, srcScale) {\n    const te = dstMat;\n    const x = srcRotation[0], y = srcRotation[1], z = srcRotation[2], w = srcRotation[3];\n    const x2 = x + x, y2 = y + y, z2 = z + z;\n    const xx = x * x2, xy = x * y2, xz = x * z2;\n    const yy = y * y2, yz = y * z2, zz = z * z2;\n    const wx = w * x2, wy = w * y2, wz = w * z2;\n    const sx = srcScale[0], sy = srcScale[1], sz = srcScale[2];\n    te[0] = (1 - (yy + zz)) * sx;\n    te[1] = (xy + wz) * sx;\n    te[2] = (xz - wy) * sx;\n    te[3] = 0;\n    te[4] = (xy - wz) * sy;\n    te[5] = (1 - (xx + zz)) * sy;\n    te[6] = (yz + wx) * sy;\n    te[7] = 0;\n    te[8] = (xz + wy) * sz;\n    te[9] = (yz - wx) * sz;\n    te[10] = (1 - (xx + yy)) * sz;\n    te[11] = 0;\n    te[12] = srcTranslation[0];\n    te[13] = srcTranslation[1];\n    te[14] = srcTranslation[2];\n    te[15] = 1;\n    return te;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */ function fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    let x = q[0], y = q[1], z = q[2], w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = s[0];\n    let sy = s[1];\n    let sz = s[2];\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */ function fromQuat(out, q) {\n    let x = q[0], y = q[1], z = q[2], w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */ function perspective(out, fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 2 * far * near * nf;\n    out[15] = 0;\n    return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */ function ortho(out, left, right, bottom, top, near, far) {\n    let lr = 1 / (left - right);\n    let bt = 1 / (bottom - top);\n    let nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} target Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */ function targetTo(out, eye, target, up) {\n    let eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];\n    let z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len === 0) {\n        // eye and target are in the same position\n        z2 = 1;\n    } else {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n    let x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len === 0) {\n        // up and z are parallel\n        if (upz) {\n            upx += 1e-6;\n        } else if (upy) {\n            upz += 1e-6;\n        } else {\n            upy += 1e-6;\n        }\n        x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;\n        len = x0 * x0 + x1 * x1 + x2 * x2;\n    }\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */ function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/functions/Mat4Func.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/functions/QuatFunc.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/QuatFunc.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   conjugate: () => (/* binding */ conjugate),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   dot: () => (/* binding */ dot),\n/* harmony export */   fromEuler: () => (/* binding */ fromEuler),\n/* harmony export */   fromMat3: () => (/* binding */ fromMat3),\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   lerp: () => (/* binding */ lerp),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   rotateX: () => (/* binding */ rotateX),\n/* harmony export */   rotateY: () => (/* binding */ rotateY),\n/* harmony export */   rotateZ: () => (/* binding */ rotateZ),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   setAxisAngle: () => (/* binding */ setAxisAngle),\n/* harmony export */   slerp: () => (/* binding */ slerp)\n/* harmony export */ });\n/* harmony import */ var _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec4Func.js */ \"(ssr)/./node_modules/ogl/src/math/functions/Vec4Func.js\");\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */ function identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/ function setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    let s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */ function multiply(out, a, b) {\n    let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */ function rotateX(out, a, rad) {\n    rad *= 0.5;\n    let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    let bx = Math.sin(rad), bw = Math.cos(rad);\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */ function rotateY(out, a, rad) {\n    rad *= 0.5;\n    let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    let by = Math.sin(rad), bw = Math.cos(rad);\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */ function rotateZ(out, a, rad) {\n    rad *= 0.5;\n    let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    let bz = Math.sin(rad), bw = Math.cos(rad);\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */ function slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n    let omega, cosom, sinom, scale0, scale1;\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */ function invert(out, a) {\n    let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    let invDot = dot ? 1.0 / dot : 0;\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */ function conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */ function fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    let fTrace = m[0] + m[4] + m[8];\n    let fRoot;\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        let j = (i + 1) % 3;\n        let k = (i + 2) % 3;\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n    return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */ function fromEuler(out, euler, order = \"YXZ\") {\n    let sx = Math.sin(euler[0] * 0.5);\n    let cx = Math.cos(euler[0] * 0.5);\n    let sy = Math.sin(euler[1] * 0.5);\n    let cy = Math.cos(euler[1] * 0.5);\n    let sz = Math.sin(euler[2] * 0.5);\n    let cz = Math.cos(euler[2] * 0.5);\n    if (order === \"XYZ\") {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === \"YXZ\") {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === \"ZXY\") {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === \"ZYX\") {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === \"YZX\") {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === \"XZY\") {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    }\n    return out;\n}\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */ const copy = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */ const set = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */ const add = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.add;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */ const scale = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */ const dot = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */ const lerp = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */ const length = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.length;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */ const normalize = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.normalize;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/functions/QuatFunc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/functions/Vec3Func.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/Vec3Func.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   angle: () => (/* binding */ angle),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   cross: () => (/* binding */ cross),\n/* harmony export */   distance: () => (/* binding */ distance),\n/* harmony export */   divide: () => (/* binding */ divide),\n/* harmony export */   dot: () => (/* binding */ dot),\n/* harmony export */   exactEquals: () => (/* binding */ exactEquals),\n/* harmony export */   inverse: () => (/* binding */ inverse),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   lerp: () => (/* binding */ lerp),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   negate: () => (/* binding */ negate),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   scaleRotateMat4: () => (/* binding */ scaleRotateMat4),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   smoothLerp: () => (/* binding */ smoothLerp),\n/* harmony export */   squaredDistance: () => (/* binding */ squaredDistance),\n/* harmony export */   squaredLength: () => (/* binding */ squaredLength),\n/* harmony export */   subtract: () => (/* binding */ subtract),\n/* harmony export */   transformMat3: () => (/* binding */ transformMat3),\n/* harmony export */   transformMat4: () => (/* binding */ transformMat4),\n/* harmony export */   transformQuat: () => (/* binding */ transformQuat)\n/* harmony export */ });\nconst EPSILON = 0.000001;\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */ function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */ function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */ function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */ function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */ function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */ function distance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */ function squaredDistance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */ function squaredLength(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */ function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */ function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */ function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */ function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */ function cross(out, a, b) {\n    let ax = a[0], ay = a[1], az = a[2];\n    let bx = b[0], by = b[1], bz = b[2];\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */ function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n/**\n * Performs a frame rate independant, linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} decay decay constant for interpolation. useful range between 1 and 25, from slow to fast.\n * @param {Number} dt delta time\n * @returns {vec3} out\n */ function smoothLerp(out, a, b, decay, dt) {\n    const exp = Math.exp(-decay * dt);\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = b[0] + (ax - b[0]) * exp;\n    out[1] = b[1] + (ay - b[1]) * exp;\n    out[2] = b[2] + (az - b[2]) * exp;\n    return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */ function transformMat4(out, a, m) {\n    let x = a[0], y = a[1], z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n/**\n * Same as above but doesn't apply translation.\n * Useful for rays.\n */ function scaleRotateMat4(out, a, m) {\n    let x = a[0], y = a[1], z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n    return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */ function transformMat3(out, a, m) {\n    let x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */ function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let x = a[0], y = a[1], z = a[2];\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let uvx = qy * z - qz * y;\n    let uvy = qz * x - qx * z;\n    let uvz = qx * y - qy * x;\n    let uuvx = qy * uvz - qz * uvy;\n    let uuvy = qz * uvx - qx * uvz;\n    let uuvz = qx * uvy - qy * uvx;\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */ const angle = function() {\n    const tempA = [\n        0,\n        0,\n        0\n    ];\n    const tempB = [\n        0,\n        0,\n        0\n    ];\n    return function(a, b) {\n        copy(tempA, a);\n        copy(tempB, b);\n        normalize(tempA, tempA);\n        normalize(tempB, tempB);\n        let cosine = dot(tempA, tempB);\n        if (cosine > 1.0) {\n            return 0;\n        } else if (cosine < -1.0) {\n            return Math.PI;\n        } else {\n            return Math.acos(cosine);\n        }\n    };\n}();\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */ function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/functions/Vec3Func.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ogl/src/math/functions/Vec4Func.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/Vec4Func.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   dot: () => (/* binding */ dot),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   lerp: () => (/* binding */ lerp),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   set: () => (/* binding */ set)\n/* harmony export */ });\nconst EPSILON = 0.000001;\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */ function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */ function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */ function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */ function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */ function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */ function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL2Z1bmN0aW9ucy9WZWM0RnVuYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE1BQU1BLFVBQVU7QUFFaEI7Ozs7OztDQU1DLEdBQ00sU0FBU0MsS0FBS0MsR0FBRyxFQUFFQyxDQUFDO0lBQ3ZCRCxHQUFHLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRTtJQUNiRCxHQUFHLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRTtJQUNiRCxHQUFHLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRTtJQUNiRCxHQUFHLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRTtJQUNiLE9BQU9EO0FBQ1g7QUFFQTs7Ozs7Ozs7O0NBU0MsR0FDTSxTQUFTRSxJQUFJRixHQUFHLEVBQUVHLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUM7SUFDL0JOLEdBQUcsQ0FBQyxFQUFFLEdBQUdHO0lBQ1RILEdBQUcsQ0FBQyxFQUFFLEdBQUdJO0lBQ1RKLEdBQUcsQ0FBQyxFQUFFLEdBQUdLO0lBQ1RMLEdBQUcsQ0FBQyxFQUFFLEdBQUdNO0lBQ1QsT0FBT047QUFDWDtBQUVBOzs7Ozs7O0NBT0MsR0FDTSxTQUFTTyxJQUFJUCxHQUFHLEVBQUVDLENBQUMsRUFBRU8sQ0FBQztJQUN6QlIsR0FBRyxDQUFDLEVBQUUsR0FBR0MsQ0FBQyxDQUFDLEVBQUUsR0FBR08sQ0FBQyxDQUFDLEVBQUU7SUFDcEJSLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLENBQUMsQ0FBQyxFQUFFLEdBQUdPLENBQUMsQ0FBQyxFQUFFO0lBQ3BCUixHQUFHLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRSxHQUFHTyxDQUFDLENBQUMsRUFBRTtJQUNwQlIsR0FBRyxDQUFDLEVBQUUsR0FBR0MsQ0FBQyxDQUFDLEVBQUUsR0FBR08sQ0FBQyxDQUFDLEVBQUU7SUFDcEIsT0FBT1I7QUFDWDtBQUVBOzs7Ozs7O0NBT0MsR0FDTSxTQUFTUyxNQUFNVCxHQUFHLEVBQUVDLENBQUMsRUFBRU8sQ0FBQztJQUMzQlIsR0FBRyxDQUFDLEVBQUUsR0FBR0MsQ0FBQyxDQUFDLEVBQUUsR0FBR087SUFDaEJSLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLENBQUMsQ0FBQyxFQUFFLEdBQUdPO0lBQ2hCUixHQUFHLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRSxHQUFHTztJQUNoQlIsR0FBRyxDQUFDLEVBQUUsR0FBR0MsQ0FBQyxDQUFDLEVBQUUsR0FBR087SUFDaEIsT0FBT1I7QUFDWDtBQUVBOzs7OztDQUtDLEdBQ00sU0FBU1UsT0FBT1QsQ0FBQztJQUNwQixJQUFJRSxJQUFJRixDQUFDLENBQUMsRUFBRTtJQUNaLElBQUlHLElBQUlILENBQUMsQ0FBQyxFQUFFO0lBQ1osSUFBSUksSUFBSUosQ0FBQyxDQUFDLEVBQUU7SUFDWixJQUFJSyxJQUFJTCxDQUFDLENBQUMsRUFBRTtJQUNaLE9BQU9VLEtBQUtDLElBQUksQ0FBQ1QsSUFBSUEsSUFBSUMsSUFBSUEsSUFBSUMsSUFBSUEsSUFBSUMsSUFBSUE7QUFDakQ7QUFFQTs7Ozs7O0NBTUMsR0FDTSxTQUFTTyxVQUFVYixHQUFHLEVBQUVDLENBQUM7SUFDNUIsSUFBSUUsSUFBSUYsQ0FBQyxDQUFDLEVBQUU7SUFDWixJQUFJRyxJQUFJSCxDQUFDLENBQUMsRUFBRTtJQUNaLElBQUlJLElBQUlKLENBQUMsQ0FBQyxFQUFFO0lBQ1osSUFBSUssSUFBSUwsQ0FBQyxDQUFDLEVBQUU7SUFDWixJQUFJYSxNQUFNWCxJQUFJQSxJQUFJQyxJQUFJQSxJQUFJQyxJQUFJQSxJQUFJQyxJQUFJQTtJQUN0QyxJQUFJUSxNQUFNLEdBQUc7UUFDVEEsTUFBTSxJQUFJSCxLQUFLQyxJQUFJLENBQUNFO0lBQ3hCO0lBQ0FkLEdBQUcsQ0FBQyxFQUFFLEdBQUdHLElBQUlXO0lBQ2JkLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLElBQUlVO0lBQ2JkLEdBQUcsQ0FBQyxFQUFFLEdBQUdLLElBQUlTO0lBQ2JkLEdBQUcsQ0FBQyxFQUFFLEdBQUdNLElBQUlRO0lBQ2IsT0FBT2Q7QUFDWDtBQUVBOzs7Ozs7Q0FNQyxHQUNNLFNBQVNlLElBQUlkLENBQUMsRUFBRU8sQ0FBQztJQUNwQixPQUFPUCxDQUFDLENBQUMsRUFBRSxHQUFHTyxDQUFDLENBQUMsRUFBRSxHQUFHUCxDQUFDLENBQUMsRUFBRSxHQUFHTyxDQUFDLENBQUMsRUFBRSxHQUFHUCxDQUFDLENBQUMsRUFBRSxHQUFHTyxDQUFDLENBQUMsRUFBRSxHQUFHUCxDQUFDLENBQUMsRUFBRSxHQUFHTyxDQUFDLENBQUMsRUFBRTtBQUNoRTtBQUVBOzs7Ozs7OztDQVFDLEdBQ00sU0FBU1EsS0FBS2hCLEdBQUcsRUFBRUMsQ0FBQyxFQUFFTyxDQUFDLEVBQUVTLENBQUM7SUFDN0IsSUFBSUMsS0FBS2pCLENBQUMsQ0FBQyxFQUFFO0lBQ2IsSUFBSWtCLEtBQUtsQixDQUFDLENBQUMsRUFBRTtJQUNiLElBQUltQixLQUFLbkIsQ0FBQyxDQUFDLEVBQUU7SUFDYixJQUFJb0IsS0FBS3BCLENBQUMsQ0FBQyxFQUFFO0lBQ2JELEdBQUcsQ0FBQyxFQUFFLEdBQUdrQixLQUFLRCxJQUFLVCxDQUFBQSxDQUFDLENBQUMsRUFBRSxHQUFHVSxFQUFDO0lBQzNCbEIsR0FBRyxDQUFDLEVBQUUsR0FBR21CLEtBQUtGLElBQUtULENBQUFBLENBQUMsQ0FBQyxFQUFFLEdBQUdXLEVBQUM7SUFDM0JuQixHQUFHLENBQUMsRUFBRSxHQUFHb0IsS0FBS0gsSUFBS1QsQ0FBQUEsQ0FBQyxDQUFDLEVBQUUsR0FBR1ksRUFBQztJQUMzQnBCLEdBQUcsQ0FBQyxFQUFFLEdBQUdxQixLQUFLSixJQUFLVCxDQUFBQSxDQUFDLENBQUMsRUFBRSxHQUFHYSxFQUFDO0lBQzNCLE9BQU9yQjtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYW5hLWxpcXVpZGl0eS1wb29sLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvVmVjNEZ1bmMuanM/OGFkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBFUFNJTE9OID0gMC4wMDAwMDE7XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzQgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzQgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSwgeiwgdykge1xuICAgIG91dFswXSA9IHg7XG4gICAgb3V0WzFdID0geTtcbiAgICBvdXRbMl0gPSB6O1xuICAgIG91dFszXSA9IHc7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBBZGRzIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gICAgb3V0WzNdID0gYVszXSArIGJbM107XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTY2FsZXMgYSB2ZWM0IGJ5IGEgc2NhbGFyIG51bWJlclxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIHZlY3RvciB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSB2ZWN0b3IgYnlcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKiBiO1xuICAgIG91dFsxXSA9IGFbMV0gKiBiO1xuICAgIG91dFsyXSA9IGFbMl0gKiBiO1xuICAgIG91dFszXSA9IGFbM10gKiBiO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aChhKSB7XG4gICAgbGV0IHggPSBhWzBdO1xuICAgIGxldCB5ID0gYVsxXTtcbiAgICBsZXQgeiA9IGFbMl07XG4gICAgbGV0IHcgPSBhWzNdO1xuICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHcpO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHZlYzRcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBub3JtYWxpemVcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGEpIHtcbiAgICBsZXQgeCA9IGFbMF07XG4gICAgbGV0IHkgPSBhWzFdO1xuICAgIGxldCB6ID0gYVsyXTtcbiAgICBsZXQgdyA9IGFbM107XG4gICAgbGV0IGxlbiA9IHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xuICAgIGlmIChsZW4gPiAwKSB7XG4gICAgICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICB9XG4gICAgb3V0WzBdID0geCAqIGxlbjtcbiAgICBvdXRbMV0gPSB5ICogbGVuO1xuICAgIG91dFsyXSA9IHogKiBsZW47XG4gICAgb3V0WzNdID0gdyAqIGxlbjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRvdChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXSArIGFbM10gKiBiWzNdO1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjNCdzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgICBsZXQgYXggPSBhWzBdO1xuICAgIGxldCBheSA9IGFbMV07XG4gICAgbGV0IGF6ID0gYVsyXTtcbiAgICBsZXQgYXcgPSBhWzNdO1xuICAgIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xuICAgIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xuICAgIG91dFsyXSA9IGF6ICsgdCAqIChiWzJdIC0gYXopO1xuICAgIG91dFszXSA9IGF3ICsgdCAqIChiWzNdIC0gYXcpO1xuICAgIHJldHVybiBvdXQ7XG59XG4iXSwibmFtZXMiOlsiRVBTSUxPTiIsImNvcHkiLCJvdXQiLCJhIiwic2V0IiwieCIsInkiLCJ6IiwidyIsImFkZCIsImIiLCJzY2FsZSIsImxlbmd0aCIsIk1hdGgiLCJzcXJ0Iiwibm9ybWFsaXplIiwibGVuIiwiZG90IiwibGVycCIsInQiLCJheCIsImF5IiwiYXoiLCJhdyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ogl/src/math/functions/Vec4Func.js\n");

/***/ })

};
;