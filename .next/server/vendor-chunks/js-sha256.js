"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/js-sha256";
exports.ids = ["vendor-chunks/js-sha256"];
exports.modules = {

/***/ "(ssr)/./node_modules/js-sha256/src/sha256.js":
/*!**********************************************!*\
  !*** ./node_modules/js-sha256/src/sha256.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;\n/**\n * [js-sha256]{@link https://github.com/emn178/js-sha256}\n *\n * @version 0.9.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */ /*jslint bitwise: true */ (function() {\n    \"use strict\";\n    var ERROR = \"input is invalid type\";\n    var WINDOW = \"undefined\" === \"object\";\n    var root = WINDOW ? window : {};\n    if (root.JS_SHA256_NO_WINDOW) {\n        WINDOW = false;\n    }\n    var WEB_WORKER = !WINDOW && typeof self === \"object\";\n    var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === \"object\" && process.versions && process.versions.node;\n    if (NODE_JS) {\n        root = global;\n    } else if (WEB_WORKER) {\n        root = self;\n    }\n    var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && \"object\" === \"object\" && module.exports;\n    var AMD =  true && __webpack_require__.amdO;\n    var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== \"undefined\";\n    var HEX_CHARS = \"0123456789abcdef\".split(\"\");\n    var EXTRA = [\n        -2147483648,\n        8388608,\n        32768,\n        128\n    ];\n    var SHIFT = [\n        24,\n        16,\n        8,\n        0\n    ];\n    var K = [\n        0x428a2f98,\n        0x71374491,\n        0xb5c0fbcf,\n        0xe9b5dba5,\n        0x3956c25b,\n        0x59f111f1,\n        0x923f82a4,\n        0xab1c5ed5,\n        0xd807aa98,\n        0x12835b01,\n        0x243185be,\n        0x550c7dc3,\n        0x72be5d74,\n        0x80deb1fe,\n        0x9bdc06a7,\n        0xc19bf174,\n        0xe49b69c1,\n        0xefbe4786,\n        0x0fc19dc6,\n        0x240ca1cc,\n        0x2de92c6f,\n        0x4a7484aa,\n        0x5cb0a9dc,\n        0x76f988da,\n        0x983e5152,\n        0xa831c66d,\n        0xb00327c8,\n        0xbf597fc7,\n        0xc6e00bf3,\n        0xd5a79147,\n        0x06ca6351,\n        0x14292967,\n        0x27b70a85,\n        0x2e1b2138,\n        0x4d2c6dfc,\n        0x53380d13,\n        0x650a7354,\n        0x766a0abb,\n        0x81c2c92e,\n        0x92722c85,\n        0xa2bfe8a1,\n        0xa81a664b,\n        0xc24b8b70,\n        0xc76c51a3,\n        0xd192e819,\n        0xd6990624,\n        0xf40e3585,\n        0x106aa070,\n        0x19a4c116,\n        0x1e376c08,\n        0x2748774c,\n        0x34b0bcb5,\n        0x391c0cb3,\n        0x4ed8aa4a,\n        0x5b9cca4f,\n        0x682e6ff3,\n        0x748f82ee,\n        0x78a5636f,\n        0x84c87814,\n        0x8cc70208,\n        0x90befffa,\n        0xa4506ceb,\n        0xbef9a3f7,\n        0xc67178f2\n    ];\n    var OUTPUT_TYPES = [\n        \"hex\",\n        \"array\",\n        \"digest\",\n        \"arrayBuffer\"\n    ];\n    var blocks = [];\n    if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {\n        Array.isArray = function(obj) {\n            return Object.prototype.toString.call(obj) === \"[object Array]\";\n        };\n    }\n    if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n        ArrayBuffer.isView = function(obj) {\n            return typeof obj === \"object\" && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n        };\n    }\n    var createOutputMethod = function(outputType, is224) {\n        return function(message) {\n            return new Sha256(is224, true).update(message)[outputType]();\n        };\n    };\n    var createMethod = function(is224) {\n        var method = createOutputMethod(\"hex\", is224);\n        if (NODE_JS) {\n            method = nodeWrap(method, is224);\n        }\n        method.create = function() {\n            return new Sha256(is224);\n        };\n        method.update = function(message) {\n            return method.create().update(message);\n        };\n        for(var i = 0; i < OUTPUT_TYPES.length; ++i){\n            var type = OUTPUT_TYPES[i];\n            method[type] = createOutputMethod(type, is224);\n        }\n        return method;\n    };\n    var nodeWrap = function(method, is224) {\n        var crypto = eval(\"require('crypto')\");\n        var Buffer = eval(\"require('buffer').Buffer\");\n        var algorithm = is224 ? \"sha224\" : \"sha256\";\n        var nodeMethod = function(message) {\n            if (typeof message === \"string\") {\n                return crypto.createHash(algorithm).update(message, \"utf8\").digest(\"hex\");\n            } else {\n                if (message === null || message === undefined) {\n                    throw new Error(ERROR);\n                } else if (message.constructor === ArrayBuffer) {\n                    message = new Uint8Array(message);\n                }\n            }\n            if (Array.isArray(message) || ArrayBuffer.isView(message) || message.constructor === Buffer) {\n                return crypto.createHash(algorithm).update(new Buffer(message)).digest(\"hex\");\n            } else {\n                return method(message);\n            }\n        };\n        return nodeMethod;\n    };\n    var createHmacOutputMethod = function(outputType, is224) {\n        return function(key, message) {\n            return new HmacSha256(key, is224, true).update(message)[outputType]();\n        };\n    };\n    var createHmacMethod = function(is224) {\n        var method = createHmacOutputMethod(\"hex\", is224);\n        method.create = function(key) {\n            return new HmacSha256(key, is224);\n        };\n        method.update = function(key, message) {\n            return method.create(key).update(message);\n        };\n        for(var i = 0; i < OUTPUT_TYPES.length; ++i){\n            var type = OUTPUT_TYPES[i];\n            method[type] = createHmacOutputMethod(type, is224);\n        }\n        return method;\n    };\n    function Sha256(is224, sharedMemory) {\n        if (sharedMemory) {\n            blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n            this.blocks = blocks;\n        } else {\n            this.blocks = [\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0\n            ];\n        }\n        if (is224) {\n            this.h0 = 0xc1059ed8;\n            this.h1 = 0x367cd507;\n            this.h2 = 0x3070dd17;\n            this.h3 = 0xf70e5939;\n            this.h4 = 0xffc00b31;\n            this.h5 = 0x68581511;\n            this.h6 = 0x64f98fa7;\n            this.h7 = 0xbefa4fa4;\n        } else {\n            this.h0 = 0x6a09e667;\n            this.h1 = 0xbb67ae85;\n            this.h2 = 0x3c6ef372;\n            this.h3 = 0xa54ff53a;\n            this.h4 = 0x510e527f;\n            this.h5 = 0x9b05688c;\n            this.h6 = 0x1f83d9ab;\n            this.h7 = 0x5be0cd19;\n        }\n        this.block = this.start = this.bytes = this.hBytes = 0;\n        this.finalized = this.hashed = false;\n        this.first = true;\n        this.is224 = is224;\n    }\n    Sha256.prototype.update = function(message) {\n        if (this.finalized) {\n            return;\n        }\n        var notString, type = typeof message;\n        if (type !== \"string\") {\n            if (type === \"object\") {\n                if (message === null) {\n                    throw new Error(ERROR);\n                } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n                    message = new Uint8Array(message);\n                } else if (!Array.isArray(message)) {\n                    if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n                        throw new Error(ERROR);\n                    }\n                }\n            } else {\n                throw new Error(ERROR);\n            }\n            notString = true;\n        }\n        var code, index = 0, i, length = message.length, blocks = this.blocks;\n        while(index < length){\n            if (this.hashed) {\n                this.hashed = false;\n                blocks[0] = this.block;\n                blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n            }\n            if (notString) {\n                for(i = this.start; index < length && i < 64; ++index){\n                    blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n                }\n            } else {\n                for(i = this.start; index < length && i < 64; ++index){\n                    code = message.charCodeAt(index);\n                    if (code < 0x80) {\n                        blocks[i >> 2] |= code << SHIFT[i++ & 3];\n                    } else if (code < 0x800) {\n                        blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                    } else if (code < 0xd800 || code >= 0xe000) {\n                        blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                    } else {\n                        code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n                        blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                    }\n                }\n            }\n            this.lastByteIndex = i;\n            this.bytes += i - this.start;\n            if (i >= 64) {\n                this.block = blocks[16];\n                this.start = i - 64;\n                this.hash();\n                this.hashed = true;\n            } else {\n                this.start = i;\n            }\n        }\n        if (this.bytes > 4294967295) {\n            this.hBytes += this.bytes / 4294967296 << 0;\n            this.bytes = this.bytes % 4294967296;\n        }\n        return this;\n    };\n    Sha256.prototype.finalize = function() {\n        if (this.finalized) {\n            return;\n        }\n        this.finalized = true;\n        var blocks = this.blocks, i = this.lastByteIndex;\n        blocks[16] = this.block;\n        blocks[i >> 2] |= EXTRA[i & 3];\n        this.block = blocks[16];\n        if (i >= 56) {\n            if (!this.hashed) {\n                this.hash();\n            }\n            blocks[0] = this.block;\n            blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n        }\n        blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\n        blocks[15] = this.bytes << 3;\n        this.hash();\n    };\n    Sha256.prototype.hash = function() {\n        var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6, h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;\n        for(j = 16; j < 64; ++j){\n            // rightrotate\n            t1 = blocks[j - 15];\n            s0 = (t1 >>> 7 | t1 << 25) ^ (t1 >>> 18 | t1 << 14) ^ t1 >>> 3;\n            t1 = blocks[j - 2];\n            s1 = (t1 >>> 17 | t1 << 15) ^ (t1 >>> 19 | t1 << 13) ^ t1 >>> 10;\n            blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;\n        }\n        bc = b & c;\n        for(j = 0; j < 64; j += 4){\n            if (this.first) {\n                if (this.is224) {\n                    ab = 300032;\n                    t1 = blocks[0] - 1413257819;\n                    h = t1 - 150054599 << 0;\n                    d = t1 + 24177077 << 0;\n                } else {\n                    ab = 704751109;\n                    t1 = blocks[0] - 210244248;\n                    h = t1 - 1521486534 << 0;\n                    d = t1 + 143694565 << 0;\n                }\n                this.first = false;\n            } else {\n                s0 = (a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10);\n                s1 = (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);\n                ab = a & b;\n                maj = ab ^ a & c ^ bc;\n                ch = e & f ^ ~e & g;\n                t1 = h + s1 + ch + K[j] + blocks[j];\n                t2 = s0 + maj;\n                h = d + t1 << 0;\n                d = t1 + t2 << 0;\n            }\n            s0 = (d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10);\n            s1 = (h >>> 6 | h << 26) ^ (h >>> 11 | h << 21) ^ (h >>> 25 | h << 7);\n            da = d & a;\n            maj = da ^ d & b ^ ab;\n            ch = h & e ^ ~h & f;\n            t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];\n            t2 = s0 + maj;\n            g = c + t1 << 0;\n            c = t1 + t2 << 0;\n            s0 = (c >>> 2 | c << 30) ^ (c >>> 13 | c << 19) ^ (c >>> 22 | c << 10);\n            s1 = (g >>> 6 | g << 26) ^ (g >>> 11 | g << 21) ^ (g >>> 25 | g << 7);\n            cd = c & d;\n            maj = cd ^ c & a ^ da;\n            ch = g & h ^ ~g & e;\n            t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];\n            t2 = s0 + maj;\n            f = b + t1 << 0;\n            b = t1 + t2 << 0;\n            s0 = (b >>> 2 | b << 30) ^ (b >>> 13 | b << 19) ^ (b >>> 22 | b << 10);\n            s1 = (f >>> 6 | f << 26) ^ (f >>> 11 | f << 21) ^ (f >>> 25 | f << 7);\n            bc = b & c;\n            maj = bc ^ b & d ^ cd;\n            ch = f & g ^ ~f & h;\n            t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];\n            t2 = s0 + maj;\n            e = a + t1 << 0;\n            a = t1 + t2 << 0;\n        }\n        this.h0 = this.h0 + a << 0;\n        this.h1 = this.h1 + b << 0;\n        this.h2 = this.h2 + c << 0;\n        this.h3 = this.h3 + d << 0;\n        this.h4 = this.h4 + e << 0;\n        this.h5 = this.h5 + f << 0;\n        this.h6 = this.h6 + g << 0;\n        this.h7 = this.h7 + h << 0;\n    };\n    Sha256.prototype.hex = function() {\n        this.finalize();\n        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;\n        var hex = HEX_CHARS[h0 >> 28 & 0x0F] + HEX_CHARS[h0 >> 24 & 0x0F] + HEX_CHARS[h0 >> 20 & 0x0F] + HEX_CHARS[h0 >> 16 & 0x0F] + HEX_CHARS[h0 >> 12 & 0x0F] + HEX_CHARS[h0 >> 8 & 0x0F] + HEX_CHARS[h0 >> 4 & 0x0F] + HEX_CHARS[h0 & 0x0F] + HEX_CHARS[h1 >> 28 & 0x0F] + HEX_CHARS[h1 >> 24 & 0x0F] + HEX_CHARS[h1 >> 20 & 0x0F] + HEX_CHARS[h1 >> 16 & 0x0F] + HEX_CHARS[h1 >> 12 & 0x0F] + HEX_CHARS[h1 >> 8 & 0x0F] + HEX_CHARS[h1 >> 4 & 0x0F] + HEX_CHARS[h1 & 0x0F] + HEX_CHARS[h2 >> 28 & 0x0F] + HEX_CHARS[h2 >> 24 & 0x0F] + HEX_CHARS[h2 >> 20 & 0x0F] + HEX_CHARS[h2 >> 16 & 0x0F] + HEX_CHARS[h2 >> 12 & 0x0F] + HEX_CHARS[h2 >> 8 & 0x0F] + HEX_CHARS[h2 >> 4 & 0x0F] + HEX_CHARS[h2 & 0x0F] + HEX_CHARS[h3 >> 28 & 0x0F] + HEX_CHARS[h3 >> 24 & 0x0F] + HEX_CHARS[h3 >> 20 & 0x0F] + HEX_CHARS[h3 >> 16 & 0x0F] + HEX_CHARS[h3 >> 12 & 0x0F] + HEX_CHARS[h3 >> 8 & 0x0F] + HEX_CHARS[h3 >> 4 & 0x0F] + HEX_CHARS[h3 & 0x0F] + HEX_CHARS[h4 >> 28 & 0x0F] + HEX_CHARS[h4 >> 24 & 0x0F] + HEX_CHARS[h4 >> 20 & 0x0F] + HEX_CHARS[h4 >> 16 & 0x0F] + HEX_CHARS[h4 >> 12 & 0x0F] + HEX_CHARS[h4 >> 8 & 0x0F] + HEX_CHARS[h4 >> 4 & 0x0F] + HEX_CHARS[h4 & 0x0F] + HEX_CHARS[h5 >> 28 & 0x0F] + HEX_CHARS[h5 >> 24 & 0x0F] + HEX_CHARS[h5 >> 20 & 0x0F] + HEX_CHARS[h5 >> 16 & 0x0F] + HEX_CHARS[h5 >> 12 & 0x0F] + HEX_CHARS[h5 >> 8 & 0x0F] + HEX_CHARS[h5 >> 4 & 0x0F] + HEX_CHARS[h5 & 0x0F] + HEX_CHARS[h6 >> 28 & 0x0F] + HEX_CHARS[h6 >> 24 & 0x0F] + HEX_CHARS[h6 >> 20 & 0x0F] + HEX_CHARS[h6 >> 16 & 0x0F] + HEX_CHARS[h6 >> 12 & 0x0F] + HEX_CHARS[h6 >> 8 & 0x0F] + HEX_CHARS[h6 >> 4 & 0x0F] + HEX_CHARS[h6 & 0x0F];\n        if (!this.is224) {\n            hex += HEX_CHARS[h7 >> 28 & 0x0F] + HEX_CHARS[h7 >> 24 & 0x0F] + HEX_CHARS[h7 >> 20 & 0x0F] + HEX_CHARS[h7 >> 16 & 0x0F] + HEX_CHARS[h7 >> 12 & 0x0F] + HEX_CHARS[h7 >> 8 & 0x0F] + HEX_CHARS[h7 >> 4 & 0x0F] + HEX_CHARS[h7 & 0x0F];\n        }\n        return hex;\n    };\n    Sha256.prototype.toString = Sha256.prototype.hex;\n    Sha256.prototype.digest = function() {\n        this.finalize();\n        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;\n        var arr = [\n            h0 >> 24 & 0xFF,\n            h0 >> 16 & 0xFF,\n            h0 >> 8 & 0xFF,\n            h0 & 0xFF,\n            h1 >> 24 & 0xFF,\n            h1 >> 16 & 0xFF,\n            h1 >> 8 & 0xFF,\n            h1 & 0xFF,\n            h2 >> 24 & 0xFF,\n            h2 >> 16 & 0xFF,\n            h2 >> 8 & 0xFF,\n            h2 & 0xFF,\n            h3 >> 24 & 0xFF,\n            h3 >> 16 & 0xFF,\n            h3 >> 8 & 0xFF,\n            h3 & 0xFF,\n            h4 >> 24 & 0xFF,\n            h4 >> 16 & 0xFF,\n            h4 >> 8 & 0xFF,\n            h4 & 0xFF,\n            h5 >> 24 & 0xFF,\n            h5 >> 16 & 0xFF,\n            h5 >> 8 & 0xFF,\n            h5 & 0xFF,\n            h6 >> 24 & 0xFF,\n            h6 >> 16 & 0xFF,\n            h6 >> 8 & 0xFF,\n            h6 & 0xFF\n        ];\n        if (!this.is224) {\n            arr.push(h7 >> 24 & 0xFF, h7 >> 16 & 0xFF, h7 >> 8 & 0xFF, h7 & 0xFF);\n        }\n        return arr;\n    };\n    Sha256.prototype.array = Sha256.prototype.digest;\n    Sha256.prototype.arrayBuffer = function() {\n        this.finalize();\n        var buffer = new ArrayBuffer(this.is224 ? 28 : 32);\n        var dataView = new DataView(buffer);\n        dataView.setUint32(0, this.h0);\n        dataView.setUint32(4, this.h1);\n        dataView.setUint32(8, this.h2);\n        dataView.setUint32(12, this.h3);\n        dataView.setUint32(16, this.h4);\n        dataView.setUint32(20, this.h5);\n        dataView.setUint32(24, this.h6);\n        if (!this.is224) {\n            dataView.setUint32(28, this.h7);\n        }\n        return buffer;\n    };\n    function HmacSha256(key, is224, sharedMemory) {\n        var i, type = typeof key;\n        if (type === \"string\") {\n            var bytes = [], length = key.length, index = 0, code;\n            for(i = 0; i < length; ++i){\n                code = key.charCodeAt(i);\n                if (code < 0x80) {\n                    bytes[index++] = code;\n                } else if (code < 0x800) {\n                    bytes[index++] = 0xc0 | code >> 6;\n                    bytes[index++] = 0x80 | code & 0x3f;\n                } else if (code < 0xd800 || code >= 0xe000) {\n                    bytes[index++] = 0xe0 | code >> 12;\n                    bytes[index++] = 0x80 | code >> 6 & 0x3f;\n                    bytes[index++] = 0x80 | code & 0x3f;\n                } else {\n                    code = 0x10000 + ((code & 0x3ff) << 10 | key.charCodeAt(++i) & 0x3ff);\n                    bytes[index++] = 0xf0 | code >> 18;\n                    bytes[index++] = 0x80 | code >> 12 & 0x3f;\n                    bytes[index++] = 0x80 | code >> 6 & 0x3f;\n                    bytes[index++] = 0x80 | code & 0x3f;\n                }\n            }\n            key = bytes;\n        } else {\n            if (type === \"object\") {\n                if (key === null) {\n                    throw new Error(ERROR);\n                } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {\n                    key = new Uint8Array(key);\n                } else if (!Array.isArray(key)) {\n                    if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {\n                        throw new Error(ERROR);\n                    }\n                }\n            } else {\n                throw new Error(ERROR);\n            }\n        }\n        if (key.length > 64) {\n            key = new Sha256(is224, true).update(key).array();\n        }\n        var oKeyPad = [], iKeyPad = [];\n        for(i = 0; i < 64; ++i){\n            var b = key[i] || 0;\n            oKeyPad[i] = 0x5c ^ b;\n            iKeyPad[i] = 0x36 ^ b;\n        }\n        Sha256.call(this, is224, sharedMemory);\n        this.update(iKeyPad);\n        this.oKeyPad = oKeyPad;\n        this.inner = true;\n        this.sharedMemory = sharedMemory;\n    }\n    HmacSha256.prototype = new Sha256();\n    HmacSha256.prototype.finalize = function() {\n        Sha256.prototype.finalize.call(this);\n        if (this.inner) {\n            this.inner = false;\n            var innerHash = this.array();\n            Sha256.call(this, this.is224, this.sharedMemory);\n            this.update(this.oKeyPad);\n            this.update(innerHash);\n            Sha256.prototype.finalize.call(this);\n        }\n    };\n    var exports = createMethod();\n    exports.sha256 = exports;\n    exports.sha224 = createMethod(true);\n    exports.sha256.hmac = createHmacMethod();\n    exports.sha224.hmac = createHmacMethod(true);\n    if (COMMON_JS) {\n        module.exports = exports;\n    } else {\n        root.sha256 = exports.sha256;\n        root.sha224 = exports.sha224;\n        if (AMD) {\n            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n                return exports;\n            }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n        }\n    }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-sha256/src/sha256.js\n");

/***/ })

};
;