"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-hotkeys-hook";
exports.ids = ["vendor-chunks/react-hotkeys-hook"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.esm.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.esm.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HotkeysProvider: () => (/* binding */ HotkeysProvider),\n/* harmony export */   isHotkeyPressed: () => (/* binding */ isHotkeyPressed),\n/* harmony export */   useHotkeys: () => (/* binding */ useHotkeys),\n/* harmony export */   useHotkeysContext: () => (/* binding */ useHotkeysContext),\n/* harmony export */   useRecordHotkeys: () => (/* binding */ useRecordHotkeys)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction _extends() {\n    return _extends = Object.assign ? Object.assign.bind() : function(n) {\n        for(var e = 1; e < arguments.length; e++){\n            var t = arguments[e];\n            for(var r in t)({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n        }\n        return n;\n    }, _extends.apply(null, arguments);\n}\nvar reservedModifierKeywords = [\n    \"shift\",\n    \"alt\",\n    \"meta\",\n    \"mod\",\n    \"ctrl\"\n];\nvar mappedKeys = {\n    esc: \"escape\",\n    \"return\": \"enter\",\n    \".\": \"period\",\n    \",\": \"comma\",\n    \"-\": \"slash\",\n    \" \": \"space\",\n    \"`\": \"backquote\",\n    \"#\": \"backslash\",\n    \"+\": \"bracketright\",\n    ShiftLeft: \"shift\",\n    ShiftRight: \"shift\",\n    AltLeft: \"alt\",\n    AltRight: \"alt\",\n    MetaLeft: \"meta\",\n    MetaRight: \"meta\",\n    OSLeft: \"meta\",\n    OSRight: \"meta\",\n    ControlLeft: \"ctrl\",\n    ControlRight: \"ctrl\"\n};\nfunction mapKey(key) {\n    return (key && mappedKeys[key] || key || \"\").trim().toLowerCase().replace(/key|digit|numpad|arrow/, \"\");\n}\nfunction isHotkeyModifier(key) {\n    return reservedModifierKeywords.includes(key);\n}\nfunction parseKeysHookInput(keys, splitKey) {\n    if (splitKey === void 0) {\n        splitKey = \",\";\n    }\n    return keys.split(splitKey);\n}\nfunction parseHotkey(hotkey, combinationKey, description) {\n    if (combinationKey === void 0) {\n        combinationKey = \"+\";\n    }\n    var keys = hotkey.toLocaleLowerCase().split(combinationKey).map(function(k) {\n        return mapKey(k);\n    });\n    var modifiers = {\n        alt: keys.includes(\"alt\"),\n        ctrl: keys.includes(\"ctrl\") || keys.includes(\"control\"),\n        shift: keys.includes(\"shift\"),\n        meta: keys.includes(\"meta\"),\n        mod: keys.includes(\"mod\")\n    };\n    var singleCharKeys = keys.filter(function(k) {\n        return !reservedModifierKeywords.includes(k);\n    });\n    return _extends({}, modifiers, {\n        keys: singleCharKeys,\n        description: description,\n        hotkey: hotkey\n    });\n}\n(function() {\n    if (typeof document !== \"undefined\") {\n        document.addEventListener(\"keydown\", function(e) {\n            if (e.key === undefined) {\n                // Synthetic event (e.g., Chrome autofill).  Ignore.\n                return;\n            }\n            pushToCurrentlyPressedKeys([\n                mapKey(e.key),\n                mapKey(e.code)\n            ]);\n        });\n        document.addEventListener(\"keyup\", function(e) {\n            if (e.key === undefined) {\n                // Synthetic event (e.g., Chrome autofill).  Ignore.\n                return;\n            }\n            removeFromCurrentlyPressedKeys([\n                mapKey(e.key),\n                mapKey(e.code)\n            ]);\n        });\n    }\n    if (false) {}\n})();\nvar currentlyPressedKeys = /*#__PURE__*/ new Set();\n// https://github.com/microsoft/TypeScript/issues/17002\nfunction isReadonlyArray(value) {\n    return Array.isArray(value);\n}\nfunction isHotkeyPressed(key, splitKey) {\n    if (splitKey === void 0) {\n        splitKey = \",\";\n    }\n    var hotkeyArray = isReadonlyArray(key) ? key : key.split(splitKey);\n    return hotkeyArray.every(function(hotkey) {\n        return currentlyPressedKeys.has(hotkey.trim().toLowerCase());\n    });\n}\nfunction pushToCurrentlyPressedKeys(key) {\n    var hotkeyArray = Array.isArray(key) ? key : [\n        key\n    ];\n    /*\r\n  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.\r\n  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser\r\n  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.\r\n   */ if (currentlyPressedKeys.has(\"meta\")) {\n        currentlyPressedKeys.forEach(function(key) {\n            return !isHotkeyModifier(key) && currentlyPressedKeys[\"delete\"](key.toLowerCase());\n        });\n    }\n    hotkeyArray.forEach(function(hotkey) {\n        return currentlyPressedKeys.add(hotkey.toLowerCase());\n    });\n}\nfunction removeFromCurrentlyPressedKeys(key) {\n    var hotkeyArray = Array.isArray(key) ? key : [\n        key\n    ];\n    /*\r\n  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.\r\n  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser\r\n  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.\r\n   */ if (key === \"meta\") {\n        currentlyPressedKeys.clear();\n    } else {\n        hotkeyArray.forEach(function(hotkey) {\n            return currentlyPressedKeys[\"delete\"](hotkey.toLowerCase());\n        });\n    }\n}\nfunction maybePreventDefault(e, hotkey, preventDefault) {\n    if (typeof preventDefault === \"function\" && preventDefault(e, hotkey) || preventDefault === true) {\n        e.preventDefault();\n    }\n}\nfunction isHotkeyEnabled(e, hotkey, enabled) {\n    if (typeof enabled === \"function\") {\n        return enabled(e, hotkey);\n    }\n    return enabled === true || enabled === undefined;\n}\nfunction isKeyboardEventTriggeredByInput(ev) {\n    return isHotkeyEnabledOnTag(ev, [\n        \"input\",\n        \"textarea\",\n        \"select\"\n    ]);\n}\nfunction isHotkeyEnabledOnTag(event, enabledOnTags) {\n    if (enabledOnTags === void 0) {\n        enabledOnTags = false;\n    }\n    var target = event.target, composed = event.composed;\n    var targetTagName = null;\n    if (isCustomElement(target) && composed) {\n        targetTagName = event.composedPath()[0] && event.composedPath()[0].tagName;\n    } else {\n        targetTagName = target && target.tagName;\n    }\n    if (isReadonlyArray(enabledOnTags)) {\n        return Boolean(targetTagName && enabledOnTags && enabledOnTags.some(function(tag) {\n            var _targetTagName;\n            return tag.toLowerCase() === ((_targetTagName = targetTagName) == null ? void 0 : _targetTagName.toLowerCase());\n        }));\n    }\n    return Boolean(targetTagName && enabledOnTags && enabledOnTags);\n}\nfunction isCustomElement(element) {\n    // We just do a basic check w/o any complex RegEx or validation against the list of legacy names containing a hyphen,\n    // as none of them is likely to be an event target, and it won't hurt anyway if we miss.\n    // see: https://html.spec.whatwg.org/multipage/custom-elements.html#prod-potentialcustomelementname\n    return !!element.tagName && !element.tagName.startsWith(\"-\") && element.tagName.includes(\"-\");\n}\nfunction isScopeActive(activeScopes, scopes) {\n    if (activeScopes.length === 0 && scopes) {\n        console.warn('A hotkey has the \"scopes\" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>');\n        return true;\n    }\n    if (!scopes) {\n        return true;\n    }\n    return activeScopes.some(function(scope) {\n        return scopes.includes(scope);\n    }) || activeScopes.includes(\"*\");\n}\nvar isHotkeyMatchingKeyboardEvent = function isHotkeyMatchingKeyboardEvent(e, hotkey, ignoreModifiers) {\n    if (ignoreModifiers === void 0) {\n        ignoreModifiers = false;\n    }\n    var alt = hotkey.alt, meta = hotkey.meta, mod = hotkey.mod, shift = hotkey.shift, ctrl = hotkey.ctrl, keys = hotkey.keys;\n    var pressedKeyUppercase = e.key, code = e.code, ctrlKey = e.ctrlKey, metaKey = e.metaKey, shiftKey = e.shiftKey, altKey = e.altKey;\n    var keyCode = mapKey(code);\n    var pressedKey = pressedKeyUppercase.toLowerCase();\n    if (!(keys != null && keys.includes(keyCode)) && !(keys != null && keys.includes(pressedKey)) && ![\n        \"ctrl\",\n        \"control\",\n        \"unknown\",\n        \"meta\",\n        \"alt\",\n        \"shift\",\n        \"os\"\n    ].includes(keyCode)) {\n        return false;\n    }\n    if (!ignoreModifiers) {\n        // We check the pressed keys for compatibility with the keyup event. In keyup events the modifier flags are not set.\n        if (alt === !altKey && pressedKey !== \"alt\") {\n            return false;\n        }\n        if (shift === !shiftKey && pressedKey !== \"shift\") {\n            return false;\n        }\n        // Mod is a special key name that is checking for meta on macOS and ctrl on other platforms\n        if (mod) {\n            if (!metaKey && !ctrlKey) {\n                return false;\n            }\n        } else {\n            if (meta === !metaKey && pressedKey !== \"meta\" && pressedKey !== \"os\") {\n                return false;\n            }\n            if (ctrl === !ctrlKey && pressedKey !== \"ctrl\" && pressedKey !== \"control\") {\n                return false;\n            }\n        }\n    }\n    // All modifiers are correct, now check the key\n    // If the key is set, we check for the key\n    if (keys && keys.length === 1 && (keys.includes(pressedKey) || keys.includes(keyCode))) {\n        return true;\n    } else if (keys) {\n        // Check if all keys are present in pressedDownKeys set\n        return isHotkeyPressed(keys);\n    } else if (!keys) {\n        // If the key is not set, we only listen for modifiers, that check went alright, so we return true\n        return true;\n    }\n    // There is nothing that matches.\n    return false;\n};\nvar BoundHotkeysProxyProvider = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(undefined);\nvar useBoundHotkeysProxy = function useBoundHotkeysProxy() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(BoundHotkeysProxyProvider);\n};\nfunction BoundHotkeysProxyProviderProvider(_ref) {\n    var addHotkey = _ref.addHotkey, removeHotkey = _ref.removeHotkey, children = _ref.children;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(BoundHotkeysProxyProvider.Provider, {\n        value: {\n            addHotkey: addHotkey,\n            removeHotkey: removeHotkey\n        },\n        children: children\n    });\n}\nfunction deepEqual(x, y) {\n    //@ts-ignore\n    return x && y && typeof x === \"object\" && typeof y === \"object\" ? Object.keys(x).length === Object.keys(y).length && //@ts-ignore\n    Object.keys(x).reduce(function(isEqual, key) {\n        return isEqual && deepEqual(x[key], y[key]);\n    }, true) : x === y;\n}\nvar HotkeysContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    hotkeys: [],\n    enabledScopes: [],\n    toggleScope: function toggleScope() {},\n    enableScope: function enableScope() {},\n    disableScope: function disableScope() {}\n});\nvar useHotkeysContext = function useHotkeysContext() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(HotkeysContext);\n};\nvar HotkeysProvider = function HotkeysProvider(_ref) {\n    var _ref$initiallyActiveS = _ref.initiallyActiveScopes, initiallyActiveScopes = _ref$initiallyActiveS === void 0 ? [\n        \"*\"\n    ] : _ref$initiallyActiveS, children = _ref.children;\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((initiallyActiveScopes == null ? void 0 : initiallyActiveScopes.length) > 0 ? initiallyActiveScopes : [\n        \"*\"\n    ]), internalActiveScopes = _useState[0], setInternalActiveScopes = _useState[1];\n    var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), boundHotkeys = _useState2[0], setBoundHotkeys = _useState2[1];\n    var enableScope = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(scope) {\n        setInternalActiveScopes(function(prev) {\n            if (prev.includes(\"*\")) {\n                return [\n                    scope\n                ];\n            }\n            return Array.from(new Set([].concat(prev, [\n                scope\n            ])));\n        });\n    }, []);\n    var disableScope = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(scope) {\n        setInternalActiveScopes(function(prev) {\n            if (prev.filter(function(s) {\n                return s !== scope;\n            }).length === 0) {\n                return [\n                    \"*\"\n                ];\n            } else {\n                return prev.filter(function(s) {\n                    return s !== scope;\n                });\n            }\n        });\n    }, []);\n    var toggleScope = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(scope) {\n        setInternalActiveScopes(function(prev) {\n            if (prev.includes(scope)) {\n                if (prev.filter(function(s) {\n                    return s !== scope;\n                }).length === 0) {\n                    return [\n                        \"*\"\n                    ];\n                } else {\n                    return prev.filter(function(s) {\n                        return s !== scope;\n                    });\n                }\n            } else {\n                if (prev.includes(\"*\")) {\n                    return [\n                        scope\n                    ];\n                }\n                return Array.from(new Set([].concat(prev, [\n                    scope\n                ])));\n            }\n        });\n    }, []);\n    var addBoundHotkey = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(hotkey) {\n        setBoundHotkeys(function(prev) {\n            return [].concat(prev, [\n                hotkey\n            ]);\n        });\n    }, []);\n    var removeBoundHotkey = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(hotkey) {\n        setBoundHotkeys(function(prev) {\n            return prev.filter(function(h) {\n                return !deepEqual(h, hotkey);\n            });\n        });\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(HotkeysContext.Provider, {\n        value: {\n            enabledScopes: internalActiveScopes,\n            hotkeys: boundHotkeys,\n            enableScope: enableScope,\n            disableScope: disableScope,\n            toggleScope: toggleScope\n        },\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(BoundHotkeysProxyProviderProvider, {\n            addHotkey: addBoundHotkey,\n            removeHotkey: removeBoundHotkey,\n            children: children\n        })\n    });\n};\nfunction useDeepEqualMemo(value) {\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(undefined);\n    if (!deepEqual(ref.current, value)) {\n        ref.current = value;\n    }\n    return ref.current;\n}\nvar stopPropagation = function stopPropagation(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    e.stopImmediatePropagation();\n};\nvar useSafeLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction useHotkeys(keys, callback, options, dependencies) {\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), ref = _useState[0], setRef = _useState[1];\n    var hasTriggeredRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    var _options = !(options instanceof Array) ? options : !(dependencies instanceof Array) ? dependencies : undefined;\n    var _keys = isReadonlyArray(keys) ? keys.join(_options == null ? void 0 : _options.splitKey) : keys;\n    var _deps = options instanceof Array ? options : dependencies instanceof Array ? dependencies : undefined;\n    var memoisedCB = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(callback, _deps != null ? _deps : []);\n    var cbRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(memoisedCB);\n    if (_deps) {\n        cbRef.current = memoisedCB;\n    } else {\n        cbRef.current = callback;\n    }\n    var memoisedOptions = useDeepEqualMemo(_options);\n    var _useHotkeysContext = useHotkeysContext(), enabledScopes = _useHotkeysContext.enabledScopes;\n    var proxy = useBoundHotkeysProxy();\n    useSafeLayoutEffect(function() {\n        if ((memoisedOptions == null ? void 0 : memoisedOptions.enabled) === false || !isScopeActive(enabledScopes, memoisedOptions == null ? void 0 : memoisedOptions.scopes)) {\n            return;\n        }\n        var listener = function listener(e, isKeyUp) {\n            var _e$target;\n            if (isKeyUp === void 0) {\n                isKeyUp = false;\n            }\n            if (isKeyboardEventTriggeredByInput(e) && !isHotkeyEnabledOnTag(e, memoisedOptions == null ? void 0 : memoisedOptions.enableOnFormTags)) {\n                return;\n            }\n            // TODO: SINCE THE EVENT IS NOW ATTACHED TO THE REF, THE ACTIVE ELEMENT CAN NEVER BE INSIDE THE REF. THE HOTKEY ONLY TRIGGERS IF THE\n            // REF IS THE ACTIVE ELEMENT. THIS IS A PROBLEM SINCE FOCUSED SUB COMPONENTS WON'T TRIGGER THE HOTKEY.\n            if (ref !== null) {\n                var rootNode = ref.getRootNode();\n                if ((rootNode instanceof Document || rootNode instanceof ShadowRoot) && rootNode.activeElement !== ref && !ref.contains(rootNode.activeElement)) {\n                    stopPropagation(e);\n                    return;\n                }\n            }\n            if ((_e$target = e.target) != null && _e$target.isContentEditable && !(memoisedOptions != null && memoisedOptions.enableOnContentEditable)) {\n                return;\n            }\n            parseKeysHookInput(_keys, memoisedOptions == null ? void 0 : memoisedOptions.splitKey).forEach(function(key) {\n                var _hotkey$keys;\n                var hotkey = parseHotkey(key, memoisedOptions == null ? void 0 : memoisedOptions.combinationKey);\n                if (isHotkeyMatchingKeyboardEvent(e, hotkey, memoisedOptions == null ? void 0 : memoisedOptions.ignoreModifiers) || (_hotkey$keys = hotkey.keys) != null && _hotkey$keys.includes(\"*\")) {\n                    if (memoisedOptions != null && memoisedOptions.ignoreEventWhen != null && memoisedOptions.ignoreEventWhen(e)) {\n                        return;\n                    }\n                    if (isKeyUp && hasTriggeredRef.current) {\n                        return;\n                    }\n                    maybePreventDefault(e, hotkey, memoisedOptions == null ? void 0 : memoisedOptions.preventDefault);\n                    if (!isHotkeyEnabled(e, hotkey, memoisedOptions == null ? void 0 : memoisedOptions.enabled)) {\n                        stopPropagation(e);\n                        return;\n                    }\n                    // Execute the user callback for that hotkey\n                    cbRef.current(e, hotkey);\n                    if (!isKeyUp) {\n                        hasTriggeredRef.current = true;\n                    }\n                }\n            });\n        };\n        var handleKeyDown = function handleKeyDown(event) {\n            if (event.key === undefined) {\n                // Synthetic event (e.g., Chrome autofill).  Ignore.\n                return;\n            }\n            pushToCurrentlyPressedKeys(mapKey(event.code));\n            if ((memoisedOptions == null ? void 0 : memoisedOptions.keydown) === undefined && (memoisedOptions == null ? void 0 : memoisedOptions.keyup) !== true || memoisedOptions != null && memoisedOptions.keydown) {\n                listener(event);\n            }\n        };\n        var handleKeyUp = function handleKeyUp(event) {\n            if (event.key === undefined) {\n                // Synthetic event (e.g., Chrome autofill).  Ignore.\n                return;\n            }\n            removeFromCurrentlyPressedKeys(mapKey(event.code));\n            hasTriggeredRef.current = false;\n            if (memoisedOptions != null && memoisedOptions.keyup) {\n                listener(event, true);\n            }\n        };\n        var domNode = ref || (_options == null ? void 0 : _options.document) || document;\n        // @ts-ignore\n        domNode.addEventListener(\"keyup\", handleKeyUp);\n        // @ts-ignore\n        domNode.addEventListener(\"keydown\", handleKeyDown);\n        if (proxy) {\n            parseKeysHookInput(_keys, memoisedOptions == null ? void 0 : memoisedOptions.splitKey).forEach(function(key) {\n                return proxy.addHotkey(parseHotkey(key, memoisedOptions == null ? void 0 : memoisedOptions.combinationKey, memoisedOptions == null ? void 0 : memoisedOptions.description));\n            });\n        }\n        return function() {\n            // @ts-ignore\n            domNode.removeEventListener(\"keyup\", handleKeyUp);\n            // @ts-ignore\n            domNode.removeEventListener(\"keydown\", handleKeyDown);\n            if (proxy) {\n                parseKeysHookInput(_keys, memoisedOptions == null ? void 0 : memoisedOptions.splitKey).forEach(function(key) {\n                    return proxy.removeHotkey(parseHotkey(key, memoisedOptions == null ? void 0 : memoisedOptions.combinationKey, memoisedOptions == null ? void 0 : memoisedOptions.description));\n                });\n            }\n        };\n    }, [\n        ref,\n        _keys,\n        memoisedOptions,\n        enabledScopes\n    ]);\n    return setRef;\n}\nfunction useRecordHotkeys() {\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(new Set()), keys = _useState[0], setKeys = _useState[1];\n    var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), isRecording = _useState2[0], setIsRecording = _useState2[1];\n    var handler = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(event) {\n        if (event.key === undefined) {\n            // Synthetic event (e.g., Chrome autofill).  Ignore.\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        setKeys(function(prev) {\n            var newKeys = new Set(prev);\n            newKeys.add(mapKey(event.code));\n            return newKeys;\n        });\n    }, []);\n    var stop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function() {\n        if (typeof document !== \"undefined\") {\n            document.removeEventListener(\"keydown\", handler);\n            setIsRecording(false);\n        }\n    }, [\n        handler\n    ]);\n    var start = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function() {\n        setKeys(new Set());\n        if (typeof document !== \"undefined\") {\n            stop();\n            document.addEventListener(\"keydown\", handler);\n            setIsRecording(true);\n        }\n    }, [\n        handler,\n        stop\n    ]);\n    var resetKeys = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function() {\n        setKeys(new Set());\n    }, []);\n    return [\n        keys,\n        {\n            start: start,\n            stop: stop,\n            resetKeys: resetKeys,\n            isRecording: isRecording\n        }\n    ];\n}\n //# sourceMappingURL=react-hotkeys-hook.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.esm.js\n");

/***/ })

};
;