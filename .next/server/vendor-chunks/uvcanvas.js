"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uvcanvas";
exports.ids = ["vendor-chunks/uvcanvas"];
exports.modules = {

/***/ "(ssr)/./node_modules/uvcanvas/dist/components/lumiflex/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/uvcanvas/dist/components/lumiflex/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lumiflex: () => (/* binding */ Lumiflex)\n/* harmony export */ });\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Renderer.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/extras/Triangle.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Program.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/math/Color.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Mesh.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Lumiflex auto */ \n\nvar vert = \"\\nattribute vec2 uv;\\nattribute vec2 position;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = vec4(position, 0, 1);\\n}\";\nvar frag = \"\\nprecision highp float;\\n\\nuniform float uTime;\\nuniform vec3 uColor;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    gl_FragColor.rgb = 0.5 + 0.3 * cos(vUv.xyx + uTime) + uColor;\\n    gl_FragColor.a = 1.0;\\n}\";\nfunction Lumiflex(props) {\n    const propsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(props);\n    const ctnDom = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { color, ...rest } = props;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        propsRef.current = props;\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!ctnDom.current) {\n            return;\n        }\n        const ctn = ctnDom.current;\n        const renderer = new ogl__WEBPACK_IMPORTED_MODULE_1__.Renderer();\n        const gl = renderer.gl;\n        gl.clearColor(1, 1, 1, 1);\n        function resize() {\n            if (ctn == null) {\n                return;\n            }\n            const scale = 1;\n            renderer.setSize(ctn.offsetWidth * scale, ctn.offsetHeight * scale);\n        }\n        window.addEventListener(\"resize\", resize, false);\n        resize();\n        const geometry = new ogl__WEBPACK_IMPORTED_MODULE_2__.Triangle(gl);\n        const program = new ogl__WEBPACK_IMPORTED_MODULE_3__.Program(gl, {\n            vertex: vert,\n            fragment: frag,\n            uniforms: {\n                uTime: {\n                    value: 0\n                },\n                uColor: {\n                    value: new ogl__WEBPACK_IMPORTED_MODULE_4__.Color(...color || [\n                        0.3,\n                        0.2,\n                        0.5\n                    ])\n                }\n            }\n        });\n        const mesh = new ogl__WEBPACK_IMPORTED_MODULE_5__.Mesh(gl, {\n            geometry,\n            program\n        });\n        let animateId;\n        animateId = requestAnimationFrame(update);\n        function update(t) {\n            animateId = requestAnimationFrame(update);\n            const { time: time = t * 0.01, speed = 1.0 } = propsRef.current;\n            program.uniforms.uTime.value = time * speed * 0.1;\n            renderer.render({\n                scene: mesh\n            });\n        }\n        ctn.appendChild(gl.canvas);\n        return ()=>{\n            cancelAnimationFrame(animateId);\n            window.removeEventListener(\"resize\", resize);\n            ctn.removeChild(gl.canvas);\n            gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n        };\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: ctnDom,\n        style: {\n            width: \"100%\",\n            height: \"100%\"\n        },\n        ...rest\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXZjYW52YXMvZGlzdC9jb21wb25lbnRzL2x1bWlmbGV4L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OERBQytEO0FBQ2Q7QUFFakQsSUFBSVEsT0FBTztBQUVYLElBQUlDLE9BQU87QUFFWCxTQUFTQyxTQUFTQyxLQUFLO0lBQ25CLE1BQU1DLFdBQVdOLDZDQUFNQSxDQUFDSztJQUN4QixNQUFNRSxTQUFTUCw2Q0FBTUEsQ0FBQztJQUN0QixNQUFNLEVBQUVRLEtBQUssRUFBRSxHQUFHQyxNQUFNLEdBQUdKO0lBQzNCSixnREFBU0EsQ0FBQztRQUNOSyxTQUFTSSxPQUFPLEdBQUdMO0lBQ3ZCO0lBQ0FKLGdEQUFTQSxDQUFDO1FBQ04sSUFBSSxDQUFDTSxPQUFPRyxPQUFPLEVBQUU7WUFDakI7UUFDSjtRQUNBLE1BQU1DLE1BQU1KLE9BQU9HLE9BQU87UUFDMUIsTUFBTUUsV0FBVyxJQUFJbEIseUNBQVFBO1FBQzdCLE1BQU1tQixLQUFLRCxTQUFTQyxFQUFFO1FBQ3RCQSxHQUFHQyxVQUFVLENBQUMsR0FBRyxHQUFHLEdBQUc7UUFDdkIsU0FBU0M7WUFDTCxJQUFJSixPQUFPLE1BQU07Z0JBQ2I7WUFDSjtZQUNBLE1BQU1LLFFBQVE7WUFDZEosU0FBU0ssT0FBTyxDQUFDTixJQUFJTyxXQUFXLEdBQUdGLE9BQU9MLElBQUlRLFlBQVksR0FBR0g7UUFDakU7UUFDQUksT0FBT0MsZ0JBQWdCLENBQUMsVUFBVU4sUUFBUTtRQUMxQ0E7UUFDQSxNQUFNTyxXQUFXLElBQUkzQix5Q0FBUUEsQ0FBQ2tCO1FBQzlCLE1BQU1VLFVBQVUsSUFBSTNCLHdDQUFPQSxDQUFDaUIsSUFBSTtZQUM1QlcsUUFBUXRCO1lBQ1J1QixVQUFVdEI7WUFDVnVCLFVBQVU7Z0JBQ05DLE9BQU87b0JBQUVDLE9BQU87Z0JBQUU7Z0JBQ2xCQyxRQUFRO29CQUFFRCxPQUFPLElBQUkvQixzQ0FBS0EsSUFBS1csU0FBUzt3QkFBQzt3QkFBSzt3QkFBSztxQkFBSTtnQkFBRztZQUM5RDtRQUNKO1FBQ0EsTUFBTXNCLE9BQU8sSUFBSWhDLHFDQUFJQSxDQUFDZSxJQUFJO1lBQUVTO1lBQVVDO1FBQVE7UUFDOUMsSUFBSVE7UUFDSkEsWUFBWUMsc0JBQXNCQztRQUNsQyxTQUFTQSxPQUFPQyxDQUFDO1lBQ2JILFlBQVlDLHNCQUFzQkM7WUFDbEMsTUFBTSxFQUFFRSxNQUFNQSxPQUFPRCxJQUFJLElBQUksRUFBRUUsUUFBUSxHQUFHLEVBQUUsR0FBRzlCLFNBQVNJLE9BQU87WUFDL0RhLFFBQVFHLFFBQVEsQ0FBQ0MsS0FBSyxDQUFDQyxLQUFLLEdBQUdPLE9BQU9DLFFBQVE7WUFDOUN4QixTQUFTeUIsTUFBTSxDQUFDO2dCQUFFQyxPQUFPUjtZQUFLO1FBQ2xDO1FBQ0FuQixJQUFJNEIsV0FBVyxDQUFDMUIsR0FBRzJCLE1BQU07UUFDekIsT0FBTztZQUNIQyxxQkFBcUJWO1lBQ3JCWCxPQUFPc0IsbUJBQW1CLENBQUMsVUFBVTNCO1lBQ3JDSixJQUFJZ0MsV0FBVyxDQUFDOUIsR0FBRzJCLE1BQU07WUFDekIzQixHQUFHK0IsWUFBWSxDQUFDLHVCQUF1QkM7UUFDM0M7SUFDSixHQUFHLEVBQUU7SUFDTCxxQkFBUTlDLGdEQUFtQixDQUFDLE9BQU87UUFBRWdELEtBQUt4QztRQUFReUMsT0FBTztZQUNqREMsT0FBTztZQUNQQyxRQUFRO1FBQ1o7UUFBRyxHQUFHekMsSUFBSTtJQUFDO0FBQ25CO0FBRW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYW5hLWxpcXVpZGl0eS1wb29sLy4vbm9kZV9tb2R1bGVzL3V2Y2FudmFzL2Rpc3QvY29tcG9uZW50cy9sdW1pZmxleC9pbmRleC5qcz9iZGI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiXG5pbXBvcnQgeyBSZW5kZXJlciwgVHJpYW5nbGUsIFByb2dyYW0sIENvbG9yLCBNZXNoIH0gZnJvbSAnb2dsJztcbmltcG9ydCBSZWFjdCwgeyB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxudmFyIHZlcnQgPSBcIlxcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xcbmF0dHJpYnV0ZSB2ZWMyIHBvc2l0aW9uO1xcblxcbnZhcnlpbmcgdmVjMiB2VXY7XFxuXFxudm9pZCBtYWluKCkge1xcbiAgICB2VXYgPSB1djtcXG4gICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvc2l0aW9uLCAwLCAxKTtcXG59XCI7XG5cbnZhciBmcmFnID0gXCJcXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuXFxudW5pZm9ybSBmbG9hdCB1VGltZTtcXG51bmlmb3JtIHZlYzMgdUNvbG9yO1xcblxcbnZhcnlpbmcgdmVjMiB2VXY7XFxuXFxudm9pZCBtYWluKCkge1xcbiAgICBnbF9GcmFnQ29sb3IucmdiID0gMC41ICsgMC4zICogY29zKHZVdi54eXggKyB1VGltZSkgKyB1Q29sb3I7XFxuICAgIGdsX0ZyYWdDb2xvci5hID0gMS4wO1xcbn1cIjtcblxuZnVuY3Rpb24gTHVtaWZsZXgocHJvcHMpIHtcbiAgICBjb25zdCBwcm9wc1JlZiA9IHVzZVJlZihwcm9wcyk7XG4gICAgY29uc3QgY3RuRG9tID0gdXNlUmVmKG51bGwpO1xuICAgIGNvbnN0IHsgY29sb3IsIC4uLnJlc3QgfSA9IHByb3BzO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHByb3BzUmVmLmN1cnJlbnQgPSBwcm9wcztcbiAgICB9KTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWN0bkRvbS5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3RuID0gY3RuRG9tLmN1cnJlbnQ7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKCk7XG4gICAgICAgIGNvbnN0IGdsID0gcmVuZGVyZXIuZ2w7XG4gICAgICAgIGdsLmNsZWFyQ29sb3IoMSwgMSwgMSwgMSk7XG4gICAgICAgIGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgICAgICAgIGlmIChjdG4gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gMTtcbiAgICAgICAgICAgIHJlbmRlcmVyLnNldFNpemUoY3RuLm9mZnNldFdpZHRoICogc2NhbGUsIGN0bi5vZmZzZXRIZWlnaHQgKiBzY2FsZSk7XG4gICAgICAgIH1cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplLCBmYWxzZSk7XG4gICAgICAgIHJlc2l6ZSgpO1xuICAgICAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUcmlhbmdsZShnbCk7XG4gICAgICAgIGNvbnN0IHByb2dyYW0gPSBuZXcgUHJvZ3JhbShnbCwge1xuICAgICAgICAgICAgdmVydGV4OiB2ZXJ0LFxuICAgICAgICAgICAgZnJhZ21lbnQ6IGZyYWcsXG4gICAgICAgICAgICB1bmlmb3Jtczoge1xuICAgICAgICAgICAgICAgIHVUaW1lOiB7IHZhbHVlOiAwIH0sXG4gICAgICAgICAgICAgICAgdUNvbG9yOiB7IHZhbHVlOiBuZXcgQ29sb3IoLi4uKGNvbG9yIHx8IFswLjMsIDAuMiwgMC41XSkpIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbWVzaCA9IG5ldyBNZXNoKGdsLCB7IGdlb21ldHJ5LCBwcm9ncmFtIH0pO1xuICAgICAgICBsZXQgYW5pbWF0ZUlkO1xuICAgICAgICBhbmltYXRlSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlKTtcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlKHQpIHtcbiAgICAgICAgICAgIGFuaW1hdGVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpO1xuICAgICAgICAgICAgY29uc3QgeyB0aW1lOiB0aW1lID0gdCAqIDAuMDEsIHNwZWVkID0gMS4wIH0gPSBwcm9wc1JlZi5jdXJyZW50O1xuICAgICAgICAgICAgcHJvZ3JhbS51bmlmb3Jtcy51VGltZS52YWx1ZSA9IHRpbWUgKiBzcGVlZCAqIDAuMTtcbiAgICAgICAgICAgIHJlbmRlcmVyLnJlbmRlcih7IHNjZW5lOiBtZXNoIH0pO1xuICAgICAgICB9XG4gICAgICAgIGN0bi5hcHBlbmRDaGlsZChnbC5jYW52YXMpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0ZUlkKTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHJlc2l6ZSk7XG4gICAgICAgICAgICBjdG4ucmVtb3ZlQ2hpbGQoZ2wuY2FudmFzKTtcbiAgICAgICAgICAgIGdsLmdldEV4dGVuc2lvbihcIldFQkdMX2xvc2VfY29udGV4dFwiKT8ubG9zZUNvbnRleHQoKTtcbiAgICAgICAgfTtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgcmVmOiBjdG5Eb20sIHN0eWxlOiB7XG4gICAgICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICB9LCAuLi5yZXN0IH0pKTtcbn1cblxuZXhwb3J0IHsgTHVtaWZsZXggfTtcbiJdLCJuYW1lcyI6WyJSZW5kZXJlciIsIlRyaWFuZ2xlIiwiUHJvZ3JhbSIsIkNvbG9yIiwiTWVzaCIsIlJlYWN0IiwidXNlUmVmIiwidXNlRWZmZWN0IiwidmVydCIsImZyYWciLCJMdW1pZmxleCIsInByb3BzIiwicHJvcHNSZWYiLCJjdG5Eb20iLCJjb2xvciIsInJlc3QiLCJjdXJyZW50IiwiY3RuIiwicmVuZGVyZXIiLCJnbCIsImNsZWFyQ29sb3IiLCJyZXNpemUiLCJzY2FsZSIsInNldFNpemUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJnZW9tZXRyeSIsInByb2dyYW0iLCJ2ZXJ0ZXgiLCJmcmFnbWVudCIsInVuaWZvcm1zIiwidVRpbWUiLCJ2YWx1ZSIsInVDb2xvciIsIm1lc2giLCJhbmltYXRlSWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ1cGRhdGUiLCJ0IiwidGltZSIsInNwZWVkIiwicmVuZGVyIiwic2NlbmUiLCJhcHBlbmRDaGlsZCIsImNhbnZhcyIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZUNoaWxkIiwiZ2V0RXh0ZW5zaW9uIiwibG9zZUNvbnRleHQiLCJjcmVhdGVFbGVtZW50IiwicmVmIiwic3R5bGUiLCJ3aWR0aCIsImhlaWdodCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uvcanvas/dist/components/lumiflex/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uvcanvas/dist/components/novatrix/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/uvcanvas/dist/components/novatrix/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Novatrix: () => (/* binding */ Novatrix)\n/* harmony export */ });\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Renderer.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/extras/Triangle.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Program.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/math/Color.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Mesh.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Novatrix auto */ \n\nvar styles = {\n    \"gradient-canvas\": \"uvc__gradient-canvas\"\n};\nvar vert = \"\\nattribute vec2 uv;\\nattribute vec2 position;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = vec4(position, 0, 1);\\n}\";\nvar frag = \"precision highp float;\\n\\nuniform float uTime;\\nuniform vec3 uColor;\\nuniform vec3 uResolution;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n    float mr = min(uResolution.x, uResolution.y);\\n    vec2 uv = (vUv.xy * 2.0 - 1.0) * uResolution.xy / mr;\\n\\n    float d = -uTime * 0.5;\\n    float a = 0.0;\\n    for (float i = 0.0; i < 8.0; ++i) {\\n        a += cos(i - d - a * uv.x);\\n        d += sin(uv.y * i + a);\\n    }\\n    d += uTime * 0.5;\\n    vec3 col = vec3(cos(uv * vec2(d, a)) * 0.6 + 0.4, cos(a + d) * 0.5 + 0.5);\\n    col = cos(col * cos(vec3(d, a, 2.5)) * 0.5 + 0.5);\\n    gl_FragColor = vec4(col,1.0);\\n\\n}\";\nfunction Novatrix(props) {\n    const ctnDom = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { color, ...rest } = props;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!ctnDom.current) {\n            return;\n        }\n        const ctn = ctnDom.current;\n        const renderer = new ogl__WEBPACK_IMPORTED_MODULE_1__.Renderer();\n        const gl = renderer.gl;\n        gl.clearColor(1, 1, 1, 1);\n        function resize() {\n            const scale = 1;\n            // camera.perspective({\n            //   aspect: gl.canvas.width / gl.canvas.height,\n            // });\n            renderer.setSize(ctn.offsetWidth * scale, ctn.offsetHeight * scale);\n        }\n        window.addEventListener(\"resize\", resize, false);\n        resize();\n        const geometry = new ogl__WEBPACK_IMPORTED_MODULE_2__.Triangle(gl);\n        const program = new ogl__WEBPACK_IMPORTED_MODULE_3__.Program(gl, {\n            vertex: vert,\n            fragment: frag,\n            uniforms: {\n                uTime: {\n                    value: 0\n                },\n                uColor: {\n                    value: new ogl__WEBPACK_IMPORTED_MODULE_4__.Color(...color || [\n                        0.3,\n                        0.2,\n                        0.5\n                    ])\n                },\n                uResolution: {\n                    value: new ogl__WEBPACK_IMPORTED_MODULE_4__.Color(gl.canvas.width, gl.canvas.height, gl.canvas.width / gl.canvas.height)\n                }\n            }\n        });\n        const mesh = new ogl__WEBPACK_IMPORTED_MODULE_5__.Mesh(gl, {\n            geometry,\n            program\n        });\n        let animateId;\n        animateId = requestAnimationFrame(update);\n        function update(t) {\n            animateId = requestAnimationFrame(update);\n            program.uniforms.uTime.value = t * 0.001;\n            // Don't need a camera if camera uniforms aren't required\n            renderer.render({\n                scene: mesh\n            });\n        }\n        ctn.appendChild(gl.canvas);\n        return ()=>{\n            cancelAnimationFrame(animateId);\n            window.removeEventListener(\"resize\", resize);\n            ctn.removeChild(gl.canvas);\n            gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n        };\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: ctnDom,\n        className: styles.gradientCanvas,\n        style: {\n            width: \"100%\",\n            height: \"100%\"\n        },\n        ...rest\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXZjYW52YXMvZGlzdC9jb21wb25lbnRzL25vdmF0cml4L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OERBQytEO0FBQ2Q7QUFFakQsSUFBSVEsU0FBUztJQUFDLG1CQUFrQjtBQUFzQjtBQUV0RCxJQUFJQyxPQUFPO0FBRVgsSUFBSUMsT0FBTztBQUVYLFNBQVNDLFNBQVNDLEtBQUs7SUFDbkIsTUFBTUMsU0FBU1AsNkNBQU1BLENBQUM7SUFDdEIsTUFBTSxFQUFFUSxLQUFLLEVBQUUsR0FBR0MsTUFBTSxHQUFHSDtJQUMzQkwsZ0RBQVNBLENBQUM7UUFDTixJQUFJLENBQUNNLE9BQU9HLE9BQU8sRUFBRTtZQUNqQjtRQUNKO1FBQ0EsTUFBTUMsTUFBTUosT0FBT0csT0FBTztRQUMxQixNQUFNRSxXQUFXLElBQUlsQix5Q0FBUUE7UUFDN0IsTUFBTW1CLEtBQUtELFNBQVNDLEVBQUU7UUFDdEJBLEdBQUdDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsR0FBRztRQUN2QixTQUFTQztZQUNMLE1BQU1DLFFBQVE7WUFDZCx1QkFBdUI7WUFDdkIsZ0RBQWdEO1lBQ2hELE1BQU07WUFDTkosU0FBU0ssT0FBTyxDQUFDTixJQUFJTyxXQUFXLEdBQUdGLE9BQU9MLElBQUlRLFlBQVksR0FBR0g7UUFDakU7UUFDQUksT0FBT0MsZ0JBQWdCLENBQUMsVUFBVU4sUUFBUTtRQUMxQ0E7UUFDQSxNQUFNTyxXQUFXLElBQUkzQix5Q0FBUUEsQ0FBQ2tCO1FBQzlCLE1BQU1VLFVBQVUsSUFBSTNCLHdDQUFPQSxDQUFDaUIsSUFBSTtZQUM1QlcsUUFBUXJCO1lBQ1JzQixVQUFVckI7WUFDVnNCLFVBQVU7Z0JBQ05DLE9BQU87b0JBQUVDLE9BQU87Z0JBQUU7Z0JBQ2xCQyxRQUFRO29CQUFFRCxPQUFPLElBQUkvQixzQ0FBS0EsSUFBS1csU0FBUzt3QkFBQzt3QkFBSzt3QkFBSztxQkFBSTtnQkFBRztnQkFDMURzQixhQUFhO29CQUNURixPQUFPLElBQUkvQixzQ0FBS0EsQ0FBQ2dCLEdBQUdrQixNQUFNLENBQUNDLEtBQUssRUFBRW5CLEdBQUdrQixNQUFNLENBQUNFLE1BQU0sRUFBRXBCLEdBQUdrQixNQUFNLENBQUNDLEtBQUssR0FBR25CLEdBQUdrQixNQUFNLENBQUNFLE1BQU07Z0JBQzFGO1lBQ0o7UUFDSjtRQUNBLE1BQU1DLE9BQU8sSUFBSXBDLHFDQUFJQSxDQUFDZSxJQUFJO1lBQUVTO1lBQVVDO1FBQVE7UUFDOUMsSUFBSVk7UUFDSkEsWUFBWUMsc0JBQXNCQztRQUNsQyxTQUFTQSxPQUFPQyxDQUFDO1lBQ2JILFlBQVlDLHNCQUFzQkM7WUFDbENkLFFBQVFHLFFBQVEsQ0FBQ0MsS0FBSyxDQUFDQyxLQUFLLEdBQUdVLElBQUk7WUFDbkMseURBQXlEO1lBQ3pEMUIsU0FBUzJCLE1BQU0sQ0FBQztnQkFBRUMsT0FBT047WUFBSztRQUNsQztRQUNBdkIsSUFBSThCLFdBQVcsQ0FBQzVCLEdBQUdrQixNQUFNO1FBQ3pCLE9BQU87WUFDSFcscUJBQXFCUDtZQUNyQmYsT0FBT3VCLG1CQUFtQixDQUFDLFVBQVU1QjtZQUNyQ0osSUFBSWlDLFdBQVcsQ0FBQy9CLEdBQUdrQixNQUFNO1lBQ3pCbEIsR0FBR2dDLFlBQVksQ0FBQyx1QkFBdUJDO1FBQzNDO0lBQ0osR0FBRyxFQUFFO0lBQ0wscUJBQVEvQyxnREFBbUIsQ0FBQyxPQUFPO1FBQUVpRCxLQUFLekM7UUFBUTBDLFdBQVcvQyxPQUFPZ0QsY0FBYztRQUFFQyxPQUFPO1lBQ25GbkIsT0FBTztZQUNQQyxRQUFRO1FBQ1o7UUFBRyxHQUFHeEIsSUFBSTtJQUFDO0FBQ25CO0FBRW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYW5hLWxpcXVpZGl0eS1wb29sLy4vbm9kZV9tb2R1bGVzL3V2Y2FudmFzL2Rpc3QvY29tcG9uZW50cy9ub3ZhdHJpeC9pbmRleC5qcz9kYzY1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiXG5pbXBvcnQgeyBSZW5kZXJlciwgVHJpYW5nbGUsIFByb2dyYW0sIENvbG9yLCBNZXNoIH0gZnJvbSAnb2dsJztcbmltcG9ydCBSZWFjdCwgeyB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxudmFyIHN0eWxlcyA9IHtcImdyYWRpZW50LWNhbnZhc1wiOlwidXZjX19ncmFkaWVudC1jYW52YXNcIn07XG5cbnZhciB2ZXJ0ID0gXCJcXG5hdHRyaWJ1dGUgdmVjMiB1djtcXG5hdHRyaWJ1dGUgdmVjMiBwb3NpdGlvbjtcXG5cXG52YXJ5aW5nIHZlYzIgdlV2O1xcblxcbnZvaWQgbWFpbigpIHtcXG4gICAgdlV2ID0gdXY7XFxuICAgIGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMCwgMSk7XFxufVwiO1xuXG52YXIgZnJhZyA9IFwicHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcblxcbnVuaWZvcm0gZmxvYXQgdVRpbWU7XFxudW5pZm9ybSB2ZWMzIHVDb2xvcjtcXG51bmlmb3JtIHZlYzMgdVJlc29sdXRpb247XFxuXFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG52b2lkIG1haW4oKSB7XFxuXFxuICAgIGZsb2F0IG1yID0gbWluKHVSZXNvbHV0aW9uLngsIHVSZXNvbHV0aW9uLnkpO1xcbiAgICB2ZWMyIHV2ID0gKHZVdi54eSAqIDIuMCAtIDEuMCkgKiB1UmVzb2x1dGlvbi54eSAvIG1yO1xcblxcbiAgICBmbG9hdCBkID0gLXVUaW1lICogMC41O1xcbiAgICBmbG9hdCBhID0gMC4wO1xcbiAgICBmb3IgKGZsb2F0IGkgPSAwLjA7IGkgPCA4LjA7ICsraSkge1xcbiAgICAgICAgYSArPSBjb3MoaSAtIGQgLSBhICogdXYueCk7XFxuICAgICAgICBkICs9IHNpbih1di55ICogaSArIGEpO1xcbiAgICB9XFxuICAgIGQgKz0gdVRpbWUgKiAwLjU7XFxuICAgIHZlYzMgY29sID0gdmVjMyhjb3ModXYgKiB2ZWMyKGQsIGEpKSAqIDAuNiArIDAuNCwgY29zKGEgKyBkKSAqIDAuNSArIDAuNSk7XFxuICAgIGNvbCA9IGNvcyhjb2wgKiBjb3ModmVjMyhkLCBhLCAyLjUpKSAqIDAuNSArIDAuNSk7XFxuICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoY29sLDEuMCk7XFxuXFxufVwiO1xuXG5mdW5jdGlvbiBOb3ZhdHJpeChwcm9wcykge1xuICAgIGNvbnN0IGN0bkRvbSA9IHVzZVJlZihudWxsKTtcbiAgICBjb25zdCB7IGNvbG9yLCAuLi5yZXN0IH0gPSBwcm9wcztcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWN0bkRvbS5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3RuID0gY3RuRG9tLmN1cnJlbnQ7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKCk7XG4gICAgICAgIGNvbnN0IGdsID0gcmVuZGVyZXIuZ2w7XG4gICAgICAgIGdsLmNsZWFyQ29sb3IoMSwgMSwgMSwgMSk7XG4gICAgICAgIGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gMTtcbiAgICAgICAgICAgIC8vIGNhbWVyYS5wZXJzcGVjdGl2ZSh7XG4gICAgICAgICAgICAvLyAgIGFzcGVjdDogZ2wuY2FudmFzLndpZHRoIC8gZ2wuY2FudmFzLmhlaWdodCxcbiAgICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgICAgcmVuZGVyZXIuc2V0U2l6ZShjdG4ub2Zmc2V0V2lkdGggKiBzY2FsZSwgY3RuLm9mZnNldEhlaWdodCAqIHNjYWxlKTtcbiAgICAgICAgfVxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCByZXNpemUsIGZhbHNlKTtcbiAgICAgICAgcmVzaXplKCk7XG4gICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRyaWFuZ2xlKGdsKTtcbiAgICAgICAgY29uc3QgcHJvZ3JhbSA9IG5ldyBQcm9ncmFtKGdsLCB7XG4gICAgICAgICAgICB2ZXJ0ZXg6IHZlcnQsXG4gICAgICAgICAgICBmcmFnbWVudDogZnJhZyxcbiAgICAgICAgICAgIHVuaWZvcm1zOiB7XG4gICAgICAgICAgICAgICAgdVRpbWU6IHsgdmFsdWU6IDAgfSxcbiAgICAgICAgICAgICAgICB1Q29sb3I6IHsgdmFsdWU6IG5ldyBDb2xvciguLi4oY29sb3IgfHwgWzAuMywgMC4yLCAwLjVdKSkgfSxcbiAgICAgICAgICAgICAgICB1UmVzb2x1dGlvbjoge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IENvbG9yKGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCwgZ2wuY2FudmFzLndpZHRoIC8gZ2wuY2FudmFzLmhlaWdodCksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBtZXNoID0gbmV3IE1lc2goZ2wsIHsgZ2VvbWV0cnksIHByb2dyYW0gfSk7XG4gICAgICAgIGxldCBhbmltYXRlSWQ7XG4gICAgICAgIGFuaW1hdGVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpO1xuICAgICAgICBmdW5jdGlvbiB1cGRhdGUodCkge1xuICAgICAgICAgICAgYW5pbWF0ZUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZSk7XG4gICAgICAgICAgICBwcm9ncmFtLnVuaWZvcm1zLnVUaW1lLnZhbHVlID0gdCAqIDAuMDAxO1xuICAgICAgICAgICAgLy8gRG9uJ3QgbmVlZCBhIGNhbWVyYSBpZiBjYW1lcmEgdW5pZm9ybXMgYXJlbid0IHJlcXVpcmVkXG4gICAgICAgICAgICByZW5kZXJlci5yZW5kZXIoeyBzY2VuZTogbWVzaCB9KTtcbiAgICAgICAgfVxuICAgICAgICBjdG4uYXBwZW5kQ2hpbGQoZ2wuY2FudmFzKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGVJZCk7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCByZXNpemUpO1xuICAgICAgICAgICAgY3RuLnJlbW92ZUNoaWxkKGdsLmNhbnZhcyk7XG4gICAgICAgICAgICBnbC5nZXRFeHRlbnNpb24oXCJXRUJHTF9sb3NlX2NvbnRleHRcIik/Lmxvc2VDb250ZXh0KCk7XG4gICAgICAgIH07XG4gICAgfSwgW10pO1xuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHJlZjogY3RuRG9tLCBjbGFzc05hbWU6IHN0eWxlcy5ncmFkaWVudENhbnZhcywgc3R5bGU6IHtcbiAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgIH0sIC4uLnJlc3QgfSkpO1xufVxuXG5leHBvcnQgeyBOb3ZhdHJpeCB9O1xuIl0sIm5hbWVzIjpbIlJlbmRlcmVyIiwiVHJpYW5nbGUiLCJQcm9ncmFtIiwiQ29sb3IiLCJNZXNoIiwiUmVhY3QiLCJ1c2VSZWYiLCJ1c2VFZmZlY3QiLCJzdHlsZXMiLCJ2ZXJ0IiwiZnJhZyIsIk5vdmF0cml4IiwicHJvcHMiLCJjdG5Eb20iLCJjb2xvciIsInJlc3QiLCJjdXJyZW50IiwiY3RuIiwicmVuZGVyZXIiLCJnbCIsImNsZWFyQ29sb3IiLCJyZXNpemUiLCJzY2FsZSIsInNldFNpemUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJnZW9tZXRyeSIsInByb2dyYW0iLCJ2ZXJ0ZXgiLCJmcmFnbWVudCIsInVuaWZvcm1zIiwidVRpbWUiLCJ2YWx1ZSIsInVDb2xvciIsInVSZXNvbHV0aW9uIiwiY2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJtZXNoIiwiYW5pbWF0ZUlkIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidXBkYXRlIiwidCIsInJlbmRlciIsInNjZW5lIiwiYXBwZW5kQ2hpbGQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVDaGlsZCIsImdldEV4dGVuc2lvbiIsImxvc2VDb250ZXh0IiwiY3JlYXRlRWxlbWVudCIsInJlZiIsImNsYXNzTmFtZSIsImdyYWRpZW50Q2FudmFzIiwic3R5bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uvcanvas/dist/components/novatrix/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uvcanvas/dist/components/opulento/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/uvcanvas/dist/components/opulento/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Opulento: () => (/* binding */ Opulento)\n/* harmony export */ });\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Renderer.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/extras/Triangle.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Program.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/math/Color.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Mesh.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Opulento auto */ \n\nvar styles = {\n    \"gradient-canvas\": \"uvc__gradient-canvas\"\n};\nvar vert = \"\\nattribute vec2 uv;\\nattribute vec2 position;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = vec4(position, 0, 1);\\n}\";\nvar frag = \"precision highp float;\\n\\nuniform float uTime;\\nuniform vec3 uColor;\\nuniform vec3 uResolution;\\n\\nvarying vec2 vUv;\\n\\n\\n/*\\n\\n\\n\tTriangle Grid Contouring\\n\t------------------------\\n\\n\tUsing a 2D simplex grid to construct the isolines of a 2D field function, namely\\n    gradient noise. I'm not entirely sure what to call the process. Since it's the\\n\ttriangular version of the marching squares algorithm, you'd think it'd be called\\n\t\\\"marching triangles,\\\" but that term is used to describe grid point cloud related\\n    triangulation. Therefore, \\\"triangle grid contouring\\\" will do. :)\\n\\n\tI've been coding up some Wang tile related patterns on square grids lately, which got\\n\tme thinking about attempting the same on a triangle grid. Whilst doing that, I got\\n\tsidetracked and wondered what contour lines created with the triangular equivalent of\\n\ta marching squares algorithm would look like, and here we are. :)\\n\\n    I put this together for novelty purposes, but I'd imagine there'd be some practical\\n\taspects associated with it; Vector contour point lists would be an obvious one, and\\n\tto a lesser extent, triangulated height maps. However, rendering smooth curves would\\n\tbe one of the main benefits. Only one unique linear interpolant is rendered through\\n\teach triangle, which means that Bezier point information via neighboring triangles\\n\twith shared edges would be easy to obtain.... I might demonstrate that at a later\\n\tdate, but for now, a novel proof of concept will do.\\n\\n\\n*/\\n\\n// If you were rendering from a vertex shader, or just pushing out a triangle list\\n// in general, then you'd need to triangulate the triangles that have been split into\\n// quads. The process is almost trivial with just one contour, and slightly more\\n// involved with two, but not too difficult. Anyway, here's a visual representation.\\n// Aesthetically, I kind of like it, but it's a little busy, so is off by default.\\n//#define TRIANGULATE_CONTOURS\\n\\n// Filling the cells with a concentric triangle pattern. I couldn't decide whether\\n// to include it, or not, so it's here as an option.\\n\\n// Render green grass on the terrain. Uncommented leaves dry terrain.\\n\\n// Standard 2D rotation formula.\\nmat2 rot2(float a){ float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\\n\\n\\n// Standard vec2 to float hash - Based on IQ's original.\\nfloat hash21(vec2 p){ return fract(sin(dot(p, vec2(141.13, 289.97)))*43758.5453); }\\n\\n\\n// vec2 to vec2 hash.\\nvec2 hash22(vec2 p) {\\n\\n    // Faster, but doesn't disperse things quite as nicely. However, when framerate\\n    // is an issue, and it often is, this is a good one to use. Basically, it's a tweaked\\n    // amalgamation I put together, based on a couple of other random algorithms I've\\n    // seen around... so use it with caution, because I make a tonne of mistakes. :)\\n    float n = sin(dot(p, vec2(41, 289)));\\n    //return fract(vec2(262144, 32768)*n)*2. - 1.;\\n\\n    // Animated.\\n    p = fract(vec2(262144, 32768)*n);\\n    return sin(p*6.2831853 + uTime);\\n\\n}\\n\\n\\n// Based on IQ's gradient noise formula.\\nfloat n2D3G(vec2 p ){\\n\\n    vec2 i = floor(p); p -= i;\\n\\n    vec4 v;\\n    v.x = dot(hash22(i), p);\\n    v.y = dot(hash22(i + vec2(1, 0)), p - vec2(1, 0));\\n    v.z = dot(hash22(i + vec2(0, 1)), p - vec2(0, 1));\\n    v.w = dot(hash22(i + 1.), p - 1.);\\n\\n    p = p*p*p*(p*(p*6. - 15.) + 10.);\\n\\n    return mix(mix(v.x, v.y, p.x), mix(v.z, v.w, p.x), p.y);\\n    //return v.x + p.x*(v.y - v.x) + p.y*(v.z - v.x) + p.x*p.y*(v.x - v.y - v.z + v.w);\\n}\\n\\n\\n// The isofunction. Just a single noise function, but it can be more elaborate.\\nfloat isoFunction(vec2 p){ return n2D3G(p/4. + .07); }\\n\\n\\n// Unsigned distance to the segment joining \\\"a\\\" and \\\"b\\\".\\nfloat distLine(vec2 a, vec2 b){\\n\\n\\n    b = a - b;\\n    float h = clamp(dot(a, b)/dot(b, b), 0., 1.);\\n    return length(a - b*h);\\n}\\n\\n\\n// Based on IQ's signed distance to the segment joining \\\"a\\\" and \\\"b\\\".\\nfloat distEdge(vec2 a, vec2 b){\\n\\n    //if(abs(dot(a, a) - dot(b, b))>1e-5)\\n\\n\\n\\n    return dot((a + b)*.5, normalize((b - a).yx*vec2(-1, 1)) );\\n    //else return 1e5;\\n\\n}\\n\\n\\n\\n// Interpolating along the edge connecting vertices v1 and v2 with respect to the isovalue.\\nvec2 inter(vec2 p1, vec2 p2, float v1, float v2, float isovalue){\\n\\n    // The interpolated point will fall somewhere between the vertex points p1 and p2.\\n    // Obviously if the isovalue is closer to p1, then the interpolated point will be\\n    // closer to p1, and vice versa.\\n    //\\n    // If you're wondering about the weird numerical hacks on the end, it's a fudge keep the\\n    // lines away from the triangle edges. Because this is a per grid cell implementation,\\n    // there's neighboring cell overlap to deal with, which basically means rendering more\\n    // cells. Typically, that's not particularly difficult to deal with, but can be slower.\\n    // Either way, I wanted to keep things simple... and I'm lazy. Hence, the fugde. :)\\n    return mix(p1, p2, (isovalue - v1)/(v2 - v1)*.75 + .25/2.);\\n\\n    // The mix bit -- without the numberical hacks -- is equivalent to:\\n    //return p1 + (isovalue - v1)/(v2 - v1)*(p2 - p1);\\n\\n    // This is probably more correct, but we seem to be getting away with the line above.\\n    //float inter = v1 == v2 ? .5 : (isovalue - v1) /(v2 - v1);\\n    //return mix(p1, p2, inter);\\n}\\n\\n// Isoline function.\\nint isoLine(vec3 n3, vec2 ip0, vec2 ip1, vec2 ip2, float isovalue, float i,\\ninout vec2 p0, inout vec2 p1){\\n\\n\\n    // Points where the lines cut the edges.\\n    p0 = vec2(1e5), p1 = vec2(1e5);\\n\\n    // Marching triangles.. Is that a thing? Either way, it's similar to marching\\n    // squares, but with triangles. In other words, obtain the underlying function\\n    // value at all three vertices of the triangle cell, compare them to the\\n    // isovalue (over or under), then render a line between the corresponding edges.\\n    //\\n    // The line cuts each edge in accordance with the isovalues at each edge, which\\n    // means interpolating between the two.\\n\\n    // Bitwise accumulation to produce a unique index number upon which to make\\n    // decisions. It's a pretty standard technique.\\n    //\\n    // Minumum threshold value... It's an ID, of sorts.\\n    int iTh = 0;\\n    //\\n    // If the first vertex is over the isovalue threshold, add four, etc.\\n    if(n3.x>isovalue) iTh += 4;\\n    if(n3.y>isovalue) iTh += 2;\\n    if(n3.z>isovalue) iTh += 1;\\n\\n\\n    // A value of 1 or 6 means constructing a line between the\\n    // second and third edges, and so forth.\\n    if(iTh == 1 || iTh == 6){ // 12-20\\n\\n        p0 = inter(ip1, ip2, n3.y, n3.z, isovalue); // Edge two.\\n        p1 = inter(ip2, ip0, n3.z, n3.x, isovalue); // Edge three.\\n\\n    }\\n    else if(iTh == 2 || iTh == 5){ // 01-12\\n\\n        p0 = inter(ip0, ip1, n3.x, n3.y, isovalue); // Edge one.\\n        p1 = inter(ip1, ip2, n3.y, n3.z, isovalue); // Edge two.\\n\\n    }\\n    else if(iTh == 3 || iTh == 4){ // 01-20\\n\\n        p0 = inter(ip0, ip1, n3.x, n3.y, isovalue); // Edge one.\\n        p1 = inter(ip2, ip0, n3.z, n3.x, isovalue); // Edge three.\\n\\n    }\\n\\n\\n    // For the last three cases, we're after the other side of\\n    // the line, and this is a quick way to do that. Uncomment\\n    // to see why it's necessary.\\n    if(iTh>=4 && iTh<=6){ vec2 tmp = p0; p0 = p1; p1 = tmp; }\\n\\n    // Just to make things more confusing, it's necessary to flip coordinates on\\n    // alternate triangles, due to the simplex grid triangle configuration. This\\n    // line basically represents an hour of my life that I won't get back. :D\\n    if(i == 0.){ vec2 tmp = p0; p0 = p1; p1 = tmp; }\\n\\n\\n    // Return the ID, which will be used for rendering purposes.\\n    return iTh;\\n\\n\\n}\\n\\n/*\\nvec3 softLight(vec3 s, vec3 d){\\n\\n    vec3 a = d - (1. - 2.*s)*d*(1. - d), b = d + (2.*s - 1.)*d*((16.*d - 12.)*d + 3.),\\n         c = d + (2.*s - 1.)*(sqrt(d) - d);\\n\\n    return vec3(s.x<.5? a.x : d.x<.25? b.x : c.x, s.y<.5? a.y : d.y<.25? b.y : c.y,\\n    \t\t\ts.z<.5? a.z : d.z<.25? b.z : c.z);\\n\\n}\\n*/\\n\\nvec3 simplexContour(vec2 p){\\n\\n\\n\\n    // Scaling constant.\\n    const float gSc = 8.;\\n    p *= gSc;\\n\\n\\n    // Keeping a copy of the orginal position.\\n    vec2 oP = p;\\n\\n    // Wobbling the coordinates, just a touch, in order to give a subtle hand drawn appearance.\\n    p += vec2(n2D3G(p*3.5), n2D3G(p*3.5 + 7.3))*.015;\\n\\n\\n\\n    // SIMPLEX GRID SETUP\\n\\n    vec2 s = floor(p + (p.x + p.y)*.36602540378); // Skew the current point.\\n\\n    p -= s - (s.x + s.y)*.211324865; // Use it to attain the vector to the base vertex (from p).\\n\\n    // Determine which triangle we're in. Much easier to visualize than the 3D version.\\n    float i = p.x < p.y? 1. : 0.; // Apparently, faster than: i = step(p.y, p.x);\\n    vec2 ioffs = vec2(1. - i, i);\\n\\n    // Vectors to the other two triangle vertices.\\n    vec2 ip0 = vec2(0), ip1 = ioffs - .2113248654, ip2 = vec2(.577350269);\\n\\n\\n    // Centralize everything, so that vec2(0) is in the center of the triangle.\\n    vec2 ctr = (ip0 + ip1 + ip2)/3.; // Centroid.\\n    //\\n    ip0 -= ctr; ip1 -= ctr; ip2 -= ctr; p -= ctr;\\n\\n\\n\\n    // Take a function value (noise, in this case) at each of the vertices of the\\n    // individual triangle cell. Each will be compared the isovalue.\\n    vec3 n3;\\n    n3.x = isoFunction(s);\\n    n3.y = isoFunction(s + ioffs);\\n    n3.z = isoFunction(s + 1.);\\n\\n\\n    // Various distance field values.\\n    float d = 1e5, d2 = 1e5, d3 = 1e5, d4 = 1e5, d5 = 1e5;\\n\\n\\n    // The first contour, which separates the terrain (grass or barren) from the beach.\\n    float isovalue = 0.;\\n\\n    // The contour edge points that the line will run between. Each are passed into the\\n    // function below and calculated.\\n    vec2 p0, p1;\\n\\n    // The isoline. The edge values (p0 and p1) are calculated, and the ID is returned.\\n    int iTh = isoLine(n3, ip0, ip1, ip2, isovalue, i, p0, p1);\\n\\n    // The minimum distance from the pixel to the line running through the triangle edge\\n    // points.\\n    d = min(d, distEdge(p - p0, p - p1));\\n\\n\\n\\n    //if(iTh == 0) d = 1e5;\\n\\n    // Totally internal, which means a terrain (grass) hit.\\n    if(iTh == 7){ // 12-20\\n\\n        // Triangle.\\n        //d = min(min(distEdge(p - ip0, p - ip1), distEdge(p - ip1, p - ip2)),\\n        //distEdge(p - ip0, p - ip2));\\n\\n        // Easier just to set the distance to a hit.\\n        d = 0.;\\n    }\\n\\n\\n\\n    // Contour lines.\\n    d3 = min(d3, distLine((p - p0), (p - p1)));\\n    // Contour points.\\n    d4 = min(d4, min(length(p - p0), length(p - p1)));\\n\\n\\n\\n\\n\\n    // Displaying the 2D simplex grid. Basically, we're rendering lines between\\n    // each of the three triangular cell vertices to show the outline of the\\n    // cell edges.\\n    float tri = min(min(distLine(p - ip0, p - ip1), distLine(p - ip1, p - ip2)),\\n    distLine(p - ip2, p - ip0));\\n\\n    // Adding the triangle grid to the d5 distance field value.\\n    d5 = min(d5, tri);\\n\\n\\n    // Dots in the centers of the triangles, for whatever reason. :) Take them out, if\\n    // you prefer a cleaner look.\\n    d5 = min(d5, length(p) - .02);\\n\\n\\n    // The second contour: This one demarcates the beach from the sea.\\n    isovalue = -.15;\\n\\n    // The isoline. The edge values (p0 and p1) are calculated, and the ID is returned.\\n    int iTh2 = isoLine(n3, ip0, ip1, ip2, isovalue, i, p0, p1);\\n\\n    // The minimum distance from the pixel to the line running through the triangle edge\\n    // points.\\n    d2 = min(d2, distEdge(p - p0, p - p1));\\n\\n    // Make a copy.\\n    float oldD2 = d2;\\n\\n    if(iTh2 == 7) d2 = 0.;\\n    if(iTh == 7) d2 = 1e5;\\n    d2 = max(d2, -d);\\n\\n\\n    // Contour lines - 2nd (beach) contour.\\n    d3 = min(d3, distLine((p - p0), (p - p1)));\\n    // Contour points - 2nd (beach) contour.\\n    d4 = min(d4, min(length(p - p0), length(p - p1)));\\n\\n    d4 -= .075;\\n    d3 -= .0125;\\n\\n\\n    // The screen coordinates have been scaled up, so the distance values need to be\\n    // scaled down.\\n    d /= gSc;\\n    d2 /= gSc;\\n    d3 /= gSc;\\n    d4 /= gSc;\\n    d5 /= gSc;\\n\\n\\n\\n    // Rendering - Coloring.\\n\\n    // Initial color.\\n    vec3 col = vec3(1, .85, .6);\\n\\n    // Smoothing factor.\\n    float sf = .004;\\n\\n    // Water.\\n    if(d>0. && d2>0.) col = vec3(.3, .3, .3)*.45;\\n    // Water edging.\\n    if(d>0.) col = mix(col, vec3(.2, .2, .2)*.3, (1. - smoothstep(0., sf, d2 - .012)));\\n\\n    // Beach.\\n    col = mix(col, vec3(0.5, 0.5, 0.5),  (1. - smoothstep(0., sf, d2)));\\n    // Beach edging.\\n    col = mix(col, vec3(0.3, 0.3, 0.3)*.6, (1. - smoothstep(0., sf, d - .012)));\\n\\n    col = mix(col, vec3(0.1, 0.1, 0.1)*.95, (1. - smoothstep(0., sf, d)));\\n\\n\\n\\n\\n    // Abstract shading, based on the individual noise height values for each triangle.\\n    if(d2>0.) col *= (abs(dot(n3, vec3(1)))*1.25 + 1.25)/2.;\\n    else col *= max(2. - (dot(n3, vec3(1)) + 1.45)/1.25, 0.);\\n\\n    // More abstract shading.\\n    //if(iTh!=0) col *= float(iTh)/7.*.5 + .6;\\n    //else col *= float(3.)/7.*.5 + .75;\\n\\n\\n    float pat = abs(fract(tri*12.5 + .4) - .5)*2.;\\n    col *= pat*.425 + .75;\\n\\n\\n\\n\\n    // Triangle grid overlay.\\n    col = mix(col, vec3(0), (1. - smoothstep(0., sf, d5))*.95);\\n\\n\\n\\n    // Lines.\\n    col = mix(col, vec3(0), (1. - smoothstep(0., sf, d3)));\\n\\n\\n    // Dots.\\n    col = mix(col, vec3(0), (1. - smoothstep(0., sf, d4)));\\n    col = mix(col, vec3(1), (1. - smoothstep(0., sf, d4 + .005)));\\n\\n\\n\\n    // Rough pencil color overlay... The calculations are rough... Very rough, in fact,\\n    // since I'm only using a small overlayed portion of it. Flockaroo does a much, much\\n    // better pencil sketch algorithm here:\\n    //\\n    // When Voxels Wed Pixels - Flockaroo\\n    // https://www.shadertoy.com/view/MsKfRw\\n    //\\n    // Anyway, the idea is very simple: Render a layer of noise, stretched out along one\\n    // of the directions, then mix a similar, but rotated, layer on top. Whilst doing this,\\n    // compare each layer to it's underlying grey scale value, and take the difference...\\n    // I probably could have described it better, but hopefully, the code will make it\\n    // more clear. :)\\n    //\\n    // Tweaked to suit the brush stroke size.\\n    vec2 q = oP*1.5;\\n    // I always forget this bit. Without it, the grey scale value will be above one,\\n    // resulting in the extra bright spots not having any hatching over the top.\\n    col = min(col, 1.);\\n    // Underlying grey scale pixel value -- Tweaked for contrast and brightness.\\n    float gr = sqrt(dot(col, vec3(.299, .587, .114)))*1.25;\\n    // Stretched fBm noise layer.\\n    float ns = (n2D3G(q*4.*vec2(1./3., 3))*.64 + n2D3G(q*8.*vec2(1./3., 3))*.34)*.5 + .5;\\n    // Compare it to the underlying grey scale value.\\n    ns = gr - ns;\\n    //\\n    // Repeat the process with a rotated layer.\\n    q *= rot2(3.14159/3.);\\n    float ns2 = (n2D3G(q*4.*vec2(1./3., 3))*.64 + n2D3G(q*8.*vec2(1./3., 3))*.34)*.5 + .5;\\n    ns2 = gr - ns2;\\n    //\\n    // Mix the two layers in some way to suit your needs. Flockaroo applied common sense,\\n    // and used a smooth threshold, which works better than the dumb things I was trying. :)\\n    ns = smoothstep(0., 1., min(ns, ns2)); // Rough pencil sketch layer.\\n    //\\n    // Mix in a small portion of the pencil sketch layer with the clean colored one.\\n    col = mix(col, col*(ns + .35), .4);\\n    // Has more of a colored pencil feel.\\n    //col *= vec3(.8)*ns + .5;\\n    // Using Photoshop mixes, like screen, overlay, etc, gives more visual options. Here's\\n    // an example, but there's plenty more. Be sure to uncomment the \\\"softLight\\\" function.\\n    //col = softLight(col, vec3(ns)*.75);\\n    // Uncomment this to see the pencil sketch layer only.\\n    //col = vec3(ns);\\n\\n\\n    /*\\n    // Just some line overlays.\\n    vec2 pt = p;\\n    float offs = -.5;\\n    if(i<.5) offs += 2.;//pt.xy = -pt.xy;\\n    pt = rot2(6.2831/3.)*pt;\\n    float pat2 = clamp(cos(pt.x*6.2831*14. - offs)*2. + 1.5, 0., 1.);\\n    col *= pat2*.4 + .8;\\n    */\\n\\n\\n    // Cheap paper grain.\\n    //oP = floor(oP/gSc*1024.);\\n    //vec3 rn3 = vec3(hash21(oP), hash21(oP + 2.37), hash21(oP + 4.83));\\n    //col *= .9 + .1*rn3.xyz  + .1*rn3.xxx;\\n\\n\\n    // Return the simplex weave value.\\n    return col;\\n\\n\\n}\\n\\nvoid main() {\\n\\n\\n    // Screen coordinates. I've put a cap on the fullscreen resolution to stop\\n    // the pattern looking too blurred out.\\n    vec2 uv = (vUv.xy - .5)*uResolution.xy/max(min(650., uResolution.y), 250.);\\n\\n    // Position with some scrolling, and screen rotation to level the pattern.\\n    vec2 p = rot2(3.14159/12.)*uv + vec2(.8660254, .5)*uTime/16.;\\n\\n    // The simplex grid contour map... or whatever you wish to call it. :)\\n    vec3 col = simplexContour(p);\\n\\n    // Subtle vignette.\\n    uv = vUv.xy;\\n    col *= pow(16.*uv.x*uv.y*(1. - uv.x)*(1. - uv.y) , .0625) + .1;\\n    // Colored variation.\\n    //col = mix(col.zyx/2., col, pow(16.*uv.x*uv.y*(1. - uv.x)*(1. - uv.y) , .125));\\n\\n\\n    // Rough gamma correction.\\n    gl_FragColor = vec4(sqrt(max(col, 0.)), 1);\\n\\n\\n}\";\nfunction Opulento(props) {\n    const ctnDom = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { color, ...rest } = props;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!ctnDom.current) {\n            return;\n        }\n        const ctn = ctnDom.current;\n        const renderer = new ogl__WEBPACK_IMPORTED_MODULE_1__.Renderer();\n        const gl = renderer.gl;\n        gl.clearColor(1, 1, 1, 1);\n        function resize() {\n            const scale = 1;\n            // camera.perspective({\n            //   aspect: gl.canvas.width / gl.canvas.height,\n            // });\n            renderer.setSize(ctn.offsetWidth * scale, ctn.offsetHeight * scale);\n        }\n        window.addEventListener(\"resize\", resize, false);\n        resize();\n        const geometry = new ogl__WEBPACK_IMPORTED_MODULE_2__.Triangle(gl);\n        const program = new ogl__WEBPACK_IMPORTED_MODULE_3__.Program(gl, {\n            vertex: vert,\n            fragment: frag,\n            uniforms: {\n                uTime: {\n                    value: 0\n                },\n                uColor: {\n                    value: new ogl__WEBPACK_IMPORTED_MODULE_4__.Color(...color || [\n                        0.3,\n                        0.2,\n                        0.5\n                    ])\n                },\n                uResolution: {\n                    value: new ogl__WEBPACK_IMPORTED_MODULE_4__.Color(gl.canvas.width, gl.canvas.height, gl.canvas.width / gl.canvas.height)\n                }\n            }\n        });\n        const mesh = new ogl__WEBPACK_IMPORTED_MODULE_5__.Mesh(gl, {\n            geometry,\n            program\n        });\n        let animateId;\n        animateId = requestAnimationFrame(update);\n        function update(t) {\n            animateId = requestAnimationFrame(update);\n            program.uniforms.uTime.value = t * 0.001;\n            // Don't need a camera if camera uniforms aren't required\n            renderer.render({\n                scene: mesh\n            });\n        }\n        ctn.appendChild(gl.canvas);\n        return ()=>{\n            cancelAnimationFrame(animateId);\n            window.removeEventListener(\"resize\", resize);\n            ctn.removeChild(gl.canvas);\n            gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n        };\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: ctnDom,\n        className: styles.gradientCanvas,\n        style: {\n            width: \"100%\",\n            height: \"100%\"\n        },\n        ...rest\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uvcanvas/dist/components/opulento/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uvcanvas/dist/components/slides/action_button/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/uvcanvas/dist/components/slides/action_button/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SlidesActionButton: () => (/* binding */ SlidesActionButton)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var jotai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jotai */ \"(ssr)/./node_modules/jotai/esm/react.mjs\");\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../state.js */ \"(ssr)/./node_modules/uvcanvas/dist/state.js\");\n/* __next_internal_client_entry_do_not_use__ SlidesActionButton auto */ \n\n\nfunction SlidesActionButton(props) {\n    const { variant, children, onClick, ...rest } = props;\n    const setPage = (0,jotai__WEBPACK_IMPORTED_MODULE_1__.useSetAtom)(_state_js__WEBPACK_IMPORTED_MODULE_2__.a);\n    const action = ()=>{\n        setPage({\n            forward: variant === \"right\"\n        });\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        onClick: (e)=>{\n            action();\n            onClick && onClick(e);\n        },\n        ...rest\n    }, children);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXZjYW52YXMvZGlzdC9jb21wb25lbnRzL3NsaWRlcy9hY3Rpb25fYnV0dG9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7d0VBQzBCO0FBQ1M7QUFDa0I7QUFFckQsU0FBU0ksbUJBQW1CQyxLQUFLO0lBQzdCLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sRUFBRSxHQUFHQyxNQUFNLEdBQUdKO0lBQ2hELE1BQU1LLFVBQVVULGlEQUFVQSxDQUFDRSx3Q0FBV0E7SUFDdEMsTUFBTVEsU0FBUztRQUNYRCxRQUFRO1lBQ0pFLFNBQVNOLFlBQVk7UUFDekI7SUFDSjtJQUNBLHFCQUFRTixnREFBbUIsQ0FBQyxPQUFPO1FBQUVRLFNBQVMsQ0FBQ007WUFDdkNIO1lBQ0FILFdBQVdBLFFBQVFNO1FBQ3ZCO1FBQUcsR0FBR0wsSUFBSTtJQUFDLEdBQUdGO0FBQ3RCO0FBRThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYW5hLWxpcXVpZGl0eS1wb29sLy4vbm9kZV9tb2R1bGVzL3V2Y2FudmFzL2Rpc3QvY29tcG9uZW50cy9zbGlkZXMvYWN0aW9uX2J1dHRvbi9pbmRleC5qcz9iZjA1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlU2V0QXRvbSB9IGZyb20gJ2pvdGFpJztcbmltcG9ydCB7IGEgYXMgc2V0UGFnZUF0b20gfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS5qcyc7XG5cbmZ1bmN0aW9uIFNsaWRlc0FjdGlvbkJ1dHRvbihwcm9wcykge1xuICAgIGNvbnN0IHsgdmFyaWFudCwgY2hpbGRyZW4sIG9uQ2xpY2ssIC4uLnJlc3QgfSA9IHByb3BzO1xuICAgIGNvbnN0IHNldFBhZ2UgPSB1c2VTZXRBdG9tKHNldFBhZ2VBdG9tKTtcbiAgICBjb25zdCBhY3Rpb24gPSAoKSA9PiB7XG4gICAgICAgIHNldFBhZ2Uoe1xuICAgICAgICAgICAgZm9yd2FyZDogdmFyaWFudCA9PT0gXCJyaWdodFwiLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IG9uQ2xpY2s6IChlKSA9PiB7XG4gICAgICAgICAgICBhY3Rpb24oKTtcbiAgICAgICAgICAgIG9uQ2xpY2sgJiYgb25DbGljayhlKTtcbiAgICAgICAgfSwgLi4ucmVzdCB9LCBjaGlsZHJlbikpO1xufVxuXG5leHBvcnQgeyBTbGlkZXNBY3Rpb25CdXR0b24gfTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVNldEF0b20iLCJhIiwic2V0UGFnZUF0b20iLCJTbGlkZXNBY3Rpb25CdXR0b24iLCJwcm9wcyIsInZhcmlhbnQiLCJjaGlsZHJlbiIsIm9uQ2xpY2siLCJyZXN0Iiwic2V0UGFnZSIsImFjdGlvbiIsImZvcndhcmQiLCJjcmVhdGVFbGVtZW50IiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uvcanvas/dist/components/slides/action_button/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uvcanvas/dist/components/slides/default_components/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/uvcanvas/dist/components/slides/default_components/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ defaultComponents auto */ \nvar styles = {\n    \"slides\": \"uvc__slides\",\n    \"cover\": \"uvc__cover\",\n    \"cover_overlay\": \"uvc__cover_overlay\",\n    \"ul\": \"uvc__ul\",\n    \"ol\": \"uvc__ol\",\n    \"li\": \"uvc__li\"\n};\nconst defaultComponents = {\n    h1: ({ style, ...props })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n            style: {\n                fontSize: \"2em\",\n                fontWeight: \"bold\",\n                width: \"100%\",\n                borderBottom: \"calc(0.25 * var(--svw)) rgb(255 255 255 / 0.5) solid\",\n                paddingBottom: \"calc(1 * var(--svw))\",\n                marginBottom: \"calc(2 * var(--svw))\",\n                lineHeight: \"1.5em\",\n                ...style\n            },\n            ...props\n        }),\n    li: (props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", {\n            className: styles.li,\n            ...props\n        }),\n    ol: (props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ol\", {\n            className: styles.ol,\n            ...props\n        }),\n    ul: (props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", {\n            className: styles.ul,\n            ...props\n        }),\n    Cover: ({ style, className, children, ...props })=>{\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: styles.cover + \" \" + className,\n            ...props\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", null, props.title), props.subtitle && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h2\", {\n            style: {}\n        }, props.subtitle), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: styles.cover_overlay\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"header\", null, props.header), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"footer\", null, props.footer)));\n    },\n    Background: ({ style, className, children, ...props })=>{\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            style: {\n                background: \"black\",\n                position: \"absolute\",\n                left: \"0\",\n                top: \"0\",\n                width: \"100%\",\n                height: \"100%\",\n                zIndex: \"-1\"\n            },\n            ...props\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            style: {\n                width: \"100%\",\n                height: \"100%\",\n                ...style\n            },\n            className: className\n        }, children));\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXZjYW52YXMvZGlzdC9jb21wb25lbnRzL3NsaWRlcy9kZWZhdWx0X2NvbXBvbmVudHMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7dUVBQzBCO0FBRTFCLElBQUlDLFNBQVM7SUFBQyxVQUFTO0lBQWMsU0FBUTtJQUFhLGlCQUFnQjtJQUFxQixNQUFLO0lBQVUsTUFBSztJQUFVLE1BQUs7QUFBUztBQUUzSSxNQUFNQyxvQkFBb0I7SUFDdEJDLElBQUksQ0FBQyxFQUFFQyxLQUFLLEVBQUUsR0FBR0MsT0FBTyxpQkFBTUwsZ0RBQW1CLENBQUMsTUFBTTtZQUFFSSxPQUFPO2dCQUN6REcsVUFBVTtnQkFDVkMsWUFBWTtnQkFDWkMsT0FBTztnQkFDUEMsY0FBYztnQkFDZEMsZUFBZTtnQkFDZkMsY0FBYztnQkFDZEMsWUFBWTtnQkFDWixHQUFHVCxLQUFLO1lBQ1o7WUFBRyxHQUFHQyxLQUFLO1FBQUM7SUFDaEJTLElBQUksQ0FBQ1Qsc0JBQVdMLGdEQUFtQixDQUFDLE1BQU07WUFBRWUsV0FBV2QsT0FBT2EsRUFBRTtZQUFFLEdBQUdULEtBQUs7UUFBQztJQUMzRVcsSUFBSSxDQUFDWCxzQkFBV0wsZ0RBQW1CLENBQUMsTUFBTTtZQUFFZSxXQUFXZCxPQUFPZSxFQUFFO1lBQUUsR0FBR1gsS0FBSztRQUFDO0lBQzNFWSxJQUFJLENBQUNaLHNCQUFXTCxnREFBbUIsQ0FBQyxNQUFNO1lBQUVlLFdBQVdkLE9BQU9nQixFQUFFO1lBQUUsR0FBR1osS0FBSztRQUFDO0lBQzNFYSxPQUFPLENBQUMsRUFBRWQsS0FBSyxFQUFFVyxTQUFTLEVBQUVJLFFBQVEsRUFBRSxHQUFHZCxPQUFPO1FBQzVDLHFCQUFRTCxnREFBbUIsQ0FBQyxPQUFPO1lBQUVlLFdBQVdkLE9BQU9tQixLQUFLLEdBQUcsTUFBTUw7WUFBVyxHQUFHVixLQUFLO1FBQUMsaUJBQ3JGTCxnREFBbUIsQ0FBQyxNQUFNLE1BQU1LLE1BQU1nQixLQUFLLEdBQzNDaEIsTUFBTWlCLFFBQVEsa0JBQUt0QixnREFBbUIsQ0FBQyxNQUFNO1lBQUVJLE9BQU8sQ0FBQztRQUFFLEdBQUdDLE1BQU1pQixRQUFRLGlCQUMxRXRCLGdEQUFtQixDQUFDLE9BQU87WUFBRWUsV0FBV2QsT0FBT3NCLGFBQWE7UUFBQyxpQkFDekR2QixnREFBbUIsQ0FBQyxVQUFVLE1BQU1LLE1BQU1tQixNQUFNLGlCQUNoRHhCLGdEQUFtQixDQUFDLFVBQVUsTUFBTUssTUFBTW9CLE1BQU07SUFDNUQ7SUFDQUMsWUFBWSxDQUFDLEVBQUV0QixLQUFLLEVBQUVXLFNBQVMsRUFBRUksUUFBUSxFQUFFLEdBQUdkLE9BQU87UUFDakQscUJBQVFMLGdEQUFtQixDQUFDLE9BQU87WUFBRUksT0FBTztnQkFDcEN1QixZQUFZO2dCQUNaQyxVQUFVO2dCQUNWQyxNQUFNO2dCQUNOQyxLQUFLO2dCQUNMckIsT0FBTztnQkFDUHNCLFFBQVE7Z0JBQ1JDLFFBQVE7WUFDWjtZQUFHLEdBQUczQixLQUFLO1FBQUMsaUJBQ1pMLGdEQUFtQixDQUFDLE9BQU87WUFBRUksT0FBTztnQkFDNUJLLE9BQU87Z0JBQ1BzQixRQUFRO2dCQUNSLEdBQUczQixLQUFLO1lBQ1o7WUFBR1csV0FBV0E7UUFBVSxHQUFHSTtJQUN2QztBQUNKO0FBRTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYW5hLWxpcXVpZGl0eS1wb29sLy4vbm9kZV9tb2R1bGVzL3V2Y2FudmFzL2Rpc3QvY29tcG9uZW50cy9zbGlkZXMvZGVmYXVsdF9jb21wb25lbnRzL2luZGV4LmpzP2Y5OWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnZhciBzdHlsZXMgPSB7XCJzbGlkZXNcIjpcInV2Y19fc2xpZGVzXCIsXCJjb3ZlclwiOlwidXZjX19jb3ZlclwiLFwiY292ZXJfb3ZlcmxheVwiOlwidXZjX19jb3Zlcl9vdmVybGF5XCIsXCJ1bFwiOlwidXZjX191bFwiLFwib2xcIjpcInV2Y19fb2xcIixcImxpXCI6XCJ1dmNfX2xpXCJ9O1xuXG5jb25zdCBkZWZhdWx0Q29tcG9uZW50cyA9IHtcbiAgICBoMTogKHsgc3R5bGUsIC4uLnByb3BzIH0pID0+IChSZWFjdC5jcmVhdGVFbGVtZW50KFwiaDFcIiwgeyBzdHlsZToge1xuICAgICAgICAgICAgZm9udFNpemU6IFwiMmVtXCIsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiBcImJvbGRcIixcbiAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgIGJvcmRlckJvdHRvbTogXCJjYWxjKDAuMjUgKiB2YXIoLS1zdncpKSByZ2IoMjU1IDI1NSAyNTUgLyAwLjUpIHNvbGlkXCIsXG4gICAgICAgICAgICBwYWRkaW5nQm90dG9tOiBcImNhbGMoMSAqIHZhcigtLXN2dykpXCIsXG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206IFwiY2FsYygyICogdmFyKC0tc3Z3KSlcIixcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IFwiMS41ZW1cIixcbiAgICAgICAgICAgIC4uLnN0eWxlLFxuICAgICAgICB9LCAuLi5wcm9wcyB9KSksXG4gICAgbGk6IChwcm9wcykgPT4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7IGNsYXNzTmFtZTogc3R5bGVzLmxpLCAuLi5wcm9wcyB9KSksXG4gICAgb2w6IChwcm9wcykgPT4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJvbFwiLCB7IGNsYXNzTmFtZTogc3R5bGVzLm9sLCAuLi5wcm9wcyB9KSksXG4gICAgdWw6IChwcm9wcykgPT4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCB7IGNsYXNzTmFtZTogc3R5bGVzLnVsLCAuLi5wcm9wcyB9KSksXG4gICAgQ292ZXI6ICh7IHN0eWxlLCBjbGFzc05hbWUsIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PiB7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogc3R5bGVzLmNvdmVyICsgXCIgXCIgKyBjbGFzc05hbWUsIC4uLnByb3BzIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaDFcIiwgbnVsbCwgcHJvcHMudGl0bGUpLFxuICAgICAgICAgICAgcHJvcHMuc3VidGl0bGUgJiYgKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCB7IHN0eWxlOiB7fSB9LCBwcm9wcy5zdWJ0aXRsZSkpLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogc3R5bGVzLmNvdmVyX292ZXJsYXkgfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaGVhZGVyXCIsIG51bGwsIHByb3BzLmhlYWRlciksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImZvb3RlclwiLCBudWxsLCBwcm9wcy5mb290ZXIpKSkpO1xuICAgIH0sXG4gICAgQmFja2dyb3VuZDogKHsgc3R5bGUsIGNsYXNzTmFtZSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+IHtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBcImJsYWNrXCIsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgICBsZWZ0OiBcIjBcIixcbiAgICAgICAgICAgICAgICB0b3A6IFwiMFwiLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXCItMVwiLFxuICAgICAgICAgICAgfSwgLi4ucHJvcHMgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgICAgICAgICAgIC4uLnN0eWxlLFxuICAgICAgICAgICAgICAgIH0sIGNsYXNzTmFtZTogY2xhc3NOYW1lIH0sIGNoaWxkcmVuKSkpO1xuICAgIH0sXG59O1xuXG5leHBvcnQgeyBkZWZhdWx0Q29tcG9uZW50cyB9O1xuIl0sIm5hbWVzIjpbIlJlYWN0Iiwic3R5bGVzIiwiZGVmYXVsdENvbXBvbmVudHMiLCJoMSIsInN0eWxlIiwicHJvcHMiLCJjcmVhdGVFbGVtZW50IiwiZm9udFNpemUiLCJmb250V2VpZ2h0Iiwid2lkdGgiLCJib3JkZXJCb3R0b20iLCJwYWRkaW5nQm90dG9tIiwibWFyZ2luQm90dG9tIiwibGluZUhlaWdodCIsImxpIiwiY2xhc3NOYW1lIiwib2wiLCJ1bCIsIkNvdmVyIiwiY2hpbGRyZW4iLCJjb3ZlciIsInRpdGxlIiwic3VidGl0bGUiLCJjb3Zlcl9vdmVybGF5IiwiaGVhZGVyIiwiZm9vdGVyIiwiQmFja2dyb3VuZCIsImJhY2tncm91bmQiLCJwb3NpdGlvbiIsImxlZnQiLCJ0b3AiLCJoZWlnaHQiLCJ6SW5kZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uvcanvas/dist/components/slides/default_components/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uvcanvas/dist/components/slides/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/uvcanvas/dist/components/slides/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Slides: () => (/* binding */ Slides)\n/* harmony export */ });\n/* harmony import */ var react_hotkeys_hook__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-hotkeys-hook */ \"(ssr)/./node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _radix_ui_react_aspect_ratio__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @radix-ui/react-aspect-ratio */ \"(ssr)/./node_modules/@radix-ui/react-aspect-ratio/dist/index.mjs\");\n/* harmony import */ var react_resize_detector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-resize-detector */ \"(ssr)/./node_modules/react-resize-detector/build/index.esm.js\");\n/* harmony import */ var jotai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jotai */ \"(ssr)/./node_modules/jotai/esm/react.mjs\");\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../state.js */ \"(ssr)/./node_modules/uvcanvas/dist/state.js\");\n/* __next_internal_client_entry_do_not_use__ Slides auto */ \n\n\n\n\n\nfunction SlidesInner({ mdx, components, children, style, className, ...rest }) {\n    const [currentPage, setCurrentPage] = (0,jotai__WEBPACK_IMPORTED_MODULE_2__.useAtom)(_state_js__WEBPACK_IMPORTED_MODULE_3__.p);\n    const [currentStep, setCurrentStep] = (0,jotai__WEBPACK_IMPORTED_MODULE_2__.useAtom)(_state_js__WEBPACK_IMPORTED_MODULE_3__.s);\n    const [currentMetadatas, setMetadatas] = (0,jotai__WEBPACK_IMPORTED_MODULE_2__.useAtom)(_state_js__WEBPACK_IMPORTED_MODULE_3__.m);\n    const setPage = (0,jotai__WEBPACK_IMPORTED_MODULE_2__.useSetAtom)(_state_js__WEBPACK_IMPORTED_MODULE_3__.a);\n    const metadatas = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const tempMetadata = mdx.map((item)=>({\n                ...item.metadata\n            }));\n        setMetadatas(tempMetadata);\n        return tempMetadata;\n    }, [\n        mdx\n    ]);\n    const metadata = metadatas[currentPage];\n    const step = metadata.step ?? 1;\n    const pageDown = ()=>{\n        setPage({\n            forward: false\n        });\n    };\n    const pageUp = ()=>{\n        setPage({\n            forward: true\n        });\n    };\n    const [isFullscreen, setFullscreen] = (0,jotai__WEBPACK_IMPORTED_MODULE_2__.useAtom)(_state_js__WEBPACK_IMPORTED_MODULE_3__.f);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isFullscreen) {\n            containerRef.current?.requestFullscreen().then(()=>{});\n        } else {\n            if (document.fullscreenElement) {\n                document.exitFullscreen().then(()=>{});\n            }\n        }\n    }, [\n        isFullscreen\n    ]);\n    const { width = 320, height, ref } = (0,react_resize_detector__WEBPACK_IMPORTED_MODULE_4__.useResizeDetector)();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const leftRef = (0,react_hotkeys_hook__WEBPACK_IMPORTED_MODULE_0__.useHotkeys)(\"left\", pageDown);\n    const rightRef = (0,react_hotkeys_hook__WEBPACK_IMPORTED_MODULE_0__.useHotkeys)(\"right\", pageUp);\n    (0,react_hotkeys_hook__WEBPACK_IMPORTED_MODULE_0__.useHotkeys)(\"f\", ()=>setFullscreen(!isFullscreen));\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        ref.current = containerRef.current;\n        leftRef.current = containerRef.current;\n        rightRef.current = containerRef.current;\n    }, [\n        ref,\n        leftRef,\n        rightRef\n    ]);\n    const styleVariables = {\n        \"--svw\": `${width * 1 / 100}px`\n    };\n    const constants = {\n        currentPage: currentPage,\n        totalPage: mdx.length,\n        currentStep: currentStep,\n        totalStep: step\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        ref: containerRef,\n        tabIndex: -1,\n        style: {\n            width: \"100%\",\n            overflow: \"hidden\",\n            userSelect: \"none\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            ...styleVariables,\n            ...style\n        },\n        className: \"uvc__slides \" + className,\n        ...rest\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        style: {\n            fontSize: `calc(2.25 * var(--svw))`,\n            lineHeight: \"1.5em\",\n            position: \"relative\",\n            zoom: \"1\",\n            overflow: \"hidden\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        style: {\n            position: \"absolute\",\n            left: \"0\",\n            top: \"0\",\n            width: \"100%\",\n            height: \"100%\",\n            padding: \"5%\"\n        }\n    }, mdx[currentPage]?.default({\n        components,\n        ...constants\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        style: {\n            position: \"absolute\",\n            left: \"0\",\n            top: \"0\",\n            width: \"100%\",\n            height: \"100%\"\n        },\n        onDoubleClick: ()=>setFullscreen(!isFullscreen)\n    }), children, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        style: {\n            pointerEvents: \"none\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_aspect_ratio__WEBPACK_IMPORTED_MODULE_5__.AspectRatio, {\n        ratio: 16 / 9\n    }))));\n}\nfunction Slides(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(jotai__WEBPACK_IMPORTED_MODULE_2__.Provider, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(SlidesInner, {\n        ...props\n    }));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uvcanvas/dist/components/slides/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uvcanvas/dist/components/tranquiluxe/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/uvcanvas/dist/components/tranquiluxe/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Tranquiluxe: () => (/* binding */ Tranquiluxe)\n/* harmony export */ });\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Renderer.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/extras/Triangle.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Program.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/math/Color.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Mesh.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Tranquiluxe auto */ \n\nvar styles = {\n    \"gradient-canvas\": \"uvc__gradient-canvas\"\n};\nvar vert = \"\\nattribute vec2 uv;\\nattribute vec2 position;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = vec4(position, 0, 1);\\n}\";\nvar frag = \"precision highp float;\\n\\nuniform float uTime;\\nuniform vec3 uColor;\\nuniform vec3 uResolution;\\n\\nvarying vec2 vUv;\\n\\nfloat colormap_red(float x) {\\n    if (x < 0.0) {\\n        return 54.0 / 255.0;\\n    } else if (x < 20049.0 / 82979.0) {\\n        return (829.79 * x + 54.51) / 255.0;\\n    } else {\\n        return 1.0;\\n    }\\n}\\n\\nfloat colormap_green(float x) {\\n    if (x < 20049.0 / 82979.0) {\\n        return 0.0;\\n    } else if (x < 327013.0 / 810990.0) {\\n        return (8546482679670.0 / 10875673217.0 * x - 2064961390770.0 / 10875673217.0) / 255.0;\\n    } else if (x <= 1.0) {\\n        return (103806720.0 / 483977.0 * x + 19607415.0 / 483977.0) / 255.0;\\n    } else {\\n        return 1.0;\\n    }\\n}\\n\\nfloat colormap_blue(float x) {\\n    if (x < 0.0) {\\n        return 54.0 / 255.0;\\n    } else if (x < 7249.0 / 82979.0) {\\n        return (829.79 * x + 54.51) / 255.0;\\n    } else if (x < 20049.0 / 82979.0) {\\n        return 127.0 / 255.0;\\n    } else if (x < 327013.0 / 810990.0) {\\n        return (792.02249341361393720147485376583 * x - 64.364790735602331034989206222672) / 255.0;\\n    } else {\\n        return 1.0;\\n    }\\n}\\n\\nvec4 colormap(float x) {\\n    return vec4(colormap_red(x), colormap_green(x), colormap_blue(x), 1.0);\\n}\\n\\n// https://iquilezles.org/articles/warp\\n/*float noise( in vec2 x )\\n{\\n    vec2 p = floor(x);\\n    vec2 f = fract(x);\\n    f = f*f*(3.0-2.0*f);\\n    float a = textureLod(iChannel0,(p+vec2(0.5,0.5))/256.0,0.0).x;\\n\tfloat b = textureLod(iChannel0,(p+vec2(1.5,0.5))/256.0,0.0).x;\\n\tfloat c = textureLod(iChannel0,(p+vec2(0.5,1.5))/256.0,0.0).x;\\n\tfloat d = textureLod(iChannel0,(p+vec2(1.5,1.5))/256.0,0.0).x;\\n    return mix(mix( a, b,f.x), mix( c, d,f.x),f.y);\\n}*/\\n\\n\\nfloat rand(vec2 n) {\\n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\\n}\\n\\nfloat noise(vec2 p){\\n    vec2 ip = floor(p);\\n    vec2 u = fract(p);\\n    u = u*u*(3.0-2.0*u);\\n\\n    float res = mix(\\n    mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\\n    mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\\n    return res*res;\\n}\\n\\nconst mat2 mtx = mat2( 0.80,  0.60, -0.60,  0.80 );\\n\\nfloat fbm( vec2 p )\\n{\\n    float f = 0.0;\\n    float time = uTime * .25;\\n\\n    f += 0.500000*noise( p + time  ); p = mtx*p*2.02;\\n    f += 0.031250*noise( p ); p = mtx*p*2.01;\\n    f += 0.250000*noise( p ); p = mtx*p*2.03;\\n    f += 0.125000*noise( p ); p = mtx*p*2.01;\\n    f += 0.062500*noise( p ); p = mtx*p*2.04;\\n    f += 0.015625*noise( p + sin(time) );\\n\\n    return f/0.96875;\\n}\\n\\nfloat pattern( vec2 p )\\n{\\n    return fbm( p + fbm( p + fbm( p ) ) );\\n}\\n\\nvoid main() {\\n\\n\\n    vec2 uv = vUv.xy*uResolution.xy/uResolution.x;\\n    float shade = pattern(uv);\\n    gl_FragColor = vec4(colormap(shade).rgb, shade);\\n\\n\\n}\";\nfunction Tranquiluxe(props) {\n    const ctnDom = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { color, ...rest } = props;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!ctnDom.current) {\n            return;\n        }\n        const ctn = ctnDom.current;\n        const renderer = new ogl__WEBPACK_IMPORTED_MODULE_1__.Renderer();\n        const gl = renderer.gl;\n        gl.clearColor(1, 1, 1, 1);\n        function resize() {\n            const scale = 1;\n            // camera.perspective({\n            //   aspect: gl.canvas.width / gl.canvas.height,\n            // });\n            renderer.setSize(ctn.offsetWidth * scale, ctn.offsetHeight * scale);\n        }\n        window.addEventListener(\"resize\", resize, false);\n        resize();\n        const geometry = new ogl__WEBPACK_IMPORTED_MODULE_2__.Triangle(gl);\n        const program = new ogl__WEBPACK_IMPORTED_MODULE_3__.Program(gl, {\n            vertex: vert,\n            fragment: frag,\n            uniforms: {\n                uTime: {\n                    value: 0\n                },\n                uColor: {\n                    value: new ogl__WEBPACK_IMPORTED_MODULE_4__.Color(...color || [\n                        0.3,\n                        0.2,\n                        0.5\n                    ])\n                },\n                uResolution: {\n                    value: new ogl__WEBPACK_IMPORTED_MODULE_4__.Color(gl.canvas.width, gl.canvas.height, gl.canvas.width / gl.canvas.height)\n                }\n            }\n        });\n        const mesh = new ogl__WEBPACK_IMPORTED_MODULE_5__.Mesh(gl, {\n            geometry,\n            program\n        });\n        let animateId;\n        animateId = requestAnimationFrame(update);\n        function update(t) {\n            animateId = requestAnimationFrame(update);\n            program.uniforms.uTime.value = t * 0.001;\n            // Don't need a camera if camera uniforms aren't required\n            renderer.render({\n                scene: mesh\n            });\n        }\n        ctn.appendChild(gl.canvas);\n        return ()=>{\n            cancelAnimationFrame(animateId);\n            window.removeEventListener(\"resize\", resize);\n            ctn.removeChild(gl.canvas);\n            gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n        };\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: ctnDom,\n        className: styles.gradientCanvas,\n        style: {\n            width: \"100%\",\n            height: \"100%\"\n        },\n        ...rest\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXZjYW52YXMvZGlzdC9jb21wb25lbnRzL3RyYW5xdWlsdXhlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7aUVBQytEO0FBQ2Q7QUFFakQsSUFBSVEsU0FBUztJQUFDLG1CQUFrQjtBQUFzQjtBQUV0RCxJQUFJQyxPQUFPO0FBRVgsSUFBSUMsT0FBTztBQUVYLFNBQVNDLFlBQVlDLEtBQUs7SUFDdEIsTUFBTUMsU0FBU1AsNkNBQU1BLENBQUM7SUFDdEIsTUFBTSxFQUFFUSxLQUFLLEVBQUUsR0FBR0MsTUFBTSxHQUFHSDtJQUMzQkwsZ0RBQVNBLENBQUM7UUFDTixJQUFJLENBQUNNLE9BQU9HLE9BQU8sRUFBRTtZQUNqQjtRQUNKO1FBQ0EsTUFBTUMsTUFBTUosT0FBT0csT0FBTztRQUMxQixNQUFNRSxXQUFXLElBQUlsQix5Q0FBUUE7UUFDN0IsTUFBTW1CLEtBQUtELFNBQVNDLEVBQUU7UUFDdEJBLEdBQUdDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsR0FBRztRQUN2QixTQUFTQztZQUNMLE1BQU1DLFFBQVE7WUFDZCx1QkFBdUI7WUFDdkIsZ0RBQWdEO1lBQ2hELE1BQU07WUFDTkosU0FBU0ssT0FBTyxDQUFDTixJQUFJTyxXQUFXLEdBQUdGLE9BQU9MLElBQUlRLFlBQVksR0FBR0g7UUFDakU7UUFDQUksT0FBT0MsZ0JBQWdCLENBQUMsVUFBVU4sUUFBUTtRQUMxQ0E7UUFDQSxNQUFNTyxXQUFXLElBQUkzQix5Q0FBUUEsQ0FBQ2tCO1FBQzlCLE1BQU1VLFVBQVUsSUFBSTNCLHdDQUFPQSxDQUFDaUIsSUFBSTtZQUM1QlcsUUFBUXJCO1lBQ1JzQixVQUFVckI7WUFDVnNCLFVBQVU7Z0JBQ05DLE9BQU87b0JBQUVDLE9BQU87Z0JBQUU7Z0JBQ2xCQyxRQUFRO29CQUFFRCxPQUFPLElBQUkvQixzQ0FBS0EsSUFBS1csU0FBUzt3QkFBQzt3QkFBSzt3QkFBSztxQkFBSTtnQkFBRztnQkFDMURzQixhQUFhO29CQUNURixPQUFPLElBQUkvQixzQ0FBS0EsQ0FBQ2dCLEdBQUdrQixNQUFNLENBQUNDLEtBQUssRUFBRW5CLEdBQUdrQixNQUFNLENBQUNFLE1BQU0sRUFBRXBCLEdBQUdrQixNQUFNLENBQUNDLEtBQUssR0FBR25CLEdBQUdrQixNQUFNLENBQUNFLE1BQU07Z0JBQzFGO1lBQ0o7UUFDSjtRQUNBLE1BQU1DLE9BQU8sSUFBSXBDLHFDQUFJQSxDQUFDZSxJQUFJO1lBQUVTO1lBQVVDO1FBQVE7UUFDOUMsSUFBSVk7UUFDSkEsWUFBWUMsc0JBQXNCQztRQUNsQyxTQUFTQSxPQUFPQyxDQUFDO1lBQ2JILFlBQVlDLHNCQUFzQkM7WUFDbENkLFFBQVFHLFFBQVEsQ0FBQ0MsS0FBSyxDQUFDQyxLQUFLLEdBQUdVLElBQUk7WUFDbkMseURBQXlEO1lBQ3pEMUIsU0FBUzJCLE1BQU0sQ0FBQztnQkFBRUMsT0FBT047WUFBSztRQUNsQztRQUNBdkIsSUFBSThCLFdBQVcsQ0FBQzVCLEdBQUdrQixNQUFNO1FBQ3pCLE9BQU87WUFDSFcscUJBQXFCUDtZQUNyQmYsT0FBT3VCLG1CQUFtQixDQUFDLFVBQVU1QjtZQUNyQ0osSUFBSWlDLFdBQVcsQ0FBQy9CLEdBQUdrQixNQUFNO1lBQ3pCbEIsR0FBR2dDLFlBQVksQ0FBQyx1QkFBdUJDO1FBQzNDO0lBQ0osR0FBRyxFQUFFO0lBQ0wscUJBQVEvQyxnREFBbUIsQ0FBQyxPQUFPO1FBQUVpRCxLQUFLekM7UUFBUTBDLFdBQVcvQyxPQUFPZ0QsY0FBYztRQUFFQyxPQUFPO1lBQ25GbkIsT0FBTztZQUNQQyxRQUFRO1FBQ1o7UUFBRyxHQUFHeEIsSUFBSTtJQUFDO0FBQ25CO0FBRXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29sYW5hLWxpcXVpZGl0eS1wb29sLy4vbm9kZV9tb2R1bGVzL3V2Y2FudmFzL2Rpc3QvY29tcG9uZW50cy90cmFucXVpbHV4ZS9pbmRleC5qcz8zZmVkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiXG5pbXBvcnQgeyBSZW5kZXJlciwgVHJpYW5nbGUsIFByb2dyYW0sIENvbG9yLCBNZXNoIH0gZnJvbSAnb2dsJztcbmltcG9ydCBSZWFjdCwgeyB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxudmFyIHN0eWxlcyA9IHtcImdyYWRpZW50LWNhbnZhc1wiOlwidXZjX19ncmFkaWVudC1jYW52YXNcIn07XG5cbnZhciB2ZXJ0ID0gXCJcXG5hdHRyaWJ1dGUgdmVjMiB1djtcXG5hdHRyaWJ1dGUgdmVjMiBwb3NpdGlvbjtcXG5cXG52YXJ5aW5nIHZlYzIgdlV2O1xcblxcbnZvaWQgbWFpbigpIHtcXG4gICAgdlV2ID0gdXY7XFxuICAgIGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMCwgMSk7XFxufVwiO1xuXG52YXIgZnJhZyA9IFwicHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcblxcbnVuaWZvcm0gZmxvYXQgdVRpbWU7XFxudW5pZm9ybSB2ZWMzIHVDb2xvcjtcXG51bmlmb3JtIHZlYzMgdVJlc29sdXRpb247XFxuXFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG5mbG9hdCBjb2xvcm1hcF9yZWQoZmxvYXQgeCkge1xcbiAgICBpZiAoeCA8IDAuMCkge1xcbiAgICAgICAgcmV0dXJuIDU0LjAgLyAyNTUuMDtcXG4gICAgfSBlbHNlIGlmICh4IDwgMjAwNDkuMCAvIDgyOTc5LjApIHtcXG4gICAgICAgIHJldHVybiAoODI5Ljc5ICogeCArIDU0LjUxKSAvIDI1NS4wO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgICAgcmV0dXJuIDEuMDtcXG4gICAgfVxcbn1cXG5cXG5mbG9hdCBjb2xvcm1hcF9ncmVlbihmbG9hdCB4KSB7XFxuICAgIGlmICh4IDwgMjAwNDkuMCAvIDgyOTc5LjApIHtcXG4gICAgICAgIHJldHVybiAwLjA7XFxuICAgIH0gZWxzZSBpZiAoeCA8IDMyNzAxMy4wIC8gODEwOTkwLjApIHtcXG4gICAgICAgIHJldHVybiAoODU0NjQ4MjY3OTY3MC4wIC8gMTA4NzU2NzMyMTcuMCAqIHggLSAyMDY0OTYxMzkwNzcwLjAgLyAxMDg3NTY3MzIxNy4wKSAvIDI1NS4wO1xcbiAgICB9IGVsc2UgaWYgKHggPD0gMS4wKSB7XFxuICAgICAgICByZXR1cm4gKDEwMzgwNjcyMC4wIC8gNDgzOTc3LjAgKiB4ICsgMTk2MDc0MTUuMCAvIDQ4Mzk3Ny4wKSAvIDI1NS4wO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgICAgcmV0dXJuIDEuMDtcXG4gICAgfVxcbn1cXG5cXG5mbG9hdCBjb2xvcm1hcF9ibHVlKGZsb2F0IHgpIHtcXG4gICAgaWYgKHggPCAwLjApIHtcXG4gICAgICAgIHJldHVybiA1NC4wIC8gMjU1LjA7XFxuICAgIH0gZWxzZSBpZiAoeCA8IDcyNDkuMCAvIDgyOTc5LjApIHtcXG4gICAgICAgIHJldHVybiAoODI5Ljc5ICogeCArIDU0LjUxKSAvIDI1NS4wO1xcbiAgICB9IGVsc2UgaWYgKHggPCAyMDA0OS4wIC8gODI5NzkuMCkge1xcbiAgICAgICAgcmV0dXJuIDEyNy4wIC8gMjU1LjA7XFxuICAgIH0gZWxzZSBpZiAoeCA8IDMyNzAxMy4wIC8gODEwOTkwLjApIHtcXG4gICAgICAgIHJldHVybiAoNzkyLjAyMjQ5MzQxMzYxMzkzNzIwMTQ3NDg1Mzc2NTgzICogeCAtIDY0LjM2NDc5MDczNTYwMjMzMTAzNDk4OTIwNjIyMjY3MikgLyAyNTUuMDtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIHJldHVybiAxLjA7XFxuICAgIH1cXG59XFxuXFxudmVjNCBjb2xvcm1hcChmbG9hdCB4KSB7XFxuICAgIHJldHVybiB2ZWM0KGNvbG9ybWFwX3JlZCh4KSwgY29sb3JtYXBfZ3JlZW4oeCksIGNvbG9ybWFwX2JsdWUoeCksIDEuMCk7XFxufVxcblxcbi8vIGh0dHBzOi8vaXF1aWxlemxlcy5vcmcvYXJ0aWNsZXMvd2FycFxcbi8qZmxvYXQgbm9pc2UoIGluIHZlYzIgeCApXFxue1xcbiAgICB2ZWMyIHAgPSBmbG9vcih4KTtcXG4gICAgdmVjMiBmID0gZnJhY3QoeCk7XFxuICAgIGYgPSBmKmYqKDMuMC0yLjAqZik7XFxuICAgIGZsb2F0IGEgPSB0ZXh0dXJlTG9kKGlDaGFubmVsMCwocCt2ZWMyKDAuNSwwLjUpKS8yNTYuMCwwLjApLng7XFxuXFx0ZmxvYXQgYiA9IHRleHR1cmVMb2QoaUNoYW5uZWwwLChwK3ZlYzIoMS41LDAuNSkpLzI1Ni4wLDAuMCkueDtcXG5cXHRmbG9hdCBjID0gdGV4dHVyZUxvZChpQ2hhbm5lbDAsKHArdmVjMigwLjUsMS41KSkvMjU2LjAsMC4wKS54O1xcblxcdGZsb2F0IGQgPSB0ZXh0dXJlTG9kKGlDaGFubmVsMCwocCt2ZWMyKDEuNSwxLjUpKS8yNTYuMCwwLjApLng7XFxuICAgIHJldHVybiBtaXgobWl4KCBhLCBiLGYueCksIG1peCggYywgZCxmLngpLGYueSk7XFxufSovXFxuXFxuXFxuZmxvYXQgcmFuZCh2ZWMyIG4pIHtcXG4gICAgcmV0dXJuIGZyYWN0KHNpbihkb3QobiwgdmVjMigxMi45ODk4LCA0LjE0MTQpKSkgKiA0Mzc1OC41NDUzKTtcXG59XFxuXFxuZmxvYXQgbm9pc2UodmVjMiBwKXtcXG4gICAgdmVjMiBpcCA9IGZsb29yKHApO1xcbiAgICB2ZWMyIHUgPSBmcmFjdChwKTtcXG4gICAgdSA9IHUqdSooMy4wLTIuMCp1KTtcXG5cXG4gICAgZmxvYXQgcmVzID0gbWl4KFxcbiAgICBtaXgocmFuZChpcCkscmFuZChpcCt2ZWMyKDEuMCwwLjApKSx1LngpLFxcbiAgICBtaXgocmFuZChpcCt2ZWMyKDAuMCwxLjApKSxyYW5kKGlwK3ZlYzIoMS4wLDEuMCkpLHUueCksdS55KTtcXG4gICAgcmV0dXJuIHJlcypyZXM7XFxufVxcblxcbmNvbnN0IG1hdDIgbXR4ID0gbWF0MiggMC44MCwgIDAuNjAsIC0wLjYwLCAgMC44MCApO1xcblxcbmZsb2F0IGZibSggdmVjMiBwIClcXG57XFxuICAgIGZsb2F0IGYgPSAwLjA7XFxuICAgIGZsb2F0IHRpbWUgPSB1VGltZSAqIC4yNTtcXG5cXG4gICAgZiArPSAwLjUwMDAwMCpub2lzZSggcCArIHRpbWUgICk7IHAgPSBtdHgqcCoyLjAyO1xcbiAgICBmICs9IDAuMDMxMjUwKm5vaXNlKCBwICk7IHAgPSBtdHgqcCoyLjAxO1xcbiAgICBmICs9IDAuMjUwMDAwKm5vaXNlKCBwICk7IHAgPSBtdHgqcCoyLjAzO1xcbiAgICBmICs9IDAuMTI1MDAwKm5vaXNlKCBwICk7IHAgPSBtdHgqcCoyLjAxO1xcbiAgICBmICs9IDAuMDYyNTAwKm5vaXNlKCBwICk7IHAgPSBtdHgqcCoyLjA0O1xcbiAgICBmICs9IDAuMDE1NjI1Km5vaXNlKCBwICsgc2luKHRpbWUpICk7XFxuXFxuICAgIHJldHVybiBmLzAuOTY4NzU7XFxufVxcblxcbmZsb2F0IHBhdHRlcm4oIHZlYzIgcCApXFxue1xcbiAgICByZXR1cm4gZmJtKCBwICsgZmJtKCBwICsgZmJtKCBwICkgKSApO1xcbn1cXG5cXG52b2lkIG1haW4oKSB7XFxuXFxuXFxuICAgIHZlYzIgdXYgPSB2VXYueHkqdVJlc29sdXRpb24ueHkvdVJlc29sdXRpb24ueDtcXG4gICAgZmxvYXQgc2hhZGUgPSBwYXR0ZXJuKHV2KTtcXG4gICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChjb2xvcm1hcChzaGFkZSkucmdiLCBzaGFkZSk7XFxuXFxuXFxufVwiO1xuXG5mdW5jdGlvbiBUcmFucXVpbHV4ZShwcm9wcykge1xuICAgIGNvbnN0IGN0bkRvbSA9IHVzZVJlZihudWxsKTtcbiAgICBjb25zdCB7IGNvbG9yLCAuLi5yZXN0IH0gPSBwcm9wcztcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWN0bkRvbS5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3RuID0gY3RuRG9tLmN1cnJlbnQ7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKCk7XG4gICAgICAgIGNvbnN0IGdsID0gcmVuZGVyZXIuZ2w7XG4gICAgICAgIGdsLmNsZWFyQ29sb3IoMSwgMSwgMSwgMSk7XG4gICAgICAgIGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gMTtcbiAgICAgICAgICAgIC8vIGNhbWVyYS5wZXJzcGVjdGl2ZSh7XG4gICAgICAgICAgICAvLyAgIGFzcGVjdDogZ2wuY2FudmFzLndpZHRoIC8gZ2wuY2FudmFzLmhlaWdodCxcbiAgICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgICAgcmVuZGVyZXIuc2V0U2l6ZShjdG4ub2Zmc2V0V2lkdGggKiBzY2FsZSwgY3RuLm9mZnNldEhlaWdodCAqIHNjYWxlKTtcbiAgICAgICAgfVxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCByZXNpemUsIGZhbHNlKTtcbiAgICAgICAgcmVzaXplKCk7XG4gICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRyaWFuZ2xlKGdsKTtcbiAgICAgICAgY29uc3QgcHJvZ3JhbSA9IG5ldyBQcm9ncmFtKGdsLCB7XG4gICAgICAgICAgICB2ZXJ0ZXg6IHZlcnQsXG4gICAgICAgICAgICBmcmFnbWVudDogZnJhZyxcbiAgICAgICAgICAgIHVuaWZvcm1zOiB7XG4gICAgICAgICAgICAgICAgdVRpbWU6IHsgdmFsdWU6IDAgfSxcbiAgICAgICAgICAgICAgICB1Q29sb3I6IHsgdmFsdWU6IG5ldyBDb2xvciguLi4oY29sb3IgfHwgWzAuMywgMC4yLCAwLjVdKSkgfSxcbiAgICAgICAgICAgICAgICB1UmVzb2x1dGlvbjoge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IENvbG9yKGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCwgZ2wuY2FudmFzLndpZHRoIC8gZ2wuY2FudmFzLmhlaWdodCksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBtZXNoID0gbmV3IE1lc2goZ2wsIHsgZ2VvbWV0cnksIHByb2dyYW0gfSk7XG4gICAgICAgIGxldCBhbmltYXRlSWQ7XG4gICAgICAgIGFuaW1hdGVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpO1xuICAgICAgICBmdW5jdGlvbiB1cGRhdGUodCkge1xuICAgICAgICAgICAgYW5pbWF0ZUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZSk7XG4gICAgICAgICAgICBwcm9ncmFtLnVuaWZvcm1zLnVUaW1lLnZhbHVlID0gdCAqIDAuMDAxO1xuICAgICAgICAgICAgLy8gRG9uJ3QgbmVlZCBhIGNhbWVyYSBpZiBjYW1lcmEgdW5pZm9ybXMgYXJlbid0IHJlcXVpcmVkXG4gICAgICAgICAgICByZW5kZXJlci5yZW5kZXIoeyBzY2VuZTogbWVzaCB9KTtcbiAgICAgICAgfVxuICAgICAgICBjdG4uYXBwZW5kQ2hpbGQoZ2wuY2FudmFzKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGVJZCk7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCByZXNpemUpO1xuICAgICAgICAgICAgY3RuLnJlbW92ZUNoaWxkKGdsLmNhbnZhcyk7XG4gICAgICAgICAgICBnbC5nZXRFeHRlbnNpb24oXCJXRUJHTF9sb3NlX2NvbnRleHRcIik/Lmxvc2VDb250ZXh0KCk7XG4gICAgICAgIH07XG4gICAgfSwgW10pO1xuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHJlZjogY3RuRG9tLCBjbGFzc05hbWU6IHN0eWxlcy5ncmFkaWVudENhbnZhcywgc3R5bGU6IHtcbiAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgIH0sIC4uLnJlc3QgfSkpO1xufVxuXG5leHBvcnQgeyBUcmFucXVpbHV4ZSB9O1xuIl0sIm5hbWVzIjpbIlJlbmRlcmVyIiwiVHJpYW5nbGUiLCJQcm9ncmFtIiwiQ29sb3IiLCJNZXNoIiwiUmVhY3QiLCJ1c2VSZWYiLCJ1c2VFZmZlY3QiLCJzdHlsZXMiLCJ2ZXJ0IiwiZnJhZyIsIlRyYW5xdWlsdXhlIiwicHJvcHMiLCJjdG5Eb20iLCJjb2xvciIsInJlc3QiLCJjdXJyZW50IiwiY3RuIiwicmVuZGVyZXIiLCJnbCIsImNsZWFyQ29sb3IiLCJyZXNpemUiLCJzY2FsZSIsInNldFNpemUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJnZW9tZXRyeSIsInByb2dyYW0iLCJ2ZXJ0ZXgiLCJmcmFnbWVudCIsInVuaWZvcm1zIiwidVRpbWUiLCJ2YWx1ZSIsInVDb2xvciIsInVSZXNvbHV0aW9uIiwiY2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJtZXNoIiwiYW5pbWF0ZUlkIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidXBkYXRlIiwidCIsInJlbmRlciIsInNjZW5lIiwiYXBwZW5kQ2hpbGQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVDaGlsZCIsImdldEV4dGVuc2lvbiIsImxvc2VDb250ZXh0IiwiY3JlYXRlRWxlbWVudCIsInJlZiIsImNsYXNzTmFtZSIsImdyYWRpZW50Q2FudmFzIiwic3R5bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uvcanvas/dist/components/tranquiluxe/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uvcanvas/dist/components/velustro/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/uvcanvas/dist/components/velustro/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Velustro: () => (/* binding */ Velustro)\n/* harmony export */ });\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Renderer.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/extras/Triangle.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Program.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/math/Color.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Mesh.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Velustro auto */ \n\nvar styles = {\n    \"gradient-canvas\": \"uvc__gradient-canvas\"\n};\nvar vert = \"\\nattribute vec2 uv;\\nattribute vec2 position;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = vec4(position, 0, 1);\\n}\";\nvar frag = \"\\nprecision highp float;\\n\\nuniform float uTime;\\nuniform vec3 uColor;\\nuniform vec3 uResolution;\\n\\nvarying vec2 vUv;\\n\\n\\nconst float PI = 3.14159265359;\\n\\nconst float barWidth = 0.002;\\nconst float slideValY = 0.5;\\nconst float slideValX = 0.5;\\nconst int ITERATIONS = 4;\\n\\n\\n// *** Change these to suit your range of random numbers..\\n\\nconst float HASHSCALE1 = .1031;\\nconst vec3 HASHSCALE3 = vec3(.1031, .1030, .0973);\\nconst vec4 HASHSCALE4 = vec4(.1031, .1030, .0973, .1099);\\n\\n\\n\\n//----------------------------------------------------------------------------------------\\n//  1 out, 1 in...\\nfloat hash11(float p)\\n{\\n    vec3 p3 = fract(vec3(p) * HASHSCALE1);\\n    p3 += dot(p3, p3.yzx + 19.19);\\n    return fract((p3.x + p3.y) * p3.z);\\n}\\n\\n//----------------------------------------------------------------------------------------\\n//  1 out, 2 in...\\nfloat hash12(vec2 p)\\n{\\n    vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\\n    p3 += dot(p3, p3.yzx + 19.19);\\n    return fract((p3.x + p3.y) * p3.z);\\n}\\n\\n//----------------------------------------------------------------------------------------\\n//  1 out, 3 in...\\nfloat hash13(vec3 p3)\\n{\\n    p3  = fract(p3 * HASHSCALE1);\\n    p3 += dot(p3, p3.yzx + 19.19);\\n    return fract((p3.x + p3.y) * p3.z);\\n}\\n\\n//----------------------------------------------------------------------------------------\\n//  2 out, 1 in...\\nvec2 hash21(float p)\\n{\\n    vec3 p3 = fract(vec3(p) * HASHSCALE3);\\n    p3 += dot(p3, p3.yzx + 19.19);\\n    return fract((p3.xx+p3.yz)*p3.zy);\\n\\n}\\n\\n//----------------------------------------------------------------------------------------\\n///  2 out, 2 in...\\nvec2 hash22(vec2 p)\\n{\\n    vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\\n    p3 += dot(p3, p3.yzx+19.19);\\n    return fract((p3.xx+p3.yz)*p3.zy);\\n\\n}\\n\\n//----------------------------------------------------------------------------------------\\n///  2 out, 3 in...\\nvec2 hash23(vec3 p3)\\n{\\n    p3 = fract(p3 * HASHSCALE3);\\n    p3 += dot(p3, p3.yzx+19.19);\\n    return fract((p3.xx+p3.yz)*p3.zy);\\n}\\n\\n//----------------------------------------------------------------------------------------\\n//  3 out, 1 in...\\nvec3 hash31(float p)\\n{\\n    vec3 p3 = fract(vec3(p) * HASHSCALE3);\\n    p3 += dot(p3, p3.yzx+19.19);\\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\\n}\\n\\n\\n//----------------------------------------------------------------------------------------\\n///  3 out, 2 in...\\nvec3 hash32(vec2 p)\\n{\\n    vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\\n    p3 += dot(p3, p3.yxz+19.19);\\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\\n}\\n\\n//----------------------------------------------------------------------------------------\\n///  3 out, 3 in...\\nvec3 hash33(vec3 p3)\\n{\\n    p3 = fract(p3 * HASHSCALE3);\\n    p3 += dot(p3, p3.yxz+19.19);\\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\\n\\n}\\n\\n//----------------------------------------------------------------------------------------\\n// 4 out, 1 in...\\nvec4 hash41(float p)\\n{\\n    vec4 p4 = fract(vec4(p) * HASHSCALE4);\\n    p4 += dot(p4, p4.wzxy+19.19);\\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\\n\\n}\\n\\n//----------------------------------------------------------------------------------------\\n// 4 out, 2 in...\\nvec4 hash42(vec2 p)\\n{\\n    vec4 p4 = fract(vec4(p.xyxy) * HASHSCALE4);\\n    p4 += dot(p4, p4.wzxy+19.19);\\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\\n\\n}\\n\\n//----------------------------------------------------------------------------------------\\n// 4 out, 3 in...\\nvec4 hash43(vec3 p)\\n{\\n    vec4 p4 = fract(vec4(p.xyzx)  * HASHSCALE4);\\n    p4 += dot(p4, p4.wzxy+19.19);\\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\\n}\\n\\n//----------------------------------------------------------------------------------------\\n// 4 out, 4 in...\\nvec4 hash44(vec4 p4)\\n{\\n    p4 = fract(p4  * HASHSCALE4);\\n    p4 += dot(p4, p4.wzxy+19.19);\\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\\n}\\n\\n\\nconst float arrow_density = 4.5;\\nconst float arrow_length = .45;\\n\\nconst int iterationTime1 = 20;\\nconst int iterationTime2 = 20;\\nconst int vector_field_mode = 0;\\nconst float scale = 6.;\\n\\nconst float velocity_x = 0.1;\\nconst float velocity_y = 0.2;\\n\\nconst float mode_2_speed = 2.5;\\nconst float mode_1_detail = 200.;\\nconst float mode_1_twist = 50.;\\n\\nconst bool isArraw = true;\\n\\nconst vec3 luma = vec3(0.2126, 0.7152, 0.0722);\\n\\n\\nfloat f(in vec2 p)\\n{\\n    return sin(p.x+sin(p.y+uTime*velocity_x)) * sin(p.y*p.x*0.1+uTime*velocity_y);\\n}\\n\\n\\nstruct Field {\\n    vec2 vel;\\n    vec2 pos;\\n};\\n\\n//---------------Field to visualize defined here-----------------\\n\\nField field(in vec2 p,in int mode)\\n{\\n    Field field;\\n    if(mode == 0){\\n        vec2 ep = vec2(0.05,0.);\\n        vec2 rz= vec2(0);\\n        //# centered grid sampling\\n        for( int i=0; i<iterationTime1; i++ )\\n        {\\n            float t0 = f(p);\\n            float t1 = f(p + ep.xy);\\n            float t2 = f(p + ep.yx);\\n            vec2 g = vec2((t1-t0), (t2-t0))/ep.xx;\\n            vec2 t = vec2(-g.y,g.x);\\n\\n            //# need update 'p' for next iteration,but give it some change.\\n            p += (mode_1_twist*0.01)*t + g*(1./mode_1_detail);\\n            p.x = p.x + sin( uTime*mode_2_speed/10.)/10.;\\n            p.y = p.y + cos(uTime*mode_2_speed/10.)/10.;\\n            rz= g;\\n        }\\n        field.vel = rz;\\n        return field;\\n    }\\n\\n    if(mode == 1){\\n        vec2 ep = vec2(0.05,0.);\\n        vec2 rz= vec2(0);\\n        //# centered grid sampling\\n        for( int i=0; i<iterationTime1; i++ )\\n        {\\n            float t0 = f(p);\\n            float t1 = f(p + ep.xy);\\n            float t2 = f(p + ep.yx);\\n            vec2 g = vec2((t1-t0), (t2-t0))/ep.xx;\\n            vec2 t = vec2(-g.y,g.x);\\n\\n            //# need update 'p' for next iteration,but give it some change.\\n            p += (mode_1_twist*0.01)*t + g*(1./mode_1_detail);\\n            p.x = p.x + sin( uTime*mode_2_speed/10.)/10.;\\n            p.y = p.y + cos(uTime*mode_2_speed/10.)/10.;\\n            rz= g;\\n        }\\n\\n        field.vel = rz;\\n        // add curved effect into curved mesh\\n        for(int i=1; i<iterationTime2; i++){\\n            //# try comment these 2 lines,will give more edge effect\\n            p.x+=0.3/float(i)*sin(float(i)*3.*p.y+uTime*mode_2_speed) + 0.5;\\n            p.y+=0.3/float(i)*cos(float(i)*3.*p.x + uTime*mode_2_speed) + 0.5;\\n        }\\n        field.pos = p;\\n        return field;\\n    }\\n\\n    return field;\\n}\\n//---------------------------------------------------------------\\n\\nfloat segm(in vec2 p, in vec2 a, in vec2 b) //from iq\\n{\\n    vec2 pa = p - a;\\n    vec2 ba = b - a;\\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0., 1.);\\n    return length(pa - ba*h)*20.*arrow_density;\\n}\\n\\nfloat fieldviz(in vec2 p,in int mode)\\n{\\n    vec2 ip = floor(p*arrow_density)/arrow_density + .5/arrow_density;\\n    vec2 t = field(ip,mode).vel;\\n    float m = min(0.1,pow(length(t),0.5)*(arrow_length/arrow_density));\\n    vec2 b = normalize(t)*m;\\n    float rz = segm(p, ip, ip+b);\\n    vec2 prp = (vec2(-b.y,b.x));\\n    rz = min(rz,segm(p, ip+b, ip+b*0.65+prp*0.3));\\n    return clamp(min(rz,segm(p, ip+b, ip+b*0.65-prp*0.3)),0.,1.);\\n}\\n\\n\\nvec3 getRGB(in Field fld,in int mode){\\n\\n    vec3 col = vec3(0., 0., 0.);\\n\\n    if(mode == 0){\\n        vec2 p = fld.vel;\\n        col = vec3(p * 0.5 + 0.5, 1.5);\\n    }\\n\\n    if(mode == 1){\\n        vec2 p = fld.pos;\\n        float r=cos(p.x+p.y+1.)*.5+.5;\\n        float g=sin(p.x+p.y+1.)*.5+.5;\\n        float b=(sin(p.x+p.y)+cos(p.x+p.y))*.3+.5;\\n        col = sin(vec3(-.3,0.1,0.5)+p.x-p.y)*0.65+0.35;\\n        col = vec3(r,g,b);\\n    }\\n\\n    return col;\\n\\n}\\n\\nvoid main() {\\n\\n\\n    vec2 p = vUv.xy - 0.5;\\n    p.x *= uResolution.x / uResolution.y;\\n    p *= scale;\\n\\n    vec2 uv = vUv.xy;\\n    vec3 col;\\n    float fviz;\\n\\n    int vector_mode = 0;\\n    Field fld = field(p,vector_mode);\\n    col = getRGB(fld,vector_mode) * 0.85;\\n    gl_FragColor = vec4(col,1.0);\\n\\n\\n}\";\nfunction Velustro(props) {\n    const ctnDom = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { uColor, ...rest } = props;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!ctnDom.current) {\n            return;\n        }\n        const ctn = ctnDom.current;\n        const renderer = new ogl__WEBPACK_IMPORTED_MODULE_1__.Renderer();\n        const gl = renderer.gl;\n        gl.clearColor(1, 1, 1, 1);\n        function resize() {\n            const scale = 1;\n            // camera.perspective({\n            //   aspect: gl.canvas.width / gl.canvas.height,\n            // });\n            renderer.setSize(ctn.offsetWidth * scale, ctn.offsetHeight * scale);\n        }\n        window.addEventListener(\"resize\", resize, false);\n        resize();\n        // Rather than using a plane (two triangles) to cover the viewport here is a\n        // triangle that includes -1 to 1 range for 'position', and 0 to 1 range for 'uv'.\n        // Excess will be out of the viewport.\n        //         position                uv\n        //      (-1, 3)                  (0, 2)\n        //         |\\                      |\\\n        //         |__\\(1, 1)              |__\\(1, 1)\n        //         |__|_\\                  |__|_\\\n        //   (-1, -1)   (3, -1)        (0, 0)   (2, 0)\n        const geometry = new ogl__WEBPACK_IMPORTED_MODULE_2__.Triangle(gl);\n        const program = new ogl__WEBPACK_IMPORTED_MODULE_3__.Program(gl, {\n            vertex: vert,\n            fragment: frag,\n            uniforms: {\n                uTime: {\n                    value: 0\n                },\n                uColor: {\n                    value: new ogl__WEBPACK_IMPORTED_MODULE_4__.Color(...uColor || [\n                        0.3,\n                        0.2,\n                        0.5\n                    ])\n                },\n                uResolution: {\n                    value: new ogl__WEBPACK_IMPORTED_MODULE_4__.Color(gl.canvas.width, gl.canvas.height, gl.canvas.width / gl.canvas.height)\n                }\n            }\n        });\n        const mesh = new ogl__WEBPACK_IMPORTED_MODULE_5__.Mesh(gl, {\n            geometry,\n            program\n        });\n        let animateId;\n        animateId = requestAnimationFrame(update);\n        function update(t) {\n            animateId = requestAnimationFrame(update);\n            program.uniforms.uTime.value = t * 0.001;\n            // Don't need a camera if camera uniforms aren't required\n            renderer.render({\n                scene: mesh\n            });\n        }\n        ctn.appendChild(gl.canvas);\n        return ()=>{\n            cancelAnimationFrame(animateId);\n            window.removeEventListener(\"resize\", resize);\n            ctn.removeChild(gl.canvas);\n            gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n        };\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: ctnDom,\n        className: styles.gradientCanvas,\n        style: {\n            width: \"100%\",\n            height: \"100%\"\n        },\n        ...rest\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uvcanvas/dist/components/velustro/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uvcanvas/dist/components/venturo/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/uvcanvas/dist/components/venturo/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Venturo: () => (/* binding */ Venturo)\n/* harmony export */ });\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Renderer.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/extras/Triangle.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Program.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/math/Color.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Mesh.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Venturo auto */ \n\nvar vert = \"#version 300 es\\n\\nin vec2 uv;\\nin vec2 position;\\n\\nout vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = vec4(position, 0, 1);\\n}\";\nvar frag = \"#version 300 es\\n\\nprecision highp float;\\n\\nuniform float uTime;\\nuniform vec3 uColor;\\n\\nin vec2 vUv;\\nout vec4 fragColor;\\n// Simplex 2D noise\\n//\\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\\n\\nfloat snoise(vec2 v){\\n    const vec4 C = vec4(0.211324865405187, 0.366025403784439,\\n    -0.577350269189626, 0.024390243902439);\\n    vec2 i  = floor(v + dot(v, C.yy) );\\n    vec2 x0 = v -   i + dot(i, C.xx);\\n    vec2 i1;\\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n    vec4 x12 = x0.xyxy + C.xxzz;\\n    x12.xy -= i1;\\n    i = mod(i, 289.0);\\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\\n    + i.x + vec3(0.0, i1.x, 1.0 ));\\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\\n    dot(x12.zw,x12.zw)), 0.0);\\n    m = m*m ;\\n    m = m*m ;\\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n    vec3 h = abs(x) - 0.5;\\n    vec3 ox = floor(x + 0.5);\\n    vec3 a0 = x - ox;\\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n    vec3 g;\\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n    return 130.0 * dot(m, g);\\n}\\n\\n\\n// Version 3 ( possibly the fastest version, using a mix instead of a ternary operator ):\\n\\n/* ** ColorStop Point data structure for the COLOR_RAMP macro\\ncolor -> the color of the color stop\\nposition -> position of the color stop on the color ramp -> [0, 1]\\n*/\\nstruct ColorStop {\\n    vec3 color;\\n    float position;\\n};\\n\\n/* ** COLOR_RAMP macro by Arya Ross -> based on Blender's ColorRamp Node in the shading tab\\nColorStop[?] colors -> array of color stops that can have any length\\nfloat factor -> the position that you want to know the color of -> [0, 1]\\nvec3 finalColor -> the final color based on the factor\\n\\nLine 5 Of The Macro:\\n// possibly is bad for performance\\nindex = isInBetween ? i : index; \\\\\\n\\nTaken From: https://stackoverflow.com/a/26219603/19561482\\nindex = int(mix(float(index), float(i), float(isInBetween))); \\\\\\n*/\\n#define COLOR_RAMP(colors, factor, finalColor) { \\\\\\n    int index = 0; \\\\\\n    for(int i = 0; i < colors.length() - 1; i++){ \\\\\\n       ColorStop currentColor = colors[i]; \\\\\\n       bool isInBetween = currentColor.position <= factor; \\\\\\n       index = int(mix(float(index), float(i), float(isInBetween))); \\\\\\n    } \\\\\\n    ColorStop currentColor = colors[index]; \\\\\\n    ColorStop nextColor = colors[index + 1]; \\\\\\n    float range = nextColor.position - currentColor.position; \\\\\\n    float lerpFactor = (factor - currentColor.position) / range; \\\\\\n    finalColor = mix(currentColor.color, nextColor.color, lerpFactor); \\\\\\n} \\\\\\n\\n\\nvoid main() {\\n\\n    ColorStop colors[3];\\n\\n    colors[0] = ColorStop(vec3( 58.0 / 255.0,  41.0 / 255.0, 255.0 / 255.0), 0.0);\\n    colors[1] = ColorStop(vec3(255.0 / 255.0, 148.0 / 255.0, 180.0 / 255.0), 0.5);\\n    colors[2] = ColorStop(vec3(255.0 / 255.0,  50.0 / 255.0,  50.0 / 255.0), 1.0);\\n\\n    vec3 rampColor;\\n    COLOR_RAMP(colors, vUv.x, rampColor);\\n\\n    float height = snoise(vec2(vUv.x * 2.0 + uTime * 0.1, uTime * 0.25)) * 0.5;\\n//    height = pow(height + 1.0, 1.5) - 1.0;\\n    height = exp(height);\\n    height = (vUv.y * 2.0 - height + 0.2);\\n//    height = smoothstep(0.0, 1.0, height);\\n    //    height = pow(height, 1.5);\\n    fragColor.rgb = 0.0 + 0.6 * height * rampColor + vec3(0.0);\\n    fragColor.a = 1.0;\\n}\";\nfunction Venturo(props) {\n    const propsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(props);\n    const ctnDom = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        propsRef.current = props;\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!ctnDom.current) {\n            return;\n        }\n        const ctn = ctnDom.current;\n        const renderer = new ogl__WEBPACK_IMPORTED_MODULE_1__.Renderer();\n        const gl = renderer.gl;\n        gl.clearColor(1, 1, 1, 1);\n        function resize() {\n            if (ctn == null) {\n                return;\n            }\n            const scale = 1;\n            renderer.setSize(ctn.offsetWidth * scale, ctn.offsetHeight * scale);\n        }\n        window.addEventListener(\"resize\", resize, false);\n        resize();\n        const geometry = new ogl__WEBPACK_IMPORTED_MODULE_2__.Triangle(gl);\n        const program = new ogl__WEBPACK_IMPORTED_MODULE_3__.Program(gl, {\n            vertex: vert,\n            fragment: frag,\n            uniforms: {\n                uTime: {\n                    value: 0\n                },\n                uColor: {\n                    value: new ogl__WEBPACK_IMPORTED_MODULE_4__.Color(0.3, 0.2, 0.5)\n                }\n            }\n        });\n        const mesh = new ogl__WEBPACK_IMPORTED_MODULE_5__.Mesh(gl, {\n            geometry,\n            program\n        });\n        let animateId;\n        animateId = requestAnimationFrame(update);\n        function update(t) {\n            animateId = requestAnimationFrame(update);\n            const { time: time = t * 0.01, speed = 1.0 } = propsRef.current;\n            program.uniforms.uTime.value = time * speed * 0.1;\n            renderer.render({\n                scene: mesh\n            });\n        }\n        ctn.appendChild(gl.canvas);\n        return ()=>{\n            cancelAnimationFrame(animateId);\n            window.removeEventListener(\"resize\", resize);\n            ctn.removeChild(gl.canvas);\n            gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n        };\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: ctnDom,\n        style: {\n            width: \"100%\",\n            height: \"100%\"\n        },\n        ...props\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uvcanvas/dist/components/venturo/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uvcanvas/dist/components/xenon/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/uvcanvas/dist/components/xenon/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Xenon: () => (/* binding */ Xenon)\n/* harmony export */ });\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Renderer.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/extras/Triangle.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Program.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/math/Color.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ogl */ \"(ssr)/./node_modules/ogl/src/core/Mesh.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Xenon auto */ \n\nvar styles = {\n    \"gradient-canvas\": \"uvc__gradient-canvas\"\n};\nvar vert = \"#version 300 es\\n\\nprecision highp float;\\n\\nin vec2 position;\\n\\nout vec2 vUv;\\n\\nvoid main() {\\n    vUv = position * 0.5 + 0.5; \\n    gl_Position = vec4(position, 0.0, 1.0);  \\n}\\n\";\nvar frag = \"#version 300 es\\n\\nprecision highp float;\\n\\nuniform float uTime;     // Time variable for animations\\nuniform vec3 uColor;     // Base color (optional)\\n\\nin vec2 vUv;             // UV coordinates from the vertex shader\\n\\nout vec4 fragColor;      // Output color for the fragment\\n\\n// Color Ramp Macro\\nstruct ColorStop {\\n    vec3 color;\\n    float position;\\n};\\n\\n#define COLOR_RAMP(colors, factor, finalColor) { \\\\\\n    int index = 0; \\\\\\n    for (int i = 0; i < colors.length() - 1; i++) { \\\\\\n        ColorStop currentColor = colors[i]; \\\\\\n        bool isInBetween = currentColor.position <= factor; \\\\\\n        index = int(mix(float(index), float(i), float(isInBetween))); \\\\\\n    } \\\\\\n    ColorStop currentColor = colors[index]; \\\\\\n    ColorStop nextColor = colors[index + 1]; \\\\\\n    float range = nextColor.position - currentColor.position; \\\\\\n    float lerpFactor = (factor - currentColor.position) / range; \\\\\\n    finalColor = mix(currentColor.color, nextColor.color, lerpFactor); \\\\\\n}\\n\\nvoid main() {\\n    // Define color stops for a retro rainbow effect\\n    ColorStop colors[3];\\n    colors[0] = ColorStop(vec3(80.0 / 255.0, 180.0 / 255.0, 80.0 / 255.0), 0.0);  // Balanced Lime Green\\n    colors[1] = ColorStop(vec3(0.0 / 255.0, 180.0 / 255.0, 150.0 / 255.0), 0.5);  // Balanced Turquoise\\n    colors[2] = ColorStop(vec3(0.0 / 255.0, 140.0 / 255.0, 180.0 / 255.0), 1.0);  // Balanced Ocean Blue\\n\\n    vec3 rampColor;\\n    COLOR_RAMP(colors, vUv.x, rampColor);\\n\\n    float height = (vUv.y * 2.0);\\n\\n    // Moving scanlines, with subtle dimming effect using cosine\\n    float scanline = 0.75 + 0.25 * sin((vUv.y * 200.0) + uTime * 3.0);  // Lower intensity for dimming effect\\n\\n    // Final color blending with noise, color ramp, and moving scanline effects\\n    fragColor.rgb = scanline * rampColor * (height + vec3(0.0));\\n    fragColor.a = 1.0;\\n}\\n\";\nfunction Xenon(props) {\n    const ctnDom = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!ctnDom.current) {\n            return;\n        }\n        const ctn = ctnDom.current;\n        const renderer = new ogl__WEBPACK_IMPORTED_MODULE_1__.Renderer();\n        const gl = renderer.gl;\n        gl.clearColor(1, 1, 1, 1);\n        function resize() {\n            const scale = 1;\n            renderer.setSize(ctn.offsetWidth * scale, ctn.offsetHeight * scale);\n        }\n        window.addEventListener(\"resize\", resize, false);\n        resize();\n        const geometry = new ogl__WEBPACK_IMPORTED_MODULE_2__.Triangle(gl);\n        const program = new ogl__WEBPACK_IMPORTED_MODULE_3__.Program(gl, {\n            vertex: vert,\n            fragment: frag,\n            uniforms: {\n                uTime: {\n                    value: 0\n                },\n                uColor: {\n                    value: new ogl__WEBPACK_IMPORTED_MODULE_4__.Color(0.3, 0.2, 0.5)\n                },\n                uResolution: {\n                    value: [\n                        gl.canvas.width,\n                        gl.canvas.height\n                    ]\n                }\n            }\n        });\n        const mesh = new ogl__WEBPACK_IMPORTED_MODULE_5__.Mesh(gl, {\n            geometry,\n            program\n        });\n        let animateId;\n        animateId = requestAnimationFrame(update);\n        function update(t) {\n            animateId = requestAnimationFrame(update);\n            program.uniforms.uTime.value = t * 0.001;\n            // Don't need a camera if camera uniforms aren't required\n            renderer.render({\n                scene: mesh\n            });\n        }\n        ctn.appendChild(gl.canvas);\n        return ()=>{\n            cancelAnimationFrame(animateId);\n            window.removeEventListener(\"resize\", resize);\n            ctn.removeChild(gl.canvas);\n            gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n        };\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: ctnDom,\n        className: styles.gradientCanvas,\n        style: {\n            width: \"100%\",\n            height: \"100%\"\n        },\n        ...props\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uvcanvas/dist/components/xenon/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uvcanvas/dist/components/zenitho/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/uvcanvas/dist/components/zenitho/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Zenitho: () => (/* binding */ Zenitho)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Zenitho auto */ \n/*\n *   Stripe WebGl Gradient Animation\n *   All Credits to Stripe.com\n *   ScrollObserver functionality to disable animation when not scrolled into view has been disabled and\n *   commented out for now.\n *   https://kevinhufnagl.com\n *   From: https://gist.github.com/oaluna/3cc459a57259583464ee305f6153ba46\n */ //Converting colors to proper format\nfunction normalizeColor(hexCode) {\n    return [\n        (hexCode >> 16 & 255) / 255,\n        (hexCode >> 8 & 255) / 255,\n        (255 & hexCode) / 255\n    ];\n}\n[\n    \"SCREEN\",\n    \"LINEAR_LIGHT\"\n].reduce((hexCode, t, n)=>Object.assign(hexCode, {\n        [t]: n\n    }), {});\n//Essential functionality of WebGl\n//t = width\n//n = height\nclass MiniGl {\n    constructor(canvas, width, height, debug = false){\n        const _miniGl = this, debug_output = -1 !== document.location.search.toLowerCase().indexOf(\"debug=webgl\");\n        _miniGl.canvas = canvas, _miniGl.gl = _miniGl.canvas.getContext(\"webgl\", {\n            antialias: true\n        }), _miniGl.meshes = [];\n        const context = _miniGl.gl;\n        width && height && this.setSize(width, height), _miniGl.lastDebugMsg, _miniGl.debug = debug && debug_output ? function(e) {\n            const t = new Date();\n            t - _miniGl.lastDebugMsg > 1e3 && console.log(\"---\"), console.log(t.toLocaleTimeString() + Array(Math.max(0, 32 - e.length)).join(\" \") + e + \": \", ...Array.from(arguments).slice(1)), _miniGl.lastDebugMsg = t;\n        } : ()=>{}, Object.defineProperties(_miniGl, {\n            Material: {\n                enumerable: false,\n                value: class {\n                    constructor(vertexShaders, fragments, uniforms = {}){\n                        const material = this;\n                        function getShaderByType(type, source) {\n                            const shader = context.createShader(type);\n                            return context.shaderSource(shader, source), context.compileShader(shader), context.getShaderParameter(shader, context.COMPILE_STATUS) || console.error(context.getShaderInfoLog(shader)), _miniGl.debug(\"Material.compileShaderSource\", {\n                                source: source\n                            }), shader;\n                        }\n                        function getUniformVariableDeclarations(uniforms, type) {\n                            return Object.entries(uniforms).map(([uniform, value])=>value.getDeclaration(uniform, type)).join(\"\\n\");\n                        }\n                        material.uniforms = uniforms, material.uniformInstances = [];\n                        const prefix = \"\\n              precision highp float;\\n            \";\n                        material.vertexSource = `\\n              ${prefix}\\n              attribute vec4 position;\\n              attribute vec2 uv;\\n              attribute vec2 uvNorm;\\n              ${getUniformVariableDeclarations(_miniGl.commonUniforms, \"vertex\")}\\n              ${getUniformVariableDeclarations(uniforms, \"vertex\")}\\n              ${vertexShaders}\\n            `, material.Source = `\\n              ${prefix}\\n              ${getUniformVariableDeclarations(_miniGl.commonUniforms, \"fragment\")}\\n              ${getUniformVariableDeclarations(uniforms, \"fragment\")}\\n              ${fragments}\\n            `, material.vertexShader = getShaderByType(context.VERTEX_SHADER, material.vertexSource), material.fragmentShader = getShaderByType(context.FRAGMENT_SHADER, material.Source), material.program = context.createProgram(), context.attachShader(material.program, material.vertexShader), context.attachShader(material.program, material.fragmentShader), context.linkProgram(material.program), context.getProgramParameter(material.program, context.LINK_STATUS) || console.error(context.getProgramInfoLog(material.program)), context.useProgram(material.program), material.attachUniforms(void 0, _miniGl.commonUniforms), material.attachUniforms(void 0, material.uniforms);\n                    }\n                    //t = uniform\n                    attachUniforms(name, uniforms) {\n                        //n  = material\n                        const material = this;\n                        void 0 === name ? Object.entries(uniforms).forEach(([name, uniform])=>{\n                            material.attachUniforms(name, uniform);\n                        }) : \"array\" == uniforms.type ? uniforms.value.forEach((uniform, i)=>material.attachUniforms(`${name}[${i}]`, uniform)) : \"struct\" == uniforms.type ? Object.entries(uniforms.value).forEach(([uniform, i])=>material.attachUniforms(`${name}.${uniform}`, i)) : (_miniGl.debug(\"Material.attachUniforms\", {\n                            name: name,\n                            uniform: uniforms\n                        }), material.uniformInstances.push({\n                            uniform: uniforms,\n                            location: context.getUniformLocation(material.program, name)\n                        }));\n                    }\n                }\n            },\n            Uniform: {\n                enumerable: !1,\n                value: class {\n                    constructor(e){\n                        this.type = \"float\", Object.assign(this, e);\n                        this.typeFn = ({\n                            float: \"1f\",\n                            int: \"1i\",\n                            vec2: \"2fv\",\n                            vec3: \"3fv\",\n                            vec4: \"4fv\",\n                            mat4: \"Matrix4fv\"\n                        })[this.type] || \"1f\", this.update();\n                    }\n                    update(value) {\n                        void 0 !== this.value && context[`uniform${this.typeFn}`](value, 0 === this.typeFn.indexOf(\"Matrix\") ? this.transpose : this.value, 0 === this.typeFn.indexOf(\"Matrix\") ? this.value : null);\n                    }\n                    //e - name\n                    //t - type\n                    //n - length\n                    getDeclaration(name, type, length) {\n                        const uniform = this;\n                        if (uniform.excludeFrom !== type) {\n                            if (\"array\" === uniform.type) return uniform.value[0].getDeclaration(name, type, uniform.value.length) + `\\nconst int ${name}_length = ${uniform.value.length};`;\n                            if (\"struct\" === uniform.type) {\n                                let name_no_prefix = name.replace(\"u_\", \"\");\n                                return name_no_prefix = name_no_prefix.charAt(0).toUpperCase() + name_no_prefix.slice(1), `uniform struct ${name_no_prefix} \n                                {\\n` + Object.entries(uniform.value).map(([name, uniform])=>uniform.getDeclaration(name, type).replace(/^uniform/, \"\")).join(\"\") + `\\n} ${name}${length > 0 ? `[${length}]` : \"\"};`;\n                            }\n                            return `uniform ${uniform.type} ${name}${length > 0 ? `[${length}]` : \"\"};`;\n                        }\n                    }\n                }\n            },\n            PlaneGeometry: {\n                enumerable: !1,\n                value: class {\n                    constructor(width, height, n, i, orientation){\n                        context.createBuffer(), this.attributes = {\n                            position: new _miniGl.Attribute({\n                                target: context.ARRAY_BUFFER,\n                                size: 3\n                            }),\n                            uv: new _miniGl.Attribute({\n                                target: context.ARRAY_BUFFER,\n                                size: 2\n                            }),\n                            uvNorm: new _miniGl.Attribute({\n                                target: context.ARRAY_BUFFER,\n                                size: 2\n                            }),\n                            index: new _miniGl.Attribute({\n                                target: context.ELEMENT_ARRAY_BUFFER,\n                                size: 3,\n                                type: context.UNSIGNED_SHORT\n                            })\n                        }, this.setTopology(n, i), this.setSize(width, height, orientation);\n                    }\n                    setTopology(e = 1, t = 1) {\n                        const n = this;\n                        n.xSegCount = e, n.ySegCount = t, n.vertexCount = (n.xSegCount + 1) * (n.ySegCount + 1), n.quadCount = n.xSegCount * n.ySegCount * 2, n.attributes.uv.values = new Float32Array(2 * n.vertexCount), n.attributes.uvNorm.values = new Float32Array(2 * n.vertexCount), n.attributes.index.values = new Uint16Array(3 * n.quadCount);\n                        for(let e = 0; e <= n.ySegCount; e++)for(let t = 0; t <= n.xSegCount; t++){\n                            const i = e * (n.xSegCount + 1) + t;\n                            if (n.attributes.uv.values[2 * i] = t / n.xSegCount, n.attributes.uv.values[2 * i + 1] = 1 - e / n.ySegCount, n.attributes.uvNorm.values[2 * i] = t / n.xSegCount * 2 - 1, n.attributes.uvNorm.values[2 * i + 1] = 1 - e / n.ySegCount * 2, t < n.xSegCount && e < n.ySegCount) {\n                                const s = e * n.xSegCount + t;\n                                n.attributes.index.values[6 * s] = i, n.attributes.index.values[6 * s + 1] = i + 1 + n.xSegCount, n.attributes.index.values[6 * s + 2] = i + 1, n.attributes.index.values[6 * s + 3] = i + 1, n.attributes.index.values[6 * s + 4] = i + 1 + n.xSegCount, n.attributes.index.values[6 * s + 5] = i + 2 + n.xSegCount;\n                            }\n                        }\n                        n.attributes.uv.update(), n.attributes.uvNorm.update(), n.attributes.index.update(), _miniGl.debug(\"Geometry.setTopology\", {\n                            uv: n.attributes.uv,\n                            uvNorm: n.attributes.uvNorm,\n                            index: n.attributes.index\n                        });\n                    }\n                    setSize(width = 1, height = 1, orientation = \"xz\") {\n                        const geometry = this;\n                        geometry.width = width, geometry.height = height, geometry.orientation = orientation, geometry.attributes.position.values && geometry.attributes.position.values.length === 3 * geometry.vertexCount || (geometry.attributes.position.values = new Float32Array(3 * geometry.vertexCount));\n                        const o = width / -2, r = height / -2, segment_width = width / geometry.xSegCount, segment_height = height / geometry.ySegCount;\n                        for(let yIndex = 0; yIndex <= geometry.ySegCount; yIndex++){\n                            const t = r + yIndex * segment_height;\n                            for(let xIndex = 0; xIndex <= geometry.xSegCount; xIndex++){\n                                const r = o + xIndex * segment_width, l = yIndex * (geometry.xSegCount + 1) + xIndex;\n                                geometry.attributes.position.values[3 * l + \"xyz\".indexOf(orientation[0])] = r, geometry.attributes.position.values[3 * l + \"xyz\".indexOf(orientation[1])] = -t;\n                            }\n                        }\n                        geometry.attributes.position.update(), _miniGl.debug(\"Geometry.setSize\", {\n                            position: geometry.attributes.position\n                        });\n                    }\n                }\n            },\n            Mesh: {\n                enumerable: !1,\n                value: class {\n                    constructor(geometry, material){\n                        const mesh = this;\n                        mesh.geometry = geometry, mesh.material = material, mesh.wireframe = !1, mesh.attributeInstances = [], Object.entries(mesh.geometry.attributes).forEach(([e, attribute])=>{\n                            mesh.attributeInstances.push({\n                                attribute: attribute,\n                                location: attribute.attach(e, mesh.material.program)\n                            });\n                        }), _miniGl.meshes.push(mesh), _miniGl.debug(\"Mesh.constructor\", {\n                            mesh: mesh\n                        });\n                    }\n                    draw() {\n                        context.useProgram(this.material.program), this.material.uniformInstances.forEach(({ uniform: e, location: t })=>e.update(t)), this.attributeInstances.forEach(({ attribute: e, location: t })=>e.use(t)), context.drawElements(this.wireframe ? context.LINES : context.TRIANGLES, this.geometry.attributes.index.values.length, context.UNSIGNED_SHORT, 0);\n                    }\n                    remove() {\n                        _miniGl.meshes = _miniGl.meshes.filter((e)=>e != this);\n                    }\n                }\n            },\n            Attribute: {\n                enumerable: !1,\n                value: class {\n                    constructor(e){\n                        this.type = context.FLOAT, this.normalized = !1, this.buffer = context.createBuffer(), Object.assign(this, e), this.update();\n                    }\n                    update() {\n                        void 0 !== this.values && (context.bindBuffer(this.target, this.buffer), context.bufferData(this.target, this.values, context.STATIC_DRAW));\n                    }\n                    attach(e, t) {\n                        const n = context.getAttribLocation(t, e);\n                        return this.target === context.ARRAY_BUFFER && (context.enableVertexAttribArray(n), context.vertexAttribPointer(n, this.size, this.type, this.normalized, 0, 0)), n;\n                    }\n                    use(e) {\n                        context.bindBuffer(this.target, this.buffer), this.target === context.ARRAY_BUFFER && (context.enableVertexAttribArray(e), context.vertexAttribPointer(e, this.size, this.type, this.normalized, 0, 0));\n                    }\n                }\n            }\n        });\n        const a = [\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1\n        ];\n        _miniGl.commonUniforms = {\n            projectionMatrix: new _miniGl.Uniform({\n                type: \"mat4\",\n                value: a\n            }),\n            modelViewMatrix: new _miniGl.Uniform({\n                type: \"mat4\",\n                value: a\n            }),\n            resolution: new _miniGl.Uniform({\n                type: \"vec2\",\n                value: [\n                    1,\n                    1\n                ]\n            }),\n            aspectRatio: new _miniGl.Uniform({\n                type: \"float\",\n                value: 1\n            })\n        };\n    }\n    setSize(e = 640, t = 480) {\n        this.width = e, this.height = t, this.canvas.width = e, this.canvas.height = t, this.gl.viewport(0, 0, e, t), this.commonUniforms.resolution.value = [\n            e,\n            t\n        ], this.commonUniforms.aspectRatio.value = e / t, this.debug(\"MiniGL.setSize\", {\n            width: e,\n            height: t\n        });\n    }\n    //left, right, top, bottom, near, far\n    setOrthographicCamera(e = 0, t = 0, n = 0, i = -2e3, s = 2e3) {\n        this.commonUniforms.projectionMatrix.value = [\n            2 / this.width,\n            0,\n            0,\n            0,\n            0,\n            2 / this.height,\n            0,\n            0,\n            0,\n            0,\n            2 / (i - s),\n            0,\n            e,\n            t,\n            n,\n            1\n        ], this.debug(\"setOrthographicCamera\", this.commonUniforms.projectionMatrix.value);\n    }\n    render() {\n        this.gl.clearColor(0, 0, 0, 0), this.gl.clearDepth(1), this.meshes.forEach((e)=>e.draw());\n    }\n}\n//Sets initial properties\nfunction e(object, propertyName, val) {\n    return propertyName in object ? Object.defineProperty(object, propertyName, {\n        value: val,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : object[propertyName] = val, object;\n}\n//Gradient object\nclass Gradient {\n    constructor(){\n        e(this, \"el\", void 0), e(this, \"gradientColors\", void 0), e(this, \"cssVarRetries\", 0), e(this, \"maxCssVarRetries\", 200), e(this, \"angle\", 0), e(this, \"isLoadedClass\", !1), e(this, \"isScrolling\", !1), /*e(this, \"isStatic\", o.disableAmbientAnimations()),*/ e(this, \"scrollingTimeout\", void 0), e(this, \"scrollingRefreshDelay\", 200), e(this, \"isIntersecting\", !1), e(this, \"shaderFiles\", void 0), e(this, \"vertexShader\", void 0), e(this, \"sectionColors\", void 0), e(this, \"conf\", void 0), e(this, \"uniforms\", void 0), e(this, \"t\", 1253106), e(this, \"last\", 0), e(this, \"width\", void 0), e(this, \"minWidth\", 1111), e(this, \"height\", void 0), e(this, \"minHeight\", 1111), e(this, \"xSegCount\", void 0), e(this, \"ySegCount\", void 0), e(this, \"mesh\", void 0), e(this, \"material\", void 0), e(this, \"geometry\", void 0), e(this, \"minigl\", void 0), e(this, \"scrollObserver\", void 0), e(this, \"amp\", 320), e(this, \"seed\", 5), e(this, \"freqX\", 14e-5), e(this, \"freqY\", 29e-5), e(this, \"freqDelta\", 1e-5), e(this, \"activeColors\", [\n            1,\n            1,\n            1,\n            1\n        ]), e(this, \"isMetaKey\", !1), e(this, \"isGradientLegendVisible\", !1), e(this, \"isMouseDown\", !1), e(this, \"handleScroll\", ()=>{\n            clearTimeout(this.scrollingTimeout), this.scrollingTimeout = setTimeout(this.handleScrollEnd, this.scrollingRefreshDelay), this.isGradientLegendVisible && this.hideGradientLegend(), this.conf.playing && (this.isScrolling = !0, this.pause());\n        }), e(this, \"handleScrollEnd\", ()=>{\n            this.isScrolling = !1, this.isIntersecting && this.play();\n        }), e(this, \"resize\", ()=>{\n            this.width = window.innerWidth, this.height = window.innerHeight, this.minigl.setSize(this.width, this.height), this.minigl.setOrthographicCamera(), this.xSegCount = Math.ceil(this.width * this.conf.density[0]), this.ySegCount = Math.ceil(this.height * this.conf.density[1]), this.mesh.geometry.setTopology(this.xSegCount, this.ySegCount), this.mesh.geometry.setSize(this.width, this.height), this.mesh.material.uniforms.u_shadow_power.value = this.width < 600 ? 5 : 6;\n        }), // e(this, \"handleMouseDown\", (e) => {\n        //   this.isGradientLegendVisible &&\n        //     ((this.isMetaKey = e.metaKey),\n        //     (this.isMouseDown = !0),\n        //     !1 === this.conf.playing && requestAnimationFrame(this.animate));\n        // }),\n        // e(this, \"handleMouseUp\", () => {\n        //   this.isMouseDown = !1;\n        // }),\n        e(this, \"animate\", (e)=>{\n            if (!this.shouldSkipFrame(e) || this.isMouseDown) {\n                if (this.t += Math.min(e - this.last, 1e3 / 15), this.last = e, this.isMouseDown) {\n                    let e = 160;\n                    this.isMetaKey && (e = -160), this.t += e;\n                }\n                this.mesh.material.uniforms.u_time.value = this.t, this.minigl.render();\n            }\n            if (0 !== this.last && this.isStatic) return this.minigl.render(), void this.disconnect();\n            /*this.isIntersecting && */ (this.conf.playing || this.isMouseDown) && requestAnimationFrame(this.animate);\n        }), e(this, \"addIsLoadedClass\", ()=>{\n            /*this.isIntersecting && */ !this.isLoadedClass && (this.isLoadedClass = !0, this.el.classList.add(\"isLoaded\"));\n        // setTimeout(() => {\n        //   this.el.parentElement.classList.add(\"isLoaded\");\n        // }, 3e3)\n        }), e(this, \"pause\", ()=>{\n            this.conf.playing = false;\n        }), e(this, \"play\", ()=>{\n            requestAnimationFrame(this.animate), this.conf.playing = true;\n        }), e(this, \"initGradient\", (options)=>{\n            // this.el = document.querySelector(selector);\n            const { el, gradientColors = [] } = options || {};\n            this.el = el || document.createElement(\"canvas\");\n            this.gradientColors = gradientColors;\n            this.connect();\n            return this;\n        });\n    }\n    async connect() {\n        this.shaderFiles = {\n            vertex: \"varying vec3 v_color;\\n\\nvoid main() {\\n  float time = u_time * u_global.noiseSpeed;\\n\\n  vec2 noiseCoord = resolution * uvNorm * u_global.noiseFreq;\\n\\n  vec2 st = 1. - uvNorm.xy;\\n\\n  //\\n  // Tilting the plane\\n  //\\n\\n  // Front-to-back tilt\\n  float tilt = resolution.y / 2.0 * uvNorm.y;\\n\\n  // Left-to-right angle\\n  float incline = resolution.x * uvNorm.x / 2.0 * u_vertDeform.incline;\\n\\n  // Up-down shift to offset incline\\n  float offset = resolution.x / 2.0 * u_vertDeform.incline * mix(u_vertDeform.offsetBottom, u_vertDeform.offsetTop, uv.y);\\n\\n  //\\n  // Vertex noise\\n  //\\n\\n  float noise = snoise(vec3(\\n    noiseCoord.x * u_vertDeform.noiseFreq.x + time * u_vertDeform.noiseFlow,\\n    noiseCoord.y * u_vertDeform.noiseFreq.y,\\n    time * u_vertDeform.noiseSpeed + u_vertDeform.noiseSeed\\n  )) * u_vertDeform.noiseAmp;\\n\\n  // Fade noise to zero at edges\\n  noise *= 1.0 - pow(abs(uvNorm.y), 2.0);\\n\\n  // Clamp to 0\\n  noise = max(0.0, noise);\\n\\n  vec3 pos = vec3(\\n    position.x,\\n    position.y + tilt + incline + noise - offset,\\n    position.z\\n  );\\n\\n  //\\n  // Vertex color, to be passed to fragment shader\\n  //\\n\\n  if (u_active_colors[0] == 1.) {\\n    v_color = u_baseColor;\\n  }\\n\\n  for (int i = 0; i < u_waveLayers_length; i++) {\\n    if (u_active_colors[i + 1] == 1.) {\\n      WaveLayers layer = u_waveLayers[i];\\n\\n      float noise = smoothstep(\\n        layer.noiseFloor,\\n        layer.noiseCeil,\\n        snoise(vec3(\\n          noiseCoord.x * layer.noiseFreq.x + time * layer.noiseFlow,\\n          noiseCoord.y * layer.noiseFreq.y,\\n          time * layer.noiseSpeed + layer.noiseSeed\\n        )) / 2.0 + 0.5\\n      );\\n\\n      v_color = blendNormal(v_color, layer.color, pow(noise, 4.));\\n    }\\n  }\\n\\n  //\\n  // Finish\\n  //\\n\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\\n}\",\n            noise: \"//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n//\\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\n    return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise(vec3 v)\\n{\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289(i);\\n  vec4 p = permute( permute( permute(\\n            i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n          + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n          + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n}\",\n            blend: \"//\\n// https://github.com/jamieowen/glsl-blend\\n//\\n\\n// Normal\\n\\nvec3 blendNormal(vec3 base, vec3 blend) {\\n\treturn blend;\\n}\\n\\nvec3 blendNormal(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Screen\\n\\nfloat blendScreen(float base, float blend) {\\n\treturn 1.0-((1.0-base)*(1.0-blend));\\n}\\n\\nvec3 blendScreen(vec3 base, vec3 blend) {\\n\treturn vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));\\n}\\n\\nvec3 blendScreen(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendScreen(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Multiply\\n\\nvec3 blendMultiply(vec3 base, vec3 blend) {\\n\treturn base*blend;\\n}\\n\\nvec3 blendMultiply(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendMultiply(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Overlay\\n\\nfloat blendOverlay(float base, float blend) {\\n\treturn base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));\\n}\\n\\nvec3 blendOverlay(vec3 base, vec3 blend) {\\n\treturn vec3(blendOverlay(base.r,blend.r),blendOverlay(base.g,blend.g),blendOverlay(base.b,blend.b));\\n}\\n\\nvec3 blendOverlay(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendOverlay(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Hard light\\n\\nvec3 blendHardLight(vec3 base, vec3 blend) {\\n\treturn blendOverlay(blend,base);\\n}\\n\\nvec3 blendHardLight(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendHardLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Soft light\\n\\nfloat blendSoftLight(float base, float blend) {\\n\treturn (blend<0.5)?(2.0*base*blend+base*base*(1.0-2.0*blend)):(sqrt(base)*(2.0*blend-1.0)+2.0*base*(1.0-blend));\\n}\\n\\nvec3 blendSoftLight(vec3 base, vec3 blend) {\\n\treturn vec3(blendSoftLight(base.r,blend.r),blendSoftLight(base.g,blend.g),blendSoftLight(base.b,blend.b));\\n}\\n\\nvec3 blendSoftLight(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendSoftLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Color dodge\\n\\nfloat blendColorDodge(float base, float blend) {\\n\treturn (blend==1.0)?blend:min(base/(1.0-blend),1.0);\\n}\\n\\nvec3 blendColorDodge(vec3 base, vec3 blend) {\\n\treturn vec3(blendColorDodge(base.r,blend.r),blendColorDodge(base.g,blend.g),blendColorDodge(base.b,blend.b));\\n}\\n\\nvec3 blendColorDodge(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendColorDodge(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Color burn\\n\\nfloat blendColorBurn(float base, float blend) {\\n\treturn (blend==0.0)?blend:max((1.0-((1.0-base)/blend)),0.0);\\n}\\n\\nvec3 blendColorBurn(vec3 base, vec3 blend) {\\n\treturn vec3(blendColorBurn(base.r,blend.r),blendColorBurn(base.g,blend.g),blendColorBurn(base.b,blend.b));\\n}\\n\\nvec3 blendColorBurn(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendColorBurn(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Vivid Light\\n\\nfloat blendVividLight(float base, float blend) {\\n\treturn (blend<0.5)?blendColorBurn(base,(2.0*blend)):blendColorDodge(base,(2.0*(blend-0.5)));\\n}\\n\\nvec3 blendVividLight(vec3 base, vec3 blend) {\\n\treturn vec3(blendVividLight(base.r,blend.r),blendVividLight(base.g,blend.g),blendVividLight(base.b,blend.b));\\n}\\n\\nvec3 blendVividLight(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendVividLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Lighten\\n\\nfloat blendLighten(float base, float blend) {\\n\treturn max(blend,base);\\n}\\n\\nvec3 blendLighten(vec3 base, vec3 blend) {\\n\treturn vec3(blendLighten(base.r,blend.r),blendLighten(base.g,blend.g),blendLighten(base.b,blend.b));\\n}\\n\\nvec3 blendLighten(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendLighten(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Linear burn\\n\\nfloat blendLinearBurn(float base, float blend) {\\n\t// Note : Same implementation as BlendSubtractf\\n\treturn max(base+blend-1.0,0.0);\\n}\\n\\nvec3 blendLinearBurn(vec3 base, vec3 blend) {\\n\t// Note : Same implementation as BlendSubtract\\n\treturn max(base+blend-vec3(1.0),vec3(0.0));\\n}\\n\\nvec3 blendLinearBurn(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendLinearBurn(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Linear dodge\\n\\nfloat blendLinearDodge(float base, float blend) {\\n\t// Note : Same implementation as BlendAddf\\n\treturn min(base+blend,1.0);\\n}\\n\\nvec3 blendLinearDodge(vec3 base, vec3 blend) {\\n\t// Note : Same implementation as BlendAdd\\n\treturn min(base+blend,vec3(1.0));\\n}\\n\\nvec3 blendLinearDodge(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendLinearDodge(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Linear light\\n\\nfloat blendLinearLight(float base, float blend) {\\n\treturn blend<0.5?blendLinearBurn(base,(2.0*blend)):blendLinearDodge(base,(2.0*(blend-0.5)));\\n}\\n\\nvec3 blendLinearLight(vec3 base, vec3 blend) {\\n\treturn vec3(blendLinearLight(base.r,blend.r),blendLinearLight(base.g,blend.g),blendLinearLight(base.b,blend.b));\\n}\\n\\nvec3 blendLinearLight(vec3 base, vec3 blend, float opacity) {\\n\treturn (blendLinearLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\",\n            fragment: \"varying vec3 v_color;\\n\\nvoid main() {\\n  vec3 color = v_color;\\n  if (u_darken_top == 1.0) {\\n    vec2 st = gl_FragCoord.xy/resolution.xy;\\n    color.g -= pow(st.y + sin(-12.0) * st.x, u_shadow_power) * 0.4;\\n  }\\n  gl_FragColor = vec4(color, 1.0);\\n}\"\n        }, this.conf = {\n            presetName: \"\",\n            wireframe: false,\n            density: [\n                0.06,\n                0.16\n            ],\n            zoom: 1,\n            rotation: 0,\n            playing: true\n        }, this.minigl = new MiniGl(this.el, null, null, !0), this.init(), this.addIsLoadedClass();\n    /*\n        this.scrollObserver = await s.create(.1, !1),\n        this.scrollObserver.observe(this.el),\n        this.scrollObserver.onSeparate(() => {\n            window.removeEventListener(\"scroll\", this.handleScroll), window.removeEventListener(\"mousedown\", this.handleMouseDown), window.removeEventListener(\"mouseup\", this.handleMouseUp), window.removeEventListener(\"keydown\", this.handleKeyDown), this.isIntersecting = !1, this.conf.playing && this.pause()\n        }), \n        this.scrollObserver.onIntersect(() => {\n            window.addEventListener(\"scroll\", this.handleScroll), window.addEventListener(\"mousedown\", this.handleMouseDown), window.addEventListener(\"mouseup\", this.handleMouseUp), window.addEventListener(\"keydown\", this.handleKeyDown), this.isIntersecting = !0, this.addIsLoadedClass(), this.play()\n        })*/ }\n    disconnect() {\n        this.scrollObserver && (window.removeEventListener(\"scroll\", this.handleScroll), window.removeEventListener(\"mousedown\", this.handleMouseDown), window.removeEventListener(\"mouseup\", this.handleMouseUp), window.removeEventListener(\"keydown\", this.handleKeyDown), this.scrollObserver.disconnect()), window.removeEventListener(\"resize\", this.resize);\n    }\n    initMaterial() {\n        this.uniforms = {\n            u_time: new this.minigl.Uniform({\n                value: 0\n            }),\n            u_shadow_power: new this.minigl.Uniform({\n                value: 5\n            }),\n            u_darken_top: new this.minigl.Uniform({\n                value: \"\" === this.el.dataset.jsDarkenTop ? 1 : 0\n            }),\n            u_active_colors: new this.minigl.Uniform({\n                value: this.activeColors,\n                type: \"vec4\"\n            }),\n            u_global: new this.minigl.Uniform({\n                value: {\n                    noiseFreq: new this.minigl.Uniform({\n                        value: [\n                            this.freqX,\n                            this.freqY\n                        ],\n                        type: \"vec2\"\n                    }),\n                    noiseSpeed: new this.minigl.Uniform({\n                        value: 5e-6\n                    })\n                },\n                type: \"struct\"\n            }),\n            u_vertDeform: new this.minigl.Uniform({\n                value: {\n                    incline: new this.minigl.Uniform({\n                        value: Math.sin(this.angle) / Math.cos(this.angle)\n                    }),\n                    offsetTop: new this.minigl.Uniform({\n                        value: -0.5\n                    }),\n                    offsetBottom: new this.minigl.Uniform({\n                        value: -0.5\n                    }),\n                    noiseFreq: new this.minigl.Uniform({\n                        value: [\n                            3,\n                            4\n                        ],\n                        type: \"vec2\"\n                    }),\n                    noiseAmp: new this.minigl.Uniform({\n                        value: this.amp\n                    }),\n                    noiseSpeed: new this.minigl.Uniform({\n                        value: 10\n                    }),\n                    noiseFlow: new this.minigl.Uniform({\n                        value: 3\n                    }),\n                    noiseSeed: new this.minigl.Uniform({\n                        value: this.seed\n                    })\n                },\n                type: \"struct\",\n                excludeFrom: \"fragment\"\n            }),\n            u_baseColor: new this.minigl.Uniform({\n                value: this.sectionColors[0],\n                type: \"vec3\",\n                excludeFrom: \"fragment\"\n            }),\n            u_waveLayers: new this.minigl.Uniform({\n                value: [],\n                excludeFrom: \"fragment\",\n                type: \"array\"\n            })\n        };\n        for(let e = 1; e < this.sectionColors.length; e += 1)this.uniforms.u_waveLayers.value.push(new this.minigl.Uniform({\n            value: {\n                color: new this.minigl.Uniform({\n                    value: this.sectionColors[e],\n                    type: \"vec3\"\n                }),\n                noiseFreq: new this.minigl.Uniform({\n                    value: [\n                        2 + e / this.sectionColors.length,\n                        3 + e / this.sectionColors.length\n                    ],\n                    type: \"vec2\"\n                }),\n                noiseSpeed: new this.minigl.Uniform({\n                    value: 11 + 0.3 * e\n                }),\n                noiseFlow: new this.minigl.Uniform({\n                    value: 6.5 + 0.3 * e\n                }),\n                noiseSeed: new this.minigl.Uniform({\n                    value: this.seed + 10 * e\n                }),\n                noiseFloor: new this.minigl.Uniform({\n                    value: 0.1\n                }),\n                noiseCeil: new this.minigl.Uniform({\n                    value: 0.63 + 0.07 * e\n                })\n            },\n            type: \"struct\"\n        }));\n        return this.vertexShader = [\n            this.shaderFiles.noise,\n            this.shaderFiles.blend,\n            this.shaderFiles.vertex\n        ].join(\"\\n\\n\"), new this.minigl.Material(this.vertexShader, this.shaderFiles.fragment, this.uniforms);\n    }\n    initMesh() {\n        this.material = this.initMaterial(), this.geometry = new this.minigl.PlaneGeometry(), this.mesh = new this.minigl.Mesh(this.geometry, this.material);\n    }\n    shouldSkipFrame(e) {\n        return !!window.document.hidden || !this.conf.playing || parseInt(e, 10) % 2 == 0 || void 0;\n    }\n    updateFrequency(e) {\n        this.freqX += e, this.freqY += e;\n    }\n    toggleColor(index) {\n        this.activeColors[index] = 0 === this.activeColors[index] ? 1 : 0;\n    }\n    showGradientLegend() {\n        this.width > this.minWidth && (this.isGradientLegendVisible = !0, document.body.classList.add(\"isGradientLegendVisible\"));\n    }\n    hideGradientLegend() {\n        this.isGradientLegendVisible = !1, document.body.classList.remove(\"isGradientLegendVisible\");\n    }\n    init() {\n        this.initGradientColors(), this.initMesh(), this.resize(), requestAnimationFrame(this.animate), window.addEventListener(\"resize\", this.resize);\n    }\n    /*\n   * Initializes the four section colors by retrieving them from css variables.\n   */ initGradientColors() {\n        this.sectionColors = this.gradientColors.map((hex)=>{\n            //Check if shorthand hex value was used and double the length so the conversion in normalizeColor will work.\n            if (4 === hex.length) {\n                const hexTemp = hex.substr(1).split(\"\").map((hexTemp)=>hexTemp + hexTemp).join(\"\");\n                hex = `#${hexTemp}`;\n            }\n            return hex && `0x${hex.substr(1)}`;\n        }).filter(Boolean).map(normalizeColor);\n    }\n}\nfunction Zenitho() {\n    const ctnDom = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!ctnDom.current) {\n            return;\n        }\n        const ctn = ctnDom.current;\n        const gradient = new Gradient();\n        gradient.initGradient({\n            gradientColors: [\n                \"#ef008f\",\n                \"#6ec3f4\",\n                \"#7038ff\",\n                \"#ffba27\"\n            ]\n        });\n        ctn.appendChild(gradient.el);\n        return ()=>{\n            gradient.disconnect();\n            ctn.removeChild(gradient.el);\n            gradient.minigl.gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n        };\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: ctnDom,\n        style: {\n            width: \"100%\",\n            height: \"100%\"\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uvcanvas/dist/components/zenitho/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uvcanvas/dist/index.js":
/*!*********************************************!*\
  !*** ./node_modules/uvcanvas/dist/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lumiflex: () => (/* reexport safe */ _components_lumiflex_index_js__WEBPACK_IMPORTED_MODULE_0__.Lumiflex),\n/* harmony export */   Novatrix: () => (/* reexport safe */ _components_novatrix_index_js__WEBPACK_IMPORTED_MODULE_2__.Novatrix),\n/* harmony export */   Opulento: () => (/* reexport safe */ _components_opulento_index_js__WEBPACK_IMPORTED_MODULE_4__.Opulento),\n/* harmony export */   Slides: () => (/* reexport safe */ _components_slides_index_js__WEBPACK_IMPORTED_MODULE_8__.Slides),\n/* harmony export */   SlidesActionButton: () => (/* reexport safe */ _components_slides_action_button_index_js__WEBPACK_IMPORTED_MODULE_11__.SlidesActionButton),\n/* harmony export */   Tranquiluxe: () => (/* reexport safe */ _components_tranquiluxe_index_js__WEBPACK_IMPORTED_MODULE_5__.Tranquiluxe),\n/* harmony export */   Velustro: () => (/* reexport safe */ _components_velustro_index_js__WEBPACK_IMPORTED_MODULE_3__.Velustro),\n/* harmony export */   Venturo: () => (/* reexport safe */ _components_venturo_index_js__WEBPACK_IMPORTED_MODULE_6__.Venturo),\n/* harmony export */   Xenon: () => (/* reexport safe */ _components_xenon_index_js__WEBPACK_IMPORTED_MODULE_7__.Xenon),\n/* harmony export */   Zenitho: () => (/* reexport safe */ _components_zenitho_index_js__WEBPACK_IMPORTED_MODULE_1__.Zenitho),\n/* harmony export */   defaultComponents: () => (/* reexport safe */ _components_slides_default_components_index_js__WEBPACK_IMPORTED_MODULE_9__.defaultComponents),\n/* harmony export */   sliceMdxString: () => (/* binding */ sliceMdxString)\n/* harmony export */ });\n/* harmony import */ var _components_lumiflex_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/lumiflex/index.js */ \"(ssr)/./node_modules/uvcanvas/dist/components/lumiflex/index.js\");\n/* harmony import */ var _components_zenitho_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/zenitho/index.js */ \"(ssr)/./node_modules/uvcanvas/dist/components/zenitho/index.js\");\n/* harmony import */ var _components_novatrix_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/novatrix/index.js */ \"(ssr)/./node_modules/uvcanvas/dist/components/novatrix/index.js\");\n/* harmony import */ var _components_velustro_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/velustro/index.js */ \"(ssr)/./node_modules/uvcanvas/dist/components/velustro/index.js\");\n/* harmony import */ var _components_opulento_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/opulento/index.js */ \"(ssr)/./node_modules/uvcanvas/dist/components/opulento/index.js\");\n/* harmony import */ var _components_tranquiluxe_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/tranquiluxe/index.js */ \"(ssr)/./node_modules/uvcanvas/dist/components/tranquiluxe/index.js\");\n/* harmony import */ var _components_venturo_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/venturo/index.js */ \"(ssr)/./node_modules/uvcanvas/dist/components/venturo/index.js\");\n/* harmony import */ var _components_xenon_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/xenon/index.js */ \"(ssr)/./node_modules/uvcanvas/dist/components/xenon/index.js\");\n/* harmony import */ var _components_slides_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/slides/index.js */ \"(ssr)/./node_modules/uvcanvas/dist/components/slides/index.js\");\n/* harmony import */ var _components_slides_default_components_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/slides/default_components/index.js */ \"(ssr)/./node_modules/uvcanvas/dist/components/slides/default_components/index.js\");\n/* harmony import */ var _mdx_js_mdx__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @mdx-js/mdx */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/evaluate.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _components_slides_action_button_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/slides/action_button/index.js */ \"(ssr)/./node_modules/uvcanvas/dist/components/slides/action_button/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_hotkeys_hook__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! react-hotkeys-hook */ \"(ssr)/./node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.esm.js\");\n/* __next_internal_client_entry_do_not_use__ Lumiflex,Zenitho,Novatrix,Velustro,Opulento,Tranquiluxe,Venturo,Xenon,Slides,defaultComponents,SlidesActionButton,sliceMdxString auto */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction sliceMdxString(mdx) {\n    const rawSlices = mdx.split(/^---$/gm).map((mdx)=>mdx.trim());\n    const slices = rawSlices.map((mdx)=>(0,_mdx_js_mdx__WEBPACK_IMPORTED_MODULE_14__.evaluateSync)(mdx, /*#__PURE__*/ (react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10___namespace_cache || (react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10___namespace_cache = __webpack_require__.t(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__, 2)))));\n    return slices;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXZjYW52YXMvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3NMQUMwRDtBQUNGO0FBQ0U7QUFDQTtBQUNBO0FBQ007QUFDUjtBQUNKO0FBQ0U7QUFDOEI7QUFDekM7QUFDRTtBQUNtQztBQUNuRTtBQUNFO0FBQ2E7QUFDVTtBQUNQO0FBQ2hCO0FBQ0s7QUFFcEIsU0FBU2EsZUFBZUMsR0FBRztJQUN2QixNQUFNQyxZQUFZRCxJQUFJRSxLQUFLLENBQUMsV0FBV0MsR0FBRyxDQUFDLENBQUNILE1BQVFBLElBQUlJLElBQUk7SUFDNUQsTUFBTUMsU0FBU0osVUFBVUUsR0FBRyxDQUFDLENBQUNILE1BQVFKLDBEQUFZQSxDQUFDSSxLQUFLSCxnT0FBT0E7SUFDL0QsT0FBT1E7QUFDWDtBQUUwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFuYS1saXF1aWRpdHktcG9vbC8uL25vZGVfbW9kdWxlcy91dmNhbnZhcy9kaXN0L2luZGV4LmpzPzFkYjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcbmV4cG9ydCB7IEx1bWlmbGV4IH0gZnJvbSAnLi9jb21wb25lbnRzL2x1bWlmbGV4L2luZGV4LmpzJztcbmV4cG9ydCB7IFplbml0aG8gfSBmcm9tICcuL2NvbXBvbmVudHMvemVuaXRoby9pbmRleC5qcyc7XG5leHBvcnQgeyBOb3ZhdHJpeCB9IGZyb20gJy4vY29tcG9uZW50cy9ub3ZhdHJpeC9pbmRleC5qcyc7XG5leHBvcnQgeyBWZWx1c3RybyB9IGZyb20gJy4vY29tcG9uZW50cy92ZWx1c3Ryby9pbmRleC5qcyc7XG5leHBvcnQgeyBPcHVsZW50byB9IGZyb20gJy4vY29tcG9uZW50cy9vcHVsZW50by9pbmRleC5qcyc7XG5leHBvcnQgeyBUcmFucXVpbHV4ZSB9IGZyb20gJy4vY29tcG9uZW50cy90cmFucXVpbHV4ZS9pbmRleC5qcyc7XG5leHBvcnQgeyBWZW50dXJvIH0gZnJvbSAnLi9jb21wb25lbnRzL3ZlbnR1cm8vaW5kZXguanMnO1xuZXhwb3J0IHsgWGVub24gfSBmcm9tICcuL2NvbXBvbmVudHMveGVub24vaW5kZXguanMnO1xuZXhwb3J0IHsgU2xpZGVzIH0gZnJvbSAnLi9jb21wb25lbnRzL3NsaWRlcy9pbmRleC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0Q29tcG9uZW50cyB9IGZyb20gJy4vY29tcG9uZW50cy9zbGlkZXMvZGVmYXVsdF9jb21wb25lbnRzL2luZGV4LmpzJztcbmltcG9ydCB7IGV2YWx1YXRlU3luYyB9IGZyb20gJ0BtZHgtanMvbWR4JztcbmltcG9ydCAqIGFzIHJ1bnRpbWUgZnJvbSAncmVhY3QvanN4LXJ1bnRpbWUnO1xuZXhwb3J0IHsgU2xpZGVzQWN0aW9uQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3NsaWRlcy9hY3Rpb25fYnV0dG9uL2luZGV4LmpzJztcbmltcG9ydCAnb2dsJztcbmltcG9ydCAncmVhY3QnO1xuaW1wb3J0ICdyZWFjdC1ob3RrZXlzLWhvb2snO1xuaW1wb3J0ICdAcmFkaXgtdWkvcmVhY3QtYXNwZWN0LXJhdGlvJztcbmltcG9ydCAncmVhY3QtcmVzaXplLWRldGVjdG9yJztcbmltcG9ydCAnam90YWknO1xuaW1wb3J0ICcuL3N0YXRlLmpzJztcblxuZnVuY3Rpb24gc2xpY2VNZHhTdHJpbmcobWR4KSB7XG4gICAgY29uc3QgcmF3U2xpY2VzID0gbWR4LnNwbGl0KC9eLS0tJC9nbSkubWFwKChtZHgpID0+IG1keC50cmltKCkpO1xuICAgIGNvbnN0IHNsaWNlcyA9IHJhd1NsaWNlcy5tYXAoKG1keCkgPT4gZXZhbHVhdGVTeW5jKG1keCwgcnVudGltZSkpO1xuICAgIHJldHVybiBzbGljZXM7XG59XG5cbmV4cG9ydCB7IHNsaWNlTWR4U3RyaW5nIH07XG4iXSwibmFtZXMiOlsiTHVtaWZsZXgiLCJaZW5pdGhvIiwiTm92YXRyaXgiLCJWZWx1c3RybyIsIk9wdWxlbnRvIiwiVHJhbnF1aWx1eGUiLCJWZW50dXJvIiwiWGVub24iLCJTbGlkZXMiLCJkZWZhdWx0Q29tcG9uZW50cyIsImV2YWx1YXRlU3luYyIsInJ1bnRpbWUiLCJTbGlkZXNBY3Rpb25CdXR0b24iLCJzbGljZU1keFN0cmluZyIsIm1keCIsInJhd1NsaWNlcyIsInNwbGl0IiwibWFwIiwidHJpbSIsInNsaWNlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uvcanvas/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uvcanvas/dist/state.js":
/*!*********************************************!*\
  !*** ./node_modules/uvcanvas/dist/state.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ setPageAtom),\n/* harmony export */   f: () => (/* binding */ fullscreenAtom),\n/* harmony export */   m: () => (/* binding */ metadatasAtom),\n/* harmony export */   p: () => (/* binding */ pageAtom),\n/* harmony export */   s: () => (/* binding */ stepAtom)\n/* harmony export */ });\n/* harmony import */ var jotai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jotai */ \"(ssr)/./node_modules/jotai/esm/vanilla.mjs\");\n/* __next_internal_client_entry_do_not_use__ a,f,m,p,s auto */ \nconst pageAtom = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.atom)(0);\nconst stepAtom = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.atom)(0);\nconst fullscreenAtom = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.atom)(false);\nconst metadatasAtom = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.atom)([]);\nconst setPageAtom = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.atom)(null, (get, set, update)=>{\n    const currentPage = get(pageAtom);\n    const currentStep = get(stepAtom);\n    const currentMetadatas = get(metadatasAtom);\n    const metadata = currentMetadatas[currentPage];\n    const step = metadata.step ?? 1;\n    if (update.forward) {\n        if (currentStep < step - 1) {\n            set(stepAtom, currentStep + 1);\n        } else if (currentPage < currentMetadatas.length - 1) {\n            set(pageAtom, currentPage + 1);\n            set(stepAtom, 0);\n        }\n    } else {\n        if (currentStep > 0) {\n            set(stepAtom, currentStep - 1);\n        } else {\n            if (currentPage > 0 && currentStep === 0) {\n                set(stepAtom, (currentMetadatas[currentPage - 1].step ?? 1) - 1);\n            }\n            if (currentPage > 0) {\n                set(pageAtom, currentPage - 1);\n            }\n        }\n    }\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXZjYW52YXMvZGlzdC9zdGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7K0RBQzZCO0FBRTdCLE1BQU1DLFdBQVdELDJDQUFJQSxDQUFDO0FBQ3RCLE1BQU1FLFdBQVdGLDJDQUFJQSxDQUFDO0FBQ3RCLE1BQU1HLGlCQUFpQkgsMkNBQUlBLENBQUM7QUFDNUIsTUFBTUksZ0JBQWdCSiwyQ0FBSUEsQ0FBQyxFQUFFO0FBQzdCLE1BQU1LLGNBQWNMLDJDQUFJQSxDQUFDLE1BQU0sQ0FBQ00sS0FBS0MsS0FBS0M7SUFDdEMsTUFBTUMsY0FBY0gsSUFBSUw7SUFDeEIsTUFBTVMsY0FBY0osSUFBSUo7SUFDeEIsTUFBTVMsbUJBQW1CTCxJQUFJRjtJQUM3QixNQUFNUSxXQUFXRCxnQkFBZ0IsQ0FBQ0YsWUFBWTtJQUM5QyxNQUFNSSxPQUFPRCxTQUFTQyxJQUFJLElBQUk7SUFDOUIsSUFBSUwsT0FBT00sT0FBTyxFQUFFO1FBQ2hCLElBQUlKLGNBQWNHLE9BQU8sR0FBRztZQUN4Qk4sSUFBSUwsVUFBVVEsY0FBYztRQUNoQyxPQUNLLElBQUlELGNBQWNFLGlCQUFpQkksTUFBTSxHQUFHLEdBQUc7WUFDaERSLElBQUlOLFVBQVVRLGNBQWM7WUFDNUJGLElBQUlMLFVBQVU7UUFDbEI7SUFDSixPQUNLO1FBQ0QsSUFBSVEsY0FBYyxHQUFHO1lBQ2pCSCxJQUFJTCxVQUFVUSxjQUFjO1FBQ2hDLE9BQ0s7WUFDRCxJQUFJRCxjQUFjLEtBQUtDLGdCQUFnQixHQUFHO2dCQUN0Q0gsSUFBSUwsVUFBVSxDQUFDUyxnQkFBZ0IsQ0FBQ0YsY0FBYyxFQUFFLENBQUNJLElBQUksSUFBSSxLQUFLO1lBQ2xFO1lBQ0EsSUFBSUosY0FBYyxHQUFHO2dCQUNqQkYsSUFBSU4sVUFBVVEsY0FBYztZQUNoQztRQUNKO0lBQ0o7QUFDSjtBQUVtRyIsInNvdXJjZXMiOlsid2VicGFjazovL3NvbGFuYS1saXF1aWRpdHktcG9vbC8uL25vZGVfbW9kdWxlcy91dmNhbnZhcy9kaXN0L3N0YXRlLmpzPzBiMTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcbmltcG9ydCB7IGF0b20gfSBmcm9tICdqb3RhaSc7XG5cbmNvbnN0IHBhZ2VBdG9tID0gYXRvbSgwKTtcbmNvbnN0IHN0ZXBBdG9tID0gYXRvbSgwKTtcbmNvbnN0IGZ1bGxzY3JlZW5BdG9tID0gYXRvbShmYWxzZSk7XG5jb25zdCBtZXRhZGF0YXNBdG9tID0gYXRvbShbXSk7XG5jb25zdCBzZXRQYWdlQXRvbSA9IGF0b20obnVsbCwgKGdldCwgc2V0LCB1cGRhdGUpID0+IHtcbiAgICBjb25zdCBjdXJyZW50UGFnZSA9IGdldChwYWdlQXRvbSk7XG4gICAgY29uc3QgY3VycmVudFN0ZXAgPSBnZXQoc3RlcEF0b20pO1xuICAgIGNvbnN0IGN1cnJlbnRNZXRhZGF0YXMgPSBnZXQobWV0YWRhdGFzQXRvbSk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSBjdXJyZW50TWV0YWRhdGFzW2N1cnJlbnRQYWdlXTtcbiAgICBjb25zdCBzdGVwID0gbWV0YWRhdGEuc3RlcCA/PyAxO1xuICAgIGlmICh1cGRhdGUuZm9yd2FyZCkge1xuICAgICAgICBpZiAoY3VycmVudFN0ZXAgPCBzdGVwIC0gMSkge1xuICAgICAgICAgICAgc2V0KHN0ZXBBdG9tLCBjdXJyZW50U3RlcCArIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGN1cnJlbnRQYWdlIDwgY3VycmVudE1ldGFkYXRhcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBzZXQocGFnZUF0b20sIGN1cnJlbnRQYWdlICsgMSk7XG4gICAgICAgICAgICBzZXQoc3RlcEF0b20sIDApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoY3VycmVudFN0ZXAgPiAwKSB7XG4gICAgICAgICAgICBzZXQoc3RlcEF0b20sIGN1cnJlbnRTdGVwIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFBhZ2UgPiAwICYmIGN1cnJlbnRTdGVwID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc2V0KHN0ZXBBdG9tLCAoY3VycmVudE1ldGFkYXRhc1tjdXJyZW50UGFnZSAtIDFdLnN0ZXAgPz8gMSkgLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjdXJyZW50UGFnZSA+IDApIHtcbiAgICAgICAgICAgICAgICBzZXQocGFnZUF0b20sIGN1cnJlbnRQYWdlIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuZXhwb3J0IHsgc2V0UGFnZUF0b20gYXMgYSwgZnVsbHNjcmVlbkF0b20gYXMgZiwgbWV0YWRhdGFzQXRvbSBhcyBtLCBwYWdlQXRvbSBhcyBwLCBzdGVwQXRvbSBhcyBzIH07XG4iXSwibmFtZXMiOlsiYXRvbSIsInBhZ2VBdG9tIiwic3RlcEF0b20iLCJmdWxsc2NyZWVuQXRvbSIsIm1ldGFkYXRhc0F0b20iLCJzZXRQYWdlQXRvbSIsImdldCIsInNldCIsInVwZGF0ZSIsImN1cnJlbnRQYWdlIiwiY3VycmVudFN0ZXAiLCJjdXJyZW50TWV0YWRhdGFzIiwibWV0YWRhdGEiLCJzdGVwIiwiZm9yd2FyZCIsImxlbmd0aCIsImEiLCJmIiwibSIsInAiLCJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uvcanvas/dist/state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/uvcanvas/dist/index.js":
/*!*********************************************!*\
  !*** ./node_modules/uvcanvas/dist/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Lumiflex: () => (/* binding */ e0),
/* harmony export */   Novatrix: () => (/* binding */ e2),
/* harmony export */   Opulento: () => (/* binding */ e4),
/* harmony export */   Slides: () => (/* binding */ e8),
/* harmony export */   SlidesActionButton: () => (/* binding */ e10),
/* harmony export */   Tranquiluxe: () => (/* binding */ e5),
/* harmony export */   Velustro: () => (/* binding */ e3),
/* harmony export */   Venturo: () => (/* binding */ e6),
/* harmony export */   Xenon: () => (/* binding */ e7),
/* harmony export */   Zenitho: () => (/* binding */ e1),
/* harmony export */   defaultComponents: () => (/* binding */ e9),
/* harmony export */   sliceMdxString: () => (/* binding */ e11)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");

const proxy = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Loy Qun Jie\Desktop\solana_liquidity_pool\node_modules\uvcanvas\dist\index.js`)

// Accessing the __esModule property and exporting $$typeof are required here.
// The __esModule getter forces the proxy target to create the default export
// and the $$typeof value is for rendering logic to determine if the module
// is a client boundary.
const { __esModule, $$typeof } = proxy;
const __default__ = proxy.default;

const e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Loy Qun Jie\Desktop\solana_liquidity_pool\node_modules\uvcanvas\dist\index.js#Lumiflex`);

const e1 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Loy Qun Jie\Desktop\solana_liquidity_pool\node_modules\uvcanvas\dist\index.js#Zenitho`);

const e2 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Loy Qun Jie\Desktop\solana_liquidity_pool\node_modules\uvcanvas\dist\index.js#Novatrix`);

const e3 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Loy Qun Jie\Desktop\solana_liquidity_pool\node_modules\uvcanvas\dist\index.js#Velustro`);

const e4 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Loy Qun Jie\Desktop\solana_liquidity_pool\node_modules\uvcanvas\dist\index.js#Opulento`);

const e5 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Loy Qun Jie\Desktop\solana_liquidity_pool\node_modules\uvcanvas\dist\index.js#Tranquiluxe`);

const e6 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Loy Qun Jie\Desktop\solana_liquidity_pool\node_modules\uvcanvas\dist\index.js#Venturo`);

const e7 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Loy Qun Jie\Desktop\solana_liquidity_pool\node_modules\uvcanvas\dist\index.js#Xenon`);

const e8 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Loy Qun Jie\Desktop\solana_liquidity_pool\node_modules\uvcanvas\dist\index.js#Slides`);

const e9 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Loy Qun Jie\Desktop\solana_liquidity_pool\node_modules\uvcanvas\dist\index.js#defaultComponents`);

const e10 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Loy Qun Jie\Desktop\solana_liquidity_pool\node_modules\uvcanvas\dist\index.js#SlidesActionButton`);

const e11 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Loy Qun Jie\Desktop\solana_liquidity_pool\node_modules\uvcanvas\dist\index.js#sliceMdxString`);


/***/ })

};
;