"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ledgerhq";
exports.ids = ["vendor-chunks/@ledgerhq"];
exports.modules = {

/***/ "(ssr)/./node_modules/@ledgerhq/devices/lib-es/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@ledgerhq/devices/lib-es/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeviceModelId: () => (/* binding */ DeviceModelId),\n/* harmony export */   IICCID: () => (/* binding */ IICCID),\n/* harmony export */   IIGenericHID: () => (/* binding */ IIGenericHID),\n/* harmony export */   IIKeyboardHID: () => (/* binding */ IIKeyboardHID),\n/* harmony export */   IIU2F: () => (/* binding */ IIU2F),\n/* harmony export */   IIWebUSB: () => (/* binding */ IIWebUSB),\n/* harmony export */   getBluetoothServiceUuids: () => (/* binding */ getBluetoothServiceUuids),\n/* harmony export */   getDeviceModel: () => (/* binding */ getDeviceModel),\n/* harmony export */   getInfosForServiceUuid: () => (/* binding */ getInfosForServiceUuid),\n/* harmony export */   identifyProductName: () => (/* binding */ identifyProductName),\n/* harmony export */   identifyTargetId: () => (/* binding */ identifyTargetId),\n/* harmony export */   identifyUSBProductId: () => (/* binding */ identifyUSBProductId),\n/* harmony export */   ledgerUSBVendorId: () => (/* binding */ ledgerUSBVendorId)\n/* harmony export */ });\n/* harmony import */ var semver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! semver */ \"(ssr)/./node_modules/semver/index.js\");\n/* harmony import */ var semver__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(semver__WEBPACK_IMPORTED_MODULE_0__);\nvar __assign = undefined && undefined.__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a;\n\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */ var IIGenericHID = 0x01;\nvar IIKeyboardHID = 0x02;\nvar IIU2F = 0x04;\nvar IICCID = 0x08;\nvar IIWebUSB = 0x10;\nvar DeviceModelId;\n(function(DeviceModelId) {\n    DeviceModelId[\"blue\"] = \"blue\";\n    DeviceModelId[\"nanoS\"] = \"nanoS\";\n    DeviceModelId[\"nanoSP\"] = \"nanoSP\";\n    DeviceModelId[\"nanoX\"] = \"nanoX\";\n    DeviceModelId[\"nanoFTS\"] = \"nanoFTS\";\n})(DeviceModelId || (DeviceModelId = {}));\nvar devices = (_a = {}, _a[DeviceModelId.blue] = {\n    id: DeviceModelId.blue,\n    productName: \"Ledger\\xa0Blue\",\n    productIdMM: 0x00,\n    legacyUsbProductId: 0x0000,\n    usbOnly: true,\n    memorySize: 480 * 1024,\n    masks: [\n        0x31000000,\n        0x31010000\n    ],\n    getBlockSize: function(_firwareVersion) {\n        return 4 * 1024;\n    }\n}, _a[DeviceModelId.nanoS] = {\n    id: DeviceModelId.nanoS,\n    productName: \"Ledger\\xa0Nano\\xa0S\",\n    productIdMM: 0x10,\n    legacyUsbProductId: 0x0001,\n    usbOnly: true,\n    memorySize: 320 * 1024,\n    masks: [\n        0x31100000\n    ],\n    getBlockSize: function(firmwareVersion) {\n        var _a;\n        return semver__WEBPACK_IMPORTED_MODULE_0___default().lt((_a = semver__WEBPACK_IMPORTED_MODULE_0___default().coerce(firmwareVersion)) !== null && _a !== void 0 ? _a : \"\", \"2.0.0\") ? 4 * 1024 : 2 * 1024;\n    }\n}, _a[DeviceModelId.nanoSP] = {\n    id: DeviceModelId.nanoSP,\n    productName: \"Ledger Nano S Plus\",\n    productIdMM: 0x50,\n    legacyUsbProductId: 0x0005,\n    usbOnly: true,\n    memorySize: 1536 * 1024,\n    masks: [\n        0x33100000\n    ],\n    getBlockSize: function(_firmwareVersion) {\n        return 32;\n    }\n}, _a[DeviceModelId.nanoX] = {\n    id: DeviceModelId.nanoX,\n    productName: \"Ledger\\xa0Nano\\xa0X\",\n    productIdMM: 0x40,\n    legacyUsbProductId: 0x0004,\n    usbOnly: false,\n    memorySize: 2 * 1024 * 1024,\n    masks: [\n        0x33000000\n    ],\n    getBlockSize: function(_firwareVersion) {\n        return 4 * 1024;\n    },\n    bluetoothSpec: [\n        {\n            serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n            notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n            writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\",\n            writeCmdUuid: \"13d63400-2c97-0004-0003-4c6564676572\"\n        }\n    ]\n}, _a[DeviceModelId.nanoFTS] = {\n    id: DeviceModelId.nanoFTS,\n    productName: \"Ledger\\xa0Nano\\xa0FTS\",\n    productIdMM: 0x60,\n    legacyUsbProductId: 0x0006,\n    usbOnly: false,\n    memorySize: 2 * 1024 * 1024,\n    masks: [\n        0x33200000\n    ],\n    getBlockSize: function(_firwareVersion) {\n        return 4 * 1024;\n    },\n    bluetoothSpec: [\n        {\n            serviceUuid: \"13d63400-2c97-6004-0000-4c6564676572\",\n            notifyUuid: \"13d63400-2c97-6004-0001-4c6564676572\",\n            writeUuid: \"13d63400-2c97-6004-0002-4c6564676572\",\n            writeCmdUuid: \"13d63400-2c97-6004-0003-4c6564676572\"\n        }\n    ]\n}, _a);\nvar productMap = {\n    Blue: DeviceModelId.blue,\n    \"Nano S\": DeviceModelId.nanoS,\n    \"Nano S Plus\": DeviceModelId.nanoSP,\n    \"Nano X\": DeviceModelId.nanoX,\n    \"Nano FTS\": DeviceModelId.nanoFTS\n};\nvar devicesList = Object.values(devices);\n/**\n *\n */ var ledgerUSBVendorId = 0x2c97;\n/**\n *\n */ var getDeviceModel = function(id) {\n    var info = devices[id];\n    if (!info) throw new Error(\"device '\" + id + \"' does not exist\");\n    return info;\n};\n/**\n * Given a `targetId`, return the deviceModel associated to it,\n * based on the first two bytes.\n */ var identifyTargetId = function(targetId) {\n    var deviceModel = devicesList.find(function(_a) {\n        var masks = _a.masks;\n        return masks.find(function(mask) {\n            return (targetId & 0xffff0000) === mask;\n        });\n    });\n    return deviceModel;\n};\n/**\n *\n */ var identifyUSBProductId = function(usbProductId) {\n    var legacy = devicesList.find(function(d) {\n        return d.legacyUsbProductId === usbProductId;\n    });\n    if (legacy) return legacy;\n    var mm = usbProductId >> 8;\n    var deviceModel = devicesList.find(function(d) {\n        return d.productIdMM === mm;\n    });\n    return deviceModel;\n};\nvar identifyProductName = function(productName) {\n    var deviceModel = devicesList.find(function(d) {\n        return d.id === productMap[productName];\n    });\n    return deviceModel;\n};\nvar bluetoothServices = [];\nvar serviceUuidToInfos = {};\nfor(var id in devices){\n    var deviceModel = devices[id];\n    var bluetoothSpec = deviceModel.bluetoothSpec;\n    if (bluetoothSpec) {\n        for(var i = 0; i < bluetoothSpec.length; i++){\n            var spec = bluetoothSpec[i];\n            bluetoothServices.push(spec.serviceUuid);\n            serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, \"\")] = __assign({\n                deviceModel: deviceModel\n            }, spec);\n        }\n    }\n}\n/**\n *\n */ var getBluetoothServiceUuids = function() {\n    return bluetoothServices;\n};\n/**\n *\n */ var getInfosForServiceUuid = function(uuid) {\n    return serviceUuidToInfos[uuid.toLowerCase()];\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ledgerhq/devices/lib-es/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ledgerhq/devices/lib/hid-framing.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ledgerhq/devices/lib/hid-framing.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nvar errors_1 = __webpack_require__(/*! @ledgerhq/errors */ \"(ssr)/./node_modules/@ledgerhq/errors/lib-es/index.js\");\nvar Tag = 0x05;\nfunction asUInt16BE(value) {\n    var b = Buffer.alloc(2);\n    b.writeUInt16BE(value, 0);\n    return b;\n}\nvar initialAcc = {\n    data: Buffer.alloc(0),\n    dataLength: 0,\n    sequence: 0\n};\n/**\n *\n */ var createHIDframing = function(channel, packetSize) {\n    return {\n        makeBlocks: function(apdu) {\n            var data = Buffer.concat([\n                asUInt16BE(apdu.length),\n                apdu\n            ]);\n            var blockSize = packetSize - 5;\n            var nbBlocks = Math.ceil(data.length / blockSize);\n            data = Buffer.concat([\n                data,\n                Buffer.alloc(nbBlocks * blockSize - data.length + 1).fill(0)\n            ]);\n            var blocks = [];\n            for(var i = 0; i < nbBlocks; i++){\n                var head = Buffer.alloc(5);\n                head.writeUInt16BE(channel, 0);\n                head.writeUInt8(Tag, 2);\n                head.writeUInt16BE(i, 3);\n                var chunk = data.slice(i * blockSize, (i + 1) * blockSize);\n                blocks.push(Buffer.concat([\n                    head,\n                    chunk\n                ]));\n            }\n            return blocks;\n        },\n        reduceResponse: function(acc, chunk) {\n            var _a = acc || initialAcc, data = _a.data, dataLength = _a.dataLength, sequence = _a.sequence;\n            if (chunk.readUInt16BE(0) !== channel) {\n                throw new errors_1.TransportError(\"Invalid channel\", \"InvalidChannel\");\n            }\n            if (chunk.readUInt8(2) !== Tag) {\n                throw new errors_1.TransportError(\"Invalid tag\", \"InvalidTag\");\n            }\n            if (chunk.readUInt16BE(3) !== sequence) {\n                throw new errors_1.TransportError(\"Invalid sequence\", \"InvalidSequence\");\n            }\n            if (!acc) {\n                dataLength = chunk.readUInt16BE(5);\n            }\n            sequence++;\n            var chunkData = chunk.slice(acc ? 5 : 7);\n            data = Buffer.concat([\n                data,\n                chunkData\n            ]);\n            if (data.length > dataLength) {\n                data = data.slice(0, dataLength);\n            }\n            return {\n                data: data,\n                dataLength: dataLength,\n                sequence: sequence\n            };\n        },\n        getReducedResult: function(acc) {\n            if (acc && acc.dataLength === acc.data.length) {\n                return acc.data;\n            }\n        }\n    };\n};\nexports[\"default\"] = createHIDframing; //# sourceMappingURL=hid-framing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxlZGdlcmhxL2RldmljZXMvbGliL2hpZC1mcmFtaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLGtCQUFrQixHQUFHO0FBQ3JCLElBQUlFLFdBQVdDLG1CQUFPQSxDQUFDLCtFQUFrQjtBQUN6QyxJQUFJQyxNQUFNO0FBQ1YsU0FBU0MsV0FBV0MsS0FBSztJQUNyQixJQUFJQyxJQUFJQyxPQUFPQyxLQUFLLENBQUM7SUFDckJGLEVBQUVHLGFBQWEsQ0FBQ0osT0FBTztJQUN2QixPQUFPQztBQUNYO0FBQ0EsSUFBSUksYUFBYTtJQUNiQyxNQUFNSixPQUFPQyxLQUFLLENBQUM7SUFDbkJJLFlBQVk7SUFDWkMsVUFBVTtBQUNkO0FBQ0E7O0NBRUMsR0FDRCxJQUFJQyxtQkFBbUIsU0FBVUMsT0FBTyxFQUFFQyxVQUFVO0lBQ2hELE9BQU87UUFDSEMsWUFBWSxTQUFVQyxJQUFJO1lBQ3RCLElBQUlQLE9BQU9KLE9BQU9ZLE1BQU0sQ0FBQztnQkFBQ2YsV0FBV2MsS0FBS0UsTUFBTTtnQkFBR0Y7YUFBSztZQUN4RCxJQUFJRyxZQUFZTCxhQUFhO1lBQzdCLElBQUlNLFdBQVdDLEtBQUtDLElBQUksQ0FBQ2IsS0FBS1MsTUFBTSxHQUFHQztZQUN2Q1YsT0FBT0osT0FBT1ksTUFBTSxDQUFDO2dCQUNqQlI7Z0JBQ0FKLE9BQU9DLEtBQUssQ0FBQ2MsV0FBV0QsWUFBWVYsS0FBS1MsTUFBTSxHQUFHLEdBQUdLLElBQUksQ0FBQzthQUM3RDtZQUNELElBQUlDLFNBQVMsRUFBRTtZQUNmLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCxVQUFVSyxJQUFLO2dCQUMvQixJQUFJQyxPQUFPckIsT0FBT0MsS0FBSyxDQUFDO2dCQUN4Qm9CLEtBQUtuQixhQUFhLENBQUNNLFNBQVM7Z0JBQzVCYSxLQUFLQyxVQUFVLENBQUMxQixLQUFLO2dCQUNyQnlCLEtBQUtuQixhQUFhLENBQUNrQixHQUFHO2dCQUN0QixJQUFJRyxRQUFRbkIsS0FBS29CLEtBQUssQ0FBQ0osSUFBSU4sV0FBVyxDQUFDTSxJQUFJLEtBQUtOO2dCQUNoREssT0FBT00sSUFBSSxDQUFDekIsT0FBT1ksTUFBTSxDQUFDO29CQUFDUztvQkFBTUU7aUJBQU07WUFDM0M7WUFDQSxPQUFPSjtRQUNYO1FBQ0FPLGdCQUFnQixTQUFVQyxHQUFHLEVBQUVKLEtBQUs7WUFDaEMsSUFBSUssS0FBS0QsT0FBT3hCLFlBQVlDLE9BQU93QixHQUFHeEIsSUFBSSxFQUFFQyxhQUFhdUIsR0FBR3ZCLFVBQVUsRUFBRUMsV0FBV3NCLEdBQUd0QixRQUFRO1lBQzlGLElBQUlpQixNQUFNTSxZQUFZLENBQUMsT0FBT3JCLFNBQVM7Z0JBQ25DLE1BQU0sSUFBSWQsU0FBU29DLGNBQWMsQ0FBQyxtQkFBbUI7WUFDekQ7WUFDQSxJQUFJUCxNQUFNUSxTQUFTLENBQUMsT0FBT25DLEtBQUs7Z0JBQzVCLE1BQU0sSUFBSUYsU0FBU29DLGNBQWMsQ0FBQyxlQUFlO1lBQ3JEO1lBQ0EsSUFBSVAsTUFBTU0sWUFBWSxDQUFDLE9BQU92QixVQUFVO2dCQUNwQyxNQUFNLElBQUlaLFNBQVNvQyxjQUFjLENBQUMsb0JBQW9CO1lBQzFEO1lBQ0EsSUFBSSxDQUFDSCxLQUFLO2dCQUNOdEIsYUFBYWtCLE1BQU1NLFlBQVksQ0FBQztZQUNwQztZQUNBdkI7WUFDQSxJQUFJMEIsWUFBWVQsTUFBTUMsS0FBSyxDQUFDRyxNQUFNLElBQUk7WUFDdEN2QixPQUFPSixPQUFPWSxNQUFNLENBQUM7Z0JBQUNSO2dCQUFNNEI7YUFBVTtZQUN0QyxJQUFJNUIsS0FBS1MsTUFBTSxHQUFHUixZQUFZO2dCQUMxQkQsT0FBT0EsS0FBS29CLEtBQUssQ0FBQyxHQUFHbkI7WUFDekI7WUFDQSxPQUFPO2dCQUNIRCxNQUFNQTtnQkFDTkMsWUFBWUE7Z0JBQ1pDLFVBQVVBO1lBQ2Q7UUFDSjtRQUNBMkIsa0JBQWtCLFNBQVVOLEdBQUc7WUFDM0IsSUFBSUEsT0FBT0EsSUFBSXRCLFVBQVUsS0FBS3NCLElBQUl2QixJQUFJLENBQUNTLE1BQU0sRUFBRTtnQkFDM0MsT0FBT2MsSUFBSXZCLElBQUk7WUFDbkI7UUFDSjtJQUNKO0FBQ0o7QUFDQVosa0JBQWtCLEdBQUdlLGtCQUNyQix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb2xhbmEtbGlxdWlkaXR5LXBvb2wvLi9ub2RlX21vZHVsZXMvQGxlZGdlcmhxL2RldmljZXMvbGliL2hpZC1mcmFtaW5nLmpzP2YzNzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGVycm9yc18xID0gcmVxdWlyZShcIkBsZWRnZXJocS9lcnJvcnNcIik7XG52YXIgVGFnID0gMHgwNTtcbmZ1bmN0aW9uIGFzVUludDE2QkUodmFsdWUpIHtcbiAgICB2YXIgYiA9IEJ1ZmZlci5hbGxvYygyKTtcbiAgICBiLndyaXRlVUludDE2QkUodmFsdWUsIDApO1xuICAgIHJldHVybiBiO1xufVxudmFyIGluaXRpYWxBY2MgPSB7XG4gICAgZGF0YTogQnVmZmVyLmFsbG9jKDApLFxuICAgIGRhdGFMZW5ndGg6IDAsXG4gICAgc2VxdWVuY2U6IDBcbn07XG4vKipcbiAqXG4gKi9cbnZhciBjcmVhdGVISURmcmFtaW5nID0gZnVuY3Rpb24gKGNoYW5uZWwsIHBhY2tldFNpemUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtYWtlQmxvY2tzOiBmdW5jdGlvbiAoYXBkdSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBCdWZmZXIuY29uY2F0KFthc1VJbnQxNkJFKGFwZHUubGVuZ3RoKSwgYXBkdV0pO1xuICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IHBhY2tldFNpemUgLSA1O1xuICAgICAgICAgICAgdmFyIG5iQmxvY2tzID0gTWF0aC5jZWlsKGRhdGEubGVuZ3RoIC8gYmxvY2tTaXplKTtcbiAgICAgICAgICAgIGRhdGEgPSBCdWZmZXIuY29uY2F0KFtcbiAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgIEJ1ZmZlci5hbGxvYyhuYkJsb2NrcyAqIGJsb2NrU2l6ZSAtIGRhdGEubGVuZ3RoICsgMSkuZmlsbCgwKSxcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgdmFyIGJsb2NrcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYkJsb2NrczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhlYWQgPSBCdWZmZXIuYWxsb2MoNSk7XG4gICAgICAgICAgICAgICAgaGVhZC53cml0ZVVJbnQxNkJFKGNoYW5uZWwsIDApO1xuICAgICAgICAgICAgICAgIGhlYWQud3JpdGVVSW50OChUYWcsIDIpO1xuICAgICAgICAgICAgICAgIGhlYWQud3JpdGVVSW50MTZCRShpLCAzKTtcbiAgICAgICAgICAgICAgICB2YXIgY2h1bmsgPSBkYXRhLnNsaWNlKGkgKiBibG9ja1NpemUsIChpICsgMSkgKiBibG9ja1NpemUpO1xuICAgICAgICAgICAgICAgIGJsb2Nrcy5wdXNoKEJ1ZmZlci5jb25jYXQoW2hlYWQsIGNodW5rXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJsb2NrcztcbiAgICAgICAgfSxcbiAgICAgICAgcmVkdWNlUmVzcG9uc2U6IGZ1bmN0aW9uIChhY2MsIGNodW5rKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBhY2MgfHwgaW5pdGlhbEFjYywgZGF0YSA9IF9hLmRhdGEsIGRhdGFMZW5ndGggPSBfYS5kYXRhTGVuZ3RoLCBzZXF1ZW5jZSA9IF9hLnNlcXVlbmNlO1xuICAgICAgICAgICAgaWYgKGNodW5rLnJlYWRVSW50MTZCRSgwKSAhPT0gY2hhbm5lbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5UcmFuc3BvcnRFcnJvcihcIkludmFsaWQgY2hhbm5lbFwiLCBcIkludmFsaWRDaGFubmVsXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNodW5rLnJlYWRVSW50OCgyKSAhPT0gVGFnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLlRyYW5zcG9ydEVycm9yKFwiSW52YWxpZCB0YWdcIiwgXCJJbnZhbGlkVGFnXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNodW5rLnJlYWRVSW50MTZCRSgzKSAhPT0gc2VxdWVuY2UpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVHJhbnNwb3J0RXJyb3IoXCJJbnZhbGlkIHNlcXVlbmNlXCIsIFwiSW52YWxpZFNlcXVlbmNlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhY2MpIHtcbiAgICAgICAgICAgICAgICBkYXRhTGVuZ3RoID0gY2h1bmsucmVhZFVJbnQxNkJFKDUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VxdWVuY2UrKztcbiAgICAgICAgICAgIHZhciBjaHVua0RhdGEgPSBjaHVuay5zbGljZShhY2MgPyA1IDogNyk7XG4gICAgICAgICAgICBkYXRhID0gQnVmZmVyLmNvbmNhdChbZGF0YSwgY2h1bmtEYXRhXSk7XG4gICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiBkYXRhTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGRhdGEuc2xpY2UoMCwgZGF0YUxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgZGF0YUxlbmd0aDogZGF0YUxlbmd0aCxcbiAgICAgICAgICAgICAgICBzZXF1ZW5jZTogc2VxdWVuY2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGdldFJlZHVjZWRSZXN1bHQ6IGZ1bmN0aW9uIChhY2MpIHtcbiAgICAgICAgICAgIGlmIChhY2MgJiYgYWNjLmRhdGFMZW5ndGggPT09IGFjYy5kYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhY2MuZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59O1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBjcmVhdGVISURmcmFtaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGlkLWZyYW1pbmcuanMubWFwIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZXJyb3JzXzEiLCJyZXF1aXJlIiwiVGFnIiwiYXNVSW50MTZCRSIsInZhbHVlIiwiYiIsIkJ1ZmZlciIsImFsbG9jIiwid3JpdGVVSW50MTZCRSIsImluaXRpYWxBY2MiLCJkYXRhIiwiZGF0YUxlbmd0aCIsInNlcXVlbmNlIiwiY3JlYXRlSElEZnJhbWluZyIsImNoYW5uZWwiLCJwYWNrZXRTaXplIiwibWFrZUJsb2NrcyIsImFwZHUiLCJjb25jYXQiLCJsZW5ndGgiLCJibG9ja1NpemUiLCJuYkJsb2NrcyIsIk1hdGgiLCJjZWlsIiwiZmlsbCIsImJsb2NrcyIsImkiLCJoZWFkIiwid3JpdGVVSW50OCIsImNodW5rIiwic2xpY2UiLCJwdXNoIiwicmVkdWNlUmVzcG9uc2UiLCJhY2MiLCJfYSIsInJlYWRVSW50MTZCRSIsIlRyYW5zcG9ydEVycm9yIiwicmVhZFVJbnQ4IiwiY2h1bmtEYXRhIiwiZ2V0UmVkdWNlZFJlc3VsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ledgerhq/devices/lib/hid-framing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ledgerhq/errors/lib-es/helpers.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ledgerhq/errors/lib-es/helpers.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCustomErrorDeserializer: () => (/* binding */ addCustomErrorDeserializer),\n/* harmony export */   createCustomErrorClass: () => (/* binding */ createCustomErrorClass),\n/* harmony export */   deserializeError: () => (/* binding */ deserializeError),\n/* harmony export */   serializeError: () => (/* binding */ serializeError)\n/* harmony export */ });\n/* eslint-disable no-continue */ /* eslint-disable no-unused-vars */ /* eslint-disable no-param-reassign */ /* eslint-disable no-prototype-builtins */ const errorClasses = {};\nconst deserializers = {};\nconst addCustomErrorDeserializer = (name, deserializer)=>{\n    deserializers[name] = deserializer;\n};\nconst createCustomErrorClass = (name)=>{\n    class CustomErrorClass extends Error {\n        constructor(message, fields, options){\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            super(message || name, options);\n            // Set the prototype explicitly. See https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n            Object.setPrototypeOf(this, CustomErrorClass.prototype);\n            this.name = name;\n            if (fields) {\n                for(const k in fields){\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    this[k] = fields[k];\n                }\n            }\n            if (options && isObject(options) && \"cause\" in options && !(\"cause\" in this)) {\n                // .cause was specified but the superconstructor\n                // did not create an instance property.\n                const cause = options.cause;\n                this.cause = cause;\n                if (\"stack\" in cause) {\n                    this.stack = this.stack + \"\\nCAUSE: \" + cause.stack;\n                }\n            }\n        }\n    }\n    errorClasses[name] = CustomErrorClass;\n    return CustomErrorClass;\n};\nfunction isObject(value) {\n    return typeof value === \"object\";\n}\n// inspired from https://github.com/programble/errio/blob/master/index.js\nconst deserializeError = (object)=>{\n    if (object && typeof object === \"object\") {\n        try {\n            if (typeof object.message === \"string\") {\n                const msg = JSON.parse(object.message);\n                if (msg.message && msg.name) {\n                    object = msg;\n                }\n            }\n        } catch (e) {\n        // nothing\n        }\n        let error;\n        if (typeof object.name === \"string\") {\n            const { name } = object;\n            const des = deserializers[name];\n            if (des) {\n                error = des(object);\n            } else {\n                let constructor = name === \"Error\" ? Error : errorClasses[name];\n                if (!constructor) {\n                    console.warn(\"deserializing an unknown class '\" + name + \"'\");\n                    constructor = createCustomErrorClass(name);\n                }\n                error = Object.create(constructor.prototype);\n                try {\n                    for(const prop in object){\n                        if (object.hasOwnProperty(prop)) {\n                            error[prop] = object[prop];\n                        }\n                    }\n                } catch (e) {\n                // sometimes setting a property can fail (e.g. .name)\n                }\n            }\n        } else {\n            if (typeof object.message === \"string\") {\n                error = new Error(object.message);\n            }\n        }\n        if (error && !error.stack && Error.captureStackTrace) {\n            Error.captureStackTrace(error, deserializeError);\n        }\n        return error;\n    }\n    return new Error(String(object));\n};\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\nconst serializeError = (value)=>{\n    if (!value) return value;\n    if (typeof value === \"object\") {\n        return destroyCircular(value, []);\n    }\n    if (typeof value === \"function\") {\n        return `[Function: ${value.name || \"anonymous\"}]`;\n    }\n    return value;\n};\n// https://www.npmjs.com/package/destroy-circular\nfunction destroyCircular(from, seen) {\n    const to = {};\n    seen.push(from);\n    for (const key of Object.keys(from)){\n        const value = from[key];\n        if (typeof value === \"function\") {\n            continue;\n        }\n        if (!value || typeof value !== \"object\") {\n            to[key] = value;\n            continue;\n        }\n        if (seen.indexOf(from[key]) === -1) {\n            to[key] = destroyCircular(from[key], seen.slice(0));\n            continue;\n        }\n        to[key] = \"[Circular]\";\n    }\n    if (typeof from.name === \"string\") {\n        to.name = from.name;\n    }\n    if (typeof from.message === \"string\") {\n        to.message = from.message;\n    }\n    if (typeof from.stack === \"string\") {\n        to.stack = from.stack;\n    }\n    return to;\n} //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ledgerhq/errors/lib-es/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ledgerhq/errors/lib-es/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ledgerhq/errors/lib-es/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountAwaitingSendPendingOperations: () => (/* binding */ AccountAwaitingSendPendingOperations),\n/* harmony export */   AccountNameRequiredError: () => (/* binding */ AccountNameRequiredError),\n/* harmony export */   AccountNotSupported: () => (/* binding */ AccountNotSupported),\n/* harmony export */   AmountRequired: () => (/* binding */ AmountRequired),\n/* harmony export */   BluetoothRequired: () => (/* binding */ BluetoothRequired),\n/* harmony export */   BtcUnmatchedApp: () => (/* binding */ BtcUnmatchedApp),\n/* harmony export */   CantOpenDevice: () => (/* binding */ CantOpenDevice),\n/* harmony export */   CantScanQRCode: () => (/* binding */ CantScanQRCode),\n/* harmony export */   CashAddrNotSupported: () => (/* binding */ CashAddrNotSupported),\n/* harmony export */   ClaimRewardsFeesWarning: () => (/* binding */ ClaimRewardsFeesWarning),\n/* harmony export */   CurrencyNotSupported: () => (/* binding */ CurrencyNotSupported),\n/* harmony export */   DBNotReset: () => (/* binding */ DBNotReset),\n/* harmony export */   DBWrongPassword: () => (/* binding */ DBWrongPassword),\n/* harmony export */   DeviceAppVerifyNotSupported: () => (/* binding */ DeviceAppVerifyNotSupported),\n/* harmony export */   DeviceExtractOnboardingStateError: () => (/* binding */ DeviceExtractOnboardingStateError),\n/* harmony export */   DeviceGenuineSocketEarlyClose: () => (/* binding */ DeviceGenuineSocketEarlyClose),\n/* harmony export */   DeviceHalted: () => (/* binding */ DeviceHalted),\n/* harmony export */   DeviceInOSUExpected: () => (/* binding */ DeviceInOSUExpected),\n/* harmony export */   DeviceNameInvalid: () => (/* binding */ DeviceNameInvalid),\n/* harmony export */   DeviceNeedsRestart: () => (/* binding */ DeviceNeedsRestart),\n/* harmony export */   DeviceNotGenuineError: () => (/* binding */ DeviceNotGenuineError),\n/* harmony export */   DeviceOnDashboardExpected: () => (/* binding */ DeviceOnDashboardExpected),\n/* harmony export */   DeviceOnDashboardUnexpected: () => (/* binding */ DeviceOnDashboardUnexpected),\n/* harmony export */   DeviceOnboardingStatePollingError: () => (/* binding */ DeviceOnboardingStatePollingError),\n/* harmony export */   DeviceShouldStayInApp: () => (/* binding */ DeviceShouldStayInApp),\n/* harmony export */   DeviceSocketFail: () => (/* binding */ DeviceSocketFail),\n/* harmony export */   DeviceSocketNoBulkStatus: () => (/* binding */ DeviceSocketNoBulkStatus),\n/* harmony export */   DisabledTransactionBroadcastError: () => (/* binding */ DisabledTransactionBroadcastError),\n/* harmony export */   DisconnectedDevice: () => (/* binding */ DisconnectedDevice),\n/* harmony export */   DisconnectedDeviceDuringOperation: () => (/* binding */ DisconnectedDeviceDuringOperation),\n/* harmony export */   DustLimit: () => (/* binding */ DustLimit),\n/* harmony export */   ETHAddressNonEIP: () => (/* binding */ ETHAddressNonEIP),\n/* harmony export */   EnpointConfigError: () => (/* binding */ EnpointConfigError),\n/* harmony export */   EthAppPleaseEnableContractData: () => (/* binding */ EthAppPleaseEnableContractData),\n/* harmony export */   ExpertModeRequired: () => (/* binding */ ExpertModeRequired),\n/* harmony export */   FeeEstimationFailed: () => (/* binding */ FeeEstimationFailed),\n/* harmony export */   FeeNotLoaded: () => (/* binding */ FeeNotLoaded),\n/* harmony export */   FeeNotLoadedSwap: () => (/* binding */ FeeNotLoadedSwap),\n/* harmony export */   FeeRequired: () => (/* binding */ FeeRequired),\n/* harmony export */   FeeTooHigh: () => (/* binding */ FeeTooHigh),\n/* harmony export */   FirmwareNotRecognized: () => (/* binding */ FirmwareNotRecognized),\n/* harmony export */   FirmwareOrAppUpdateRequired: () => (/* binding */ FirmwareOrAppUpdateRequired),\n/* harmony export */   GasLessThanEstimate: () => (/* binding */ GasLessThanEstimate),\n/* harmony export */   GenuineCheckFailed: () => (/* binding */ GenuineCheckFailed),\n/* harmony export */   HardResetFail: () => (/* binding */ HardResetFail),\n/* harmony export */   HwTransportError: () => (/* binding */ HwTransportError),\n/* harmony export */   HwTransportErrorType: () => (/* binding */ HwTransportErrorType),\n/* harmony export */   InvalidAddress: () => (/* binding */ InvalidAddress),\n/* harmony export */   InvalidAddressBecauseDestinationIsAlsoSource: () => (/* binding */ InvalidAddressBecauseDestinationIsAlsoSource),\n/* harmony export */   InvalidNonce: () => (/* binding */ InvalidNonce),\n/* harmony export */   InvalidXRPTag: () => (/* binding */ InvalidXRPTag),\n/* harmony export */   LanguageNotFound: () => (/* binding */ LanguageNotFound),\n/* harmony export */   LatestMCUInstalledError: () => (/* binding */ LatestMCUInstalledError),\n/* harmony export */   LedgerAPI4xx: () => (/* binding */ LedgerAPI4xx),\n/* harmony export */   LedgerAPI5xx: () => (/* binding */ LedgerAPI5xx),\n/* harmony export */   LedgerAPIError: () => (/* binding */ LedgerAPIError),\n/* harmony export */   LedgerAPIErrorWithMessage: () => (/* binding */ LedgerAPIErrorWithMessage),\n/* harmony export */   LedgerAPINotAvailable: () => (/* binding */ LedgerAPINotAvailable),\n/* harmony export */   LockedDeviceError: () => (/* binding */ LockedDeviceError),\n/* harmony export */   MCUNotGenuineToDashboard: () => (/* binding */ MCUNotGenuineToDashboard),\n/* harmony export */   ManagerAppAlreadyInstalledError: () => (/* binding */ ManagerAppAlreadyInstalledError),\n/* harmony export */   ManagerAppDepInstallRequired: () => (/* binding */ ManagerAppDepInstallRequired),\n/* harmony export */   ManagerAppDepUninstallRequired: () => (/* binding */ ManagerAppDepUninstallRequired),\n/* harmony export */   ManagerAppRelyOnBTCError: () => (/* binding */ ManagerAppRelyOnBTCError),\n/* harmony export */   ManagerDeviceLockedError: () => (/* binding */ ManagerDeviceLockedError),\n/* harmony export */   ManagerFirmwareNotEnoughSpaceError: () => (/* binding */ ManagerFirmwareNotEnoughSpaceError),\n/* harmony export */   ManagerNotEnoughSpaceError: () => (/* binding */ ManagerNotEnoughSpaceError),\n/* harmony export */   ManagerUninstallBTCDep: () => (/* binding */ ManagerUninstallBTCDep),\n/* harmony export */   MaxFeeTooLow: () => (/* binding */ MaxFeeTooLow),\n/* harmony export */   MaybeKeepTronAccountAlive: () => (/* binding */ MaybeKeepTronAccountAlive),\n/* harmony export */   NetworkDown: () => (/* binding */ NetworkDown),\n/* harmony export */   NetworkError: () => (/* binding */ NetworkError),\n/* harmony export */   NoAccessToCamera: () => (/* binding */ NoAccessToCamera),\n/* harmony export */   NoAddressesFound: () => (/* binding */ NoAddressesFound),\n/* harmony export */   NoDBPathGiven: () => (/* binding */ NoDBPathGiven),\n/* harmony export */   NotEnoughBalance: () => (/* binding */ NotEnoughBalance),\n/* harmony export */   NotEnoughBalanceBecauseDestinationNotCreated: () => (/* binding */ NotEnoughBalanceBecauseDestinationNotCreated),\n/* harmony export */   NotEnoughBalanceInParentAccount: () => (/* binding */ NotEnoughBalanceInParentAccount),\n/* harmony export */   NotEnoughBalanceSwap: () => (/* binding */ NotEnoughBalanceSwap),\n/* harmony export */   NotEnoughBalanceToDelegate: () => (/* binding */ NotEnoughBalanceToDelegate),\n/* harmony export */   NotEnoughGas: () => (/* binding */ NotEnoughGas),\n/* harmony export */   NotEnoughGasSwap: () => (/* binding */ NotEnoughGasSwap),\n/* harmony export */   NotEnoughSpendableBalance: () => (/* binding */ NotEnoughSpendableBalance),\n/* harmony export */   NotSupportedLegacyAddress: () => (/* binding */ NotSupportedLegacyAddress),\n/* harmony export */   OpReturnDataSizeLimit: () => (/* binding */ OpReturnDataSizeLimit),\n/* harmony export */   PairingFailed: () => (/* binding */ PairingFailed),\n/* harmony export */   PasswordIncorrectError: () => (/* binding */ PasswordIncorrectError),\n/* harmony export */   PasswordsDontMatchError: () => (/* binding */ PasswordsDontMatchError),\n/* harmony export */   PeerRemovedPairing: () => (/* binding */ PeerRemovedPairing),\n/* harmony export */   PendingOperation: () => (/* binding */ PendingOperation),\n/* harmony export */   PinNotSet: () => (/* binding */ PinNotSet),\n/* harmony export */   PriorityFeeHigherThanMaxFee: () => (/* binding */ PriorityFeeHigherThanMaxFee),\n/* harmony export */   PriorityFeeTooHigh: () => (/* binding */ PriorityFeeTooHigh),\n/* harmony export */   PriorityFeeTooLow: () => (/* binding */ PriorityFeeTooLow),\n/* harmony export */   RecipientRequired: () => (/* binding */ RecipientRequired),\n/* harmony export */   RecommendSubAccountsToEmpty: () => (/* binding */ RecommendSubAccountsToEmpty),\n/* harmony export */   RecommendUndelegation: () => (/* binding */ RecommendUndelegation),\n/* harmony export */   ReplacementTransactionUnderpriced: () => (/* binding */ ReplacementTransactionUnderpriced),\n/* harmony export */   SequenceNumberError: () => (/* binding */ SequenceNumberError),\n/* harmony export */   StatusCodes: () => (/* binding */ StatusCodes),\n/* harmony export */   SyncError: () => (/* binding */ SyncError),\n/* harmony export */   TimeoutTagged: () => (/* binding */ TimeoutTagged),\n/* harmony export */   TransactionHasBeenValidatedError: () => (/* binding */ TransactionHasBeenValidatedError),\n/* harmony export */   TransportError: () => (/* binding */ TransportError),\n/* harmony export */   TransportExchangeTimeoutError: () => (/* binding */ TransportExchangeTimeoutError),\n/* harmony export */   TransportInterfaceNotAvailable: () => (/* binding */ TransportInterfaceNotAvailable),\n/* harmony export */   TransportOpenUserCancelled: () => (/* binding */ TransportOpenUserCancelled),\n/* harmony export */   TransportRaceCondition: () => (/* binding */ TransportRaceCondition),\n/* harmony export */   TransportStatusError: () => (/* binding */ TransportStatusError),\n/* harmony export */   TransportWebUSBGestureRequired: () => (/* binding */ TransportWebUSBGestureRequired),\n/* harmony export */   TronEmptyAccount: () => (/* binding */ TronEmptyAccount),\n/* harmony export */   UnavailableTezosOriginatedAccountReceive: () => (/* binding */ UnavailableTezosOriginatedAccountReceive),\n/* harmony export */   UnavailableTezosOriginatedAccountSend: () => (/* binding */ UnavailableTezosOriginatedAccountSend),\n/* harmony export */   UnexpectedBootloader: () => (/* binding */ UnexpectedBootloader),\n/* harmony export */   UnknownMCU: () => (/* binding */ UnknownMCU),\n/* harmony export */   UnresponsiveDeviceError: () => (/* binding */ UnresponsiveDeviceError),\n/* harmony export */   UpdateFetchFileFail: () => (/* binding */ UpdateFetchFileFail),\n/* harmony export */   UpdateIncorrectHash: () => (/* binding */ UpdateIncorrectHash),\n/* harmony export */   UpdateIncorrectSig: () => (/* binding */ UpdateIncorrectSig),\n/* harmony export */   UpdateYourApp: () => (/* binding */ UpdateYourApp),\n/* harmony export */   UserRefusedAddress: () => (/* binding */ UserRefusedAddress),\n/* harmony export */   UserRefusedAllowManager: () => (/* binding */ UserRefusedAllowManager),\n/* harmony export */   UserRefusedDeviceNameChange: () => (/* binding */ UserRefusedDeviceNameChange),\n/* harmony export */   UserRefusedFirmwareUpdate: () => (/* binding */ UserRefusedFirmwareUpdate),\n/* harmony export */   UserRefusedOnDevice: () => (/* binding */ UserRefusedOnDevice),\n/* harmony export */   WebsocketConnectionError: () => (/* binding */ WebsocketConnectionError),\n/* harmony export */   WebsocketConnectionFailed: () => (/* binding */ WebsocketConnectionFailed),\n/* harmony export */   WrongAppForCurrency: () => (/* binding */ WrongAppForCurrency),\n/* harmony export */   WrongDeviceForAccount: () => (/* binding */ WrongDeviceForAccount),\n/* harmony export */   WrongDeviceForAccountPayout: () => (/* binding */ WrongDeviceForAccountPayout),\n/* harmony export */   WrongDeviceForAccountRefund: () => (/* binding */ WrongDeviceForAccountRefund),\n/* harmony export */   addCustomErrorDeserializer: () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_0__.addCustomErrorDeserializer),\n/* harmony export */   createCustomErrorClass: () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass),\n/* harmony export */   deserializeError: () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_0__.deserializeError),\n/* harmony export */   getAltStatusMessage: () => (/* binding */ getAltStatusMessage),\n/* harmony export */   serializeError: () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_0__.serializeError)\n/* harmony export */ });\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/@ledgerhq/errors/lib-es/helpers.js\");\n\n\nconst AccountNameRequiredError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"AccountNameRequired\");\nconst AccountNotSupported = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"AccountNotSupported\");\nconst AccountAwaitingSendPendingOperations = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"AccountAwaitingSendPendingOperations\");\nconst AmountRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"AmountRequired\");\nconst BluetoothRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"BluetoothRequired\");\nconst BtcUnmatchedApp = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"BtcUnmatchedApp\");\nconst CantOpenDevice = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"CantOpenDevice\");\nconst CashAddrNotSupported = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"CashAddrNotSupported\");\nconst ClaimRewardsFeesWarning = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ClaimRewardsFeesWarning\");\nconst CurrencyNotSupported = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"CurrencyNotSupported\");\nconst DeviceAppVerifyNotSupported = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceAppVerifyNotSupported\");\nconst DeviceGenuineSocketEarlyClose = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceGenuineSocketEarlyClose\");\nconst DeviceNotGenuineError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceNotGenuine\");\nconst DeviceOnDashboardExpected = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceOnDashboardExpected\");\nconst DeviceOnDashboardUnexpected = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceOnDashboardUnexpected\");\nconst DeviceInOSUExpected = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceInOSUExpected\");\nconst DeviceHalted = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceHalted\");\nconst DeviceNameInvalid = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceNameInvalid\");\nconst DeviceSocketFail = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceSocketFail\");\nconst DeviceSocketNoBulkStatus = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceSocketNoBulkStatus\");\nconst DeviceNeedsRestart = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceSocketNoBulkStatus\");\nconst UnresponsiveDeviceError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UnresponsiveDeviceError\");\nconst DisconnectedDevice = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DisconnectedDevice\");\nconst DisconnectedDeviceDuringOperation = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DisconnectedDeviceDuringOperation\");\nconst DeviceExtractOnboardingStateError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceExtractOnboardingStateError\");\nconst DeviceOnboardingStatePollingError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceOnboardingStatePollingError\");\nconst EnpointConfigError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"EnpointConfig\");\nconst EthAppPleaseEnableContractData = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"EthAppPleaseEnableContractData\");\nconst FeeEstimationFailed = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"FeeEstimationFailed\");\nconst FirmwareNotRecognized = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"FirmwareNotRecognized\");\nconst HardResetFail = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"HardResetFail\");\nconst InvalidXRPTag = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"InvalidXRPTag\");\nconst InvalidAddress = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"InvalidAddress\");\nconst InvalidNonce = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"InvalidNonce\");\nconst InvalidAddressBecauseDestinationIsAlsoSource = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"InvalidAddressBecauseDestinationIsAlsoSource\");\nconst LatestMCUInstalledError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"LatestMCUInstalledError\");\nconst UnknownMCU = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UnknownMCU\");\nconst LedgerAPIError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"LedgerAPIError\");\nconst LedgerAPIErrorWithMessage = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"LedgerAPIErrorWithMessage\");\nconst LedgerAPINotAvailable = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"LedgerAPINotAvailable\");\nconst ManagerAppAlreadyInstalledError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ManagerAppAlreadyInstalled\");\nconst ManagerAppRelyOnBTCError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ManagerAppRelyOnBTC\");\nconst ManagerAppDepInstallRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ManagerAppDepInstallRequired\");\nconst ManagerAppDepUninstallRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ManagerAppDepUninstallRequired\");\nconst ManagerDeviceLockedError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ManagerDeviceLocked\");\nconst ManagerFirmwareNotEnoughSpaceError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ManagerFirmwareNotEnoughSpace\");\nconst ManagerNotEnoughSpaceError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ManagerNotEnoughSpace\");\nconst ManagerUninstallBTCDep = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ManagerUninstallBTCDep\");\nconst NetworkDown = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NetworkDown\");\nconst NetworkError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NetworkError\");\nconst NoAddressesFound = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NoAddressesFound\");\nconst NotEnoughBalance = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NotEnoughBalance\");\nconst NotEnoughBalanceSwap = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NotEnoughBalanceSwap\");\nconst NotEnoughBalanceToDelegate = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NotEnoughBalanceToDelegate\");\nconst NotEnoughBalanceInParentAccount = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NotEnoughBalanceInParentAccount\");\nconst NotEnoughSpendableBalance = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NotEnoughSpendableBalance\");\nconst NotEnoughBalanceBecauseDestinationNotCreated = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NotEnoughBalanceBecauseDestinationNotCreated\");\nconst NoAccessToCamera = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NoAccessToCamera\");\nconst NotEnoughGas = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NotEnoughGas\");\n// Error message specifically for the PTX swap flow\nconst NotEnoughGasSwap = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NotEnoughGasSwap\");\nconst TronEmptyAccount = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"TronEmptyAccount\");\nconst MaybeKeepTronAccountAlive = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"MaybeKeepTronAccountAlive\");\nconst NotSupportedLegacyAddress = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NotSupportedLegacyAddress\");\nconst GasLessThanEstimate = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"GasLessThanEstimate\");\nconst PriorityFeeTooLow = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"PriorityFeeTooLow\");\nconst PriorityFeeTooHigh = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"PriorityFeeTooHigh\");\nconst PriorityFeeHigherThanMaxFee = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"PriorityFeeHigherThanMaxFee\");\nconst MaxFeeTooLow = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"MaxFeeTooLow\");\nconst PasswordsDontMatchError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"PasswordsDontMatch\");\nconst PasswordIncorrectError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"PasswordIncorrect\");\nconst RecommendSubAccountsToEmpty = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"RecommendSubAccountsToEmpty\");\nconst RecommendUndelegation = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"RecommendUndelegation\");\nconst TimeoutTagged = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"TimeoutTagged\");\nconst UnexpectedBootloader = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UnexpectedBootloader\");\nconst MCUNotGenuineToDashboard = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"MCUNotGenuineToDashboard\");\nconst RecipientRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"RecipientRequired\");\nconst UnavailableTezosOriginatedAccountReceive = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UnavailableTezosOriginatedAccountReceive\");\nconst UnavailableTezosOriginatedAccountSend = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UnavailableTezosOriginatedAccountSend\");\nconst UpdateFetchFileFail = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UpdateFetchFileFail\");\nconst UpdateIncorrectHash = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UpdateIncorrectHash\");\nconst UpdateIncorrectSig = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UpdateIncorrectSig\");\nconst UpdateYourApp = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UpdateYourApp\");\nconst UserRefusedDeviceNameChange = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UserRefusedDeviceNameChange\");\nconst UserRefusedAddress = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UserRefusedAddress\");\nconst UserRefusedFirmwareUpdate = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UserRefusedFirmwareUpdate\");\nconst UserRefusedAllowManager = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UserRefusedAllowManager\");\nconst UserRefusedOnDevice = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"UserRefusedOnDevice\"); // TODO rename because it's just for transaction refusal\nconst PinNotSet = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"PinNotSet\");\nconst ExpertModeRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ExpertModeRequired\");\nconst TransportOpenUserCancelled = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"TransportOpenUserCancelled\");\nconst TransportInterfaceNotAvailable = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"TransportInterfaceNotAvailable\");\nconst TransportRaceCondition = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"TransportRaceCondition\");\nconst TransportWebUSBGestureRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"TransportWebUSBGestureRequired\");\nconst TransactionHasBeenValidatedError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"TransactionHasBeenValidatedError\");\nconst TransportExchangeTimeoutError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"TransportExchangeTimeoutError\");\nconst DeviceShouldStayInApp = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DeviceShouldStayInApp\");\nconst WebsocketConnectionError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"WebsocketConnectionError\");\nconst WebsocketConnectionFailed = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"WebsocketConnectionFailed\");\nconst WrongDeviceForAccount = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"WrongDeviceForAccount\");\nconst WrongDeviceForAccountPayout = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"WrongDeviceForAccountPayout\");\nconst WrongDeviceForAccountRefund = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"WrongDeviceForAccountRefund\");\nconst WrongAppForCurrency = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"WrongAppForCurrency\");\nconst ETHAddressNonEIP = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ETHAddressNonEIP\");\nconst CantScanQRCode = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"CantScanQRCode\");\nconst FeeNotLoaded = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"FeeNotLoaded\");\nconst FeeNotLoadedSwap = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"FeeNotLoadedSwap\");\nconst FeeRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"FeeRequired\");\nconst FeeTooHigh = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"FeeTooHigh\");\nconst PendingOperation = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"PendingOperation\");\nconst SyncError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"SyncError\");\nconst PairingFailed = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"PairingFailed\");\nconst PeerRemovedPairing = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"PeerRemovedPairing\");\nconst GenuineCheckFailed = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"GenuineCheckFailed\");\nconst LedgerAPI4xx = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"LedgerAPI4xx\");\nconst LedgerAPI5xx = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"LedgerAPI5xx\");\nconst FirmwareOrAppUpdateRequired = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"FirmwareOrAppUpdateRequired\");\n// SpeedUp / Cancel EVM tx\nconst ReplacementTransactionUnderpriced = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"ReplacementTransactionUnderpriced\");\n// Bitcoin family\nconst OpReturnDataSizeLimit = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"OpReturnSizeLimit\");\nconst DustLimit = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DustLimit\");\n// Language\nconst LanguageNotFound = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"LanguageNotFound\");\n// db stuff, no need to translate\nconst NoDBPathGiven = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"NoDBPathGiven\");\nconst DBWrongPassword = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DBWrongPassword\");\nconst DBNotReset = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DBNotReset\");\nconst SequenceNumberError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"SequenceNumberError\");\nconst DisabledTransactionBroadcastError = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.createCustomErrorClass)(\"DisabledTransactionBroadcastError\");\n/**\n * Type of a Transport error used to represent all equivalent errors coming from all possible implementation of Transport\n */ var HwTransportErrorType;\n(function(HwTransportErrorType) {\n    HwTransportErrorType[\"Unknown\"] = \"Unknown\";\n    HwTransportErrorType[\"LocationServicesDisabled\"] = \"LocationServicesDisabled\";\n    HwTransportErrorType[\"LocationServicesUnauthorized\"] = \"LocationServicesUnauthorized\";\n    HwTransportErrorType[\"BluetoothScanStartFailed\"] = \"BluetoothScanStartFailed\";\n})(HwTransportErrorType || (HwTransportErrorType = {}));\n/**\n * Represents an error coming from the usage of any Transport implementation.\n *\n * Needed to map a specific implementation error into an error that\n * can be managed by any code unaware of the specific Transport implementation\n * that was used.\n */ class HwTransportError extends Error {\n    constructor(type, message){\n        super(message);\n        this.name = \"HwTransportError\";\n        this.type = type;\n        // Needed as long as we target < ES6\n        Object.setPrototypeOf(this, HwTransportError.prototype);\n    }\n}\n/**\n * TransportError is used for any generic transport errors.\n * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.\n */ class TransportError extends Error {\n    constructor(message, id){\n        const name = \"TransportError\";\n        super(message || name);\n        this.name = name;\n        this.message = message;\n        this.stack = new Error(message).stack;\n        this.id = id;\n    }\n}\n(0,_helpers__WEBPACK_IMPORTED_MODULE_0__.addCustomErrorDeserializer)(\"TransportError\", (e)=>new TransportError(e.message, e.id));\nconst StatusCodes = {\n    ACCESS_CONDITION_NOT_FULFILLED: 0x9804,\n    ALGORITHM_NOT_SUPPORTED: 0x9484,\n    CLA_NOT_SUPPORTED: 0x6e00,\n    CODE_BLOCKED: 0x9840,\n    CODE_NOT_INITIALIZED: 0x9802,\n    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,\n    CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,\n    CONTRADICTION_INVALIDATION: 0x9810,\n    CONTRADICTION_SECRET_CODE_STATUS: 0x9808,\n    DEVICE_IN_RECOVERY_MODE: 0x662f,\n    CUSTOM_IMAGE_EMPTY: 0x662e,\n    FILE_ALREADY_EXISTS: 0x6a89,\n    FILE_NOT_FOUND: 0x9404,\n    GP_AUTH_FAILED: 0x6300,\n    HALTED: 0x6faa,\n    INCONSISTENT_FILE: 0x9408,\n    INCORRECT_DATA: 0x6a80,\n    INCORRECT_LENGTH: 0x6700,\n    INCORRECT_P1_P2: 0x6b00,\n    INS_NOT_SUPPORTED: 0x6d00,\n    DEVICE_NOT_ONBOARDED: 0x6d07,\n    DEVICE_NOT_ONBOARDED_2: 0x6611,\n    INVALID_KCV: 0x9485,\n    INVALID_OFFSET: 0x9402,\n    LICENSING: 0x6f42,\n    LOCKED_DEVICE: 0x5515,\n    MAX_VALUE_REACHED: 0x9850,\n    MEMORY_PROBLEM: 0x9240,\n    MISSING_CRITICAL_PARAMETER: 0x6800,\n    NO_EF_SELECTED: 0x9400,\n    NOT_ENOUGH_MEMORY_SPACE: 0x6a84,\n    OK: 0x9000,\n    PIN_REMAINING_ATTEMPTS: 0x63c0,\n    REFERENCED_DATA_NOT_FOUND: 0x6a88,\n    SECURITY_STATUS_NOT_SATISFIED: 0x6982,\n    TECHNICAL_PROBLEM: 0x6f00,\n    UNKNOWN_APDU: 0x6d02,\n    USER_REFUSED_ON_DEVICE: 0x5501,\n    NOT_ENOUGH_SPACE: 0x5102,\n    APP_NOT_FOUND_OR_INVALID_CONTEXT: 0x5123,\n    INVALID_APP_NAME_LENGTH: 0x670a,\n    GEN_AES_KEY_FAILED: 0x5419,\n    INTERNAL_CRYPTO_OPERATION_FAILED: 0x541a,\n    INTERNAL_COMPUTE_AES_CMAC_FAILED: 0x541b,\n    ENCRYPT_APP_STORAGE_FAILED: 0x541c,\n    INVALID_BACKUP_STATE: 0x6642,\n    PIN_NOT_SET: 0x5502,\n    INVALID_BACKUP_LENGTH: 0x6733,\n    INVALID_RESTORE_STATE: 0x6643,\n    INVALID_CHUNK_LENGTH: 0x6734,\n    INVALID_BACKUP_HEADER: 0x684a,\n    // Not documented:\n    TRUSTCHAIN_WRONG_SEED: 0xb007\n};\nfunction getAltStatusMessage(code) {\n    switch(code){\n        // improve text of most common errors\n        case 0x6700:\n            return \"Incorrect length\";\n        case 0x6800:\n            return \"Missing critical parameter\";\n        case 0x6982:\n            return \"Security not satisfied (dongle locked or have invalid access rights)\";\n        case 0x6985:\n            return \"Condition of use not satisfied (denied by the user?)\";\n        case 0x6a80:\n            return \"Invalid data received\";\n        case 0x6b00:\n            return \"Invalid parameter received\";\n        case 0x5515:\n            return \"Locked device\";\n    }\n    if (0x6f00 <= code && code <= 0x6fff) {\n        return \"Internal error, please report\";\n    }\n}\n/**\n * Error thrown when a device returned a non success status.\n * the error.statusCode is one of the `StatusCodes` exported by this library.\n */ class TransportStatusError extends Error {\n    /**\n     * @param statusCode The error status code coming from a Transport implementation\n     * @param options containing:\n     *  - canBeMappedToChildError: enable the mapping of TransportStatusError to an error extending/inheriting from it\n     *  . Ex: LockedDeviceError. Default to true.\n     */ constructor(statusCode, { canBeMappedToChildError = true } = {}){\n        const statusText = Object.keys(StatusCodes).find((k)=>StatusCodes[k] === statusCode) || \"UNKNOWN_ERROR\";\n        const smsg = getAltStatusMessage(statusCode) || statusText;\n        const statusCodeStr = statusCode.toString(16);\n        const message = `Ledger device: ${smsg} (0x${statusCodeStr})`;\n        super(message);\n        this.name = \"TransportStatusError\";\n        this.statusCode = statusCode;\n        this.statusText = statusText;\n        Object.setPrototypeOf(this, TransportStatusError.prototype);\n        // Maps to a LockedDeviceError\n        if (canBeMappedToChildError && statusCode === StatusCodes.LOCKED_DEVICE) {\n            return new LockedDeviceError(message);\n        }\n    }\n}\nclass LockedDeviceError extends TransportStatusError {\n    constructor(message){\n        super(StatusCodes.LOCKED_DEVICE, {\n            canBeMappedToChildError: false\n        });\n        if (message) {\n            this.message = message;\n        }\n        this.name = \"LockedDeviceError\";\n        Object.setPrototypeOf(this, LockedDeviceError.prototype);\n    }\n}\n(0,_helpers__WEBPACK_IMPORTED_MODULE_0__.addCustomErrorDeserializer)(\"TransportStatusError\", (e)=>new TransportStatusError(e.statusCode)); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ledgerhq/errors/lib-es/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ledgerhq/hw-transport-webhid/lib-es/TransportWebHID.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@ledgerhq/hw-transport-webhid/lib-es/TransportWebHID.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ledgerhq_hw_transport__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ledgerhq/hw-transport */ \"(ssr)/./node_modules/@ledgerhq/hw-transport/lib-es/Transport.js\");\n/* harmony import */ var _ledgerhq_devices_lib_hid_framing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ledgerhq/devices/lib/hid-framing */ \"(ssr)/./node_modules/@ledgerhq/devices/lib/hid-framing.js\");\n/* harmony import */ var _ledgerhq_devices__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ledgerhq/devices */ \"(ssr)/./node_modules/@ledgerhq/devices/lib-es/index.js\");\n/* harmony import */ var _ledgerhq_logs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ledgerhq/logs */ \"(ssr)/./node_modules/@ledgerhq/logs/lib-es/index.js\");\n/* harmony import */ var _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ledgerhq/errors */ \"(ssr)/./node_modules/@ledgerhq/errors/lib-es/index.js\");\nvar __extends = undefined && undefined.__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = undefined && undefined.__generator || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\nvar __read = undefined && undefined.__read || function(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n};\n\n\n\n\n\nvar ledgerDevices = [\n    {\n        vendorId: _ledgerhq_devices__WEBPACK_IMPORTED_MODULE_2__.ledgerUSBVendorId\n    }\n];\nvar isSupported = function() {\n    return Promise.resolve(!!(window.navigator && window.navigator.hid));\n};\nvar getHID = function() {\n    // $FlowFixMe\n    var hid = navigator.hid;\n    if (!hid) throw new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_4__.TransportError(\"navigator.hid is not supported\", \"HIDNotSupported\");\n    return hid;\n};\nfunction requestLedgerDevices() {\n    return __awaiter(this, void 0, void 0, function() {\n        var device;\n        return __generator(this, function(_a) {\n            switch(_a.label){\n                case 0:\n                    return [\n                        4 /*yield*/ ,\n                        getHID().requestDevice({\n                            filters: ledgerDevices\n                        })\n                    ];\n                case 1:\n                    device = _a.sent();\n                    if (Array.isArray(device)) return [\n                        2 /*return*/ ,\n                        device\n                    ];\n                    return [\n                        2 /*return*/ ,\n                        [\n                            device\n                        ]\n                    ];\n            }\n        });\n    });\n}\nfunction getLedgerDevices() {\n    return __awaiter(this, void 0, void 0, function() {\n        var devices;\n        return __generator(this, function(_a) {\n            switch(_a.label){\n                case 0:\n                    return [\n                        4 /*yield*/ ,\n                        getHID().getDevices()\n                    ];\n                case 1:\n                    devices = _a.sent();\n                    return [\n                        2 /*return*/ ,\n                        devices.filter(function(d) {\n                            return d.vendorId === _ledgerhq_devices__WEBPACK_IMPORTED_MODULE_2__.ledgerUSBVendorId;\n                        })\n                    ];\n            }\n        });\n    });\n}\nfunction getFirstLedgerDevice() {\n    return __awaiter(this, void 0, void 0, function() {\n        var existingDevices, devices;\n        return __generator(this, function(_a) {\n            switch(_a.label){\n                case 0:\n                    return [\n                        4 /*yield*/ ,\n                        getLedgerDevices()\n                    ];\n                case 1:\n                    existingDevices = _a.sent();\n                    if (existingDevices.length > 0) return [\n                        2 /*return*/ ,\n                        existingDevices[0]\n                    ];\n                    return [\n                        4 /*yield*/ ,\n                        requestLedgerDevices()\n                    ];\n                case 2:\n                    devices = _a.sent();\n                    return [\n                        2 /*return*/ ,\n                        devices[0]\n                    ];\n            }\n        });\n    });\n}\n/**\n * WebHID Transport implementation\n * @example\n * import TransportWebHID from \"@ledgerhq/hw-transport-webhid\";\n * ...\n * TransportWebHID.create().then(transport => ...)\n */ var TransportWebHID = /** @class */ function(_super) {\n    __extends(TransportWebHID, _super);\n    function TransportWebHID(device) {\n        var _this = _super.call(this) || this;\n        _this.channel = Math.floor(Math.random() * 0xffff);\n        _this.packetSize = 64;\n        _this.inputs = [];\n        _this.read = function() {\n            if (_this.inputs.length) {\n                return Promise.resolve(_this.inputs.shift());\n            }\n            return new Promise(function(success) {\n                _this.inputCallback = success;\n            });\n        };\n        _this.onInputReport = function(e) {\n            var buffer = Buffer.from(e.data.buffer);\n            if (_this.inputCallback) {\n                _this.inputCallback(buffer);\n                _this.inputCallback = null;\n            } else {\n                _this.inputs.push(buffer);\n            }\n        };\n        _this._disconnectEmitted = false;\n        _this._emitDisconnect = function(e) {\n            if (_this._disconnectEmitted) return;\n            _this._disconnectEmitted = true;\n            _this.emit(\"disconnect\", e);\n        };\n        /**\n         * Exchange with the device using APDU protocol.\n         * @param apdu\n         * @returns a promise of apdu response\n         */ _this.exchange = function(apdu) {\n            return __awaiter(_this, void 0, void 0, function() {\n                var b;\n                var _this = this;\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            return [\n                                4 /*yield*/ ,\n                                this.exchangeAtomicImpl(function() {\n                                    return __awaiter(_this, void 0, void 0, function() {\n                                        var _a, channel, packetSize, framing, blocks, i, result, acc, buffer;\n                                        return __generator(this, function(_b) {\n                                            switch(_b.label){\n                                                case 0:\n                                                    _a = this, channel = _a.channel, packetSize = _a.packetSize;\n                                                    (0,_ledgerhq_logs__WEBPACK_IMPORTED_MODULE_3__.log)(\"apdu\", \"=> \" + apdu.toString(\"hex\"));\n                                                    framing = (0,_ledgerhq_devices_lib_hid_framing__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(channel, packetSize);\n                                                    blocks = framing.makeBlocks(apdu);\n                                                    i = 0;\n                                                    _b.label = 1;\n                                                case 1:\n                                                    if (!(i < blocks.length)) return [\n                                                        3 /*break*/ ,\n                                                        4\n                                                    ];\n                                                    return [\n                                                        4 /*yield*/ ,\n                                                        this.device.sendReport(0, blocks[i])\n                                                    ];\n                                                case 2:\n                                                    _b.sent();\n                                                    _b.label = 3;\n                                                case 3:\n                                                    i++;\n                                                    return [\n                                                        3 /*break*/ ,\n                                                        1\n                                                    ];\n                                                case 4:\n                                                    if (!!(result = framing.getReducedResult(acc))) return [\n                                                        3 /*break*/ ,\n                                                        6\n                                                    ];\n                                                    return [\n                                                        4 /*yield*/ ,\n                                                        this.read()\n                                                    ];\n                                                case 5:\n                                                    buffer = _b.sent();\n                                                    acc = framing.reduceResponse(acc, buffer);\n                                                    return [\n                                                        3 /*break*/ ,\n                                                        4\n                                                    ];\n                                                case 6:\n                                                    (0,_ledgerhq_logs__WEBPACK_IMPORTED_MODULE_3__.log)(\"apdu\", \"<= \" + result.toString(\"hex\"));\n                                                    return [\n                                                        2 /*return*/ ,\n                                                        result\n                                                    ];\n                                            }\n                                        });\n                                    });\n                                })[\"catch\"](function(e) {\n                                    if (e && e.message && e.message.includes(\"write\")) {\n                                        _this._emitDisconnect(e);\n                                        throw new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_4__.DisconnectedDeviceDuringOperation(e.message);\n                                    }\n                                    throw e;\n                                })\n                            ];\n                        case 1:\n                            b = _a.sent();\n                            return [\n                                2 /*return*/ ,\n                                b\n                            ];\n                    }\n                });\n            });\n        };\n        _this.device = device;\n        _this.deviceModel = typeof device.productId === \"number\" ? (0,_ledgerhq_devices__WEBPACK_IMPORTED_MODULE_2__.identifyUSBProductId)(device.productId) : undefined;\n        device.addEventListener(\"inputreport\", _this.onInputReport);\n        return _this;\n    }\n    /**\n     * Similar to create() except it will always display the device permission (even if some devices are already accepted).\n     */ TransportWebHID.request = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var _a, device;\n            return __generator(this, function(_b) {\n                switch(_b.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            requestLedgerDevices()\n                        ];\n                    case 1:\n                        _a = __read.apply(void 0, [\n                            _b.sent(),\n                            1\n                        ]), device = _a[0];\n                        return [\n                            2 /*return*/ ,\n                            TransportWebHID.open(device)\n                        ];\n                }\n            });\n        });\n    };\n    /**\n     * Similar to create() except it will never display the device permission (it returns a Promise<?Transport>, null if it fails to find a device).\n     */ TransportWebHID.openConnected = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var devices;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            getLedgerDevices()\n                        ];\n                    case 1:\n                        devices = _a.sent();\n                        if (devices.length === 0) return [\n                            2 /*return*/ ,\n                            null\n                        ];\n                        return [\n                            2 /*return*/ ,\n                            TransportWebHID.open(devices[0])\n                        ];\n                }\n            });\n        });\n    };\n    /**\n     * Create a Ledger transport with a HIDDevice\n     */ TransportWebHID.open = function(device) {\n        return __awaiter(this, void 0, void 0, function() {\n            var transport, onDisconnect;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            device.open()\n                        ];\n                    case 1:\n                        _a.sent();\n                        transport = new TransportWebHID(device);\n                        onDisconnect = function(e) {\n                            if (device === e.device) {\n                                getHID().removeEventListener(\"disconnect\", onDisconnect);\n                                transport._emitDisconnect(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_4__.DisconnectedDevice());\n                            }\n                        };\n                        getHID().addEventListener(\"disconnect\", onDisconnect);\n                        return [\n                            2 /*return*/ ,\n                            transport\n                        ];\n                }\n            });\n        });\n    };\n    /**\n     * Release the transport device\n     */ TransportWebHID.prototype.close = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.exchangeBusyPromise\n                        ];\n                    case 1:\n                        _a.sent();\n                        this.device.removeEventListener(\"inputreport\", this.onInputReport);\n                        return [\n                            4 /*yield*/ ,\n                            this.device.close()\n                        ];\n                    case 2:\n                        _a.sent();\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    TransportWebHID.prototype.setScrambleKey = function() {};\n    /**\n     * Check if WebUSB transport is supported.\n     */ TransportWebHID.isSupported = isSupported;\n    /**\n     * List the WebUSB devices that was previously authorized by the user.\n     */ TransportWebHID.list = getLedgerDevices;\n    /**\n     * Actively listen to WebUSB devices and emit ONE device\n     * that was either accepted before, if not it will trigger the native permission UI.\n     *\n     * Important: it must be called in the context of a UI click!\n     */ TransportWebHID.listen = function(observer) {\n        var unsubscribed = false;\n        getFirstLedgerDevice().then(function(device) {\n            if (!device) {\n                observer.error(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_4__.TransportOpenUserCancelled(\"Access denied to use Ledger device\"));\n            } else if (!unsubscribed) {\n                var deviceModel = typeof device.productId === \"number\" ? (0,_ledgerhq_devices__WEBPACK_IMPORTED_MODULE_2__.identifyUSBProductId)(device.productId) : undefined;\n                observer.next({\n                    type: \"add\",\n                    descriptor: device,\n                    deviceModel: deviceModel\n                });\n                observer.complete();\n            }\n        }, function(error) {\n            observer.error(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_4__.TransportOpenUserCancelled(error.message));\n        });\n        function unsubscribe() {\n            unsubscribed = true;\n        }\n        return {\n            unsubscribe: unsubscribe\n        };\n    };\n    return TransportWebHID;\n}(_ledgerhq_hw_transport__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TransportWebHID); //# sourceMappingURL=TransportWebHID.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ledgerhq/hw-transport-webhid/lib-es/TransportWebHID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ledgerhq/hw-transport/lib-es/Transport.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ledgerhq/hw-transport/lib-es/Transport.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StatusCodes: () => (/* reexport safe */ _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.StatusCodes),\n/* harmony export */   TransportError: () => (/* reexport safe */ _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError),\n/* harmony export */   TransportStatusError: () => (/* reexport safe */ _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportStatusError),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getAltStatusMessage: () => (/* reexport safe */ _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.getAltStatusMessage)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ledgerhq/errors */ \"(ssr)/./node_modules/@ledgerhq/errors/lib-es/index.js\");\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = undefined && undefined.__generator || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\nvar __read = undefined && undefined.__read || function(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n};\nvar __spreadArray = undefined && undefined.__spreadArray || function(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __values = undefined && undefined.__values || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\n\n\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */ var Transport = /** @class */ function() {\n    function Transport() {\n        var _this = this;\n        this.exchangeTimeout = 30000;\n        this.unresponsiveTimeout = 15000;\n        this.deviceModel = null;\n        this._events = new (events__WEBPACK_IMPORTED_MODULE_0___default())();\n        /**\n         * wrapper on top of exchange to simplify work of the implementation.\n         * @param cla\n         * @param ins\n         * @param p1\n         * @param p2\n         * @param data\n         * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n         * @return a Promise of response buffer\n         */ this.send = function(cla, ins, p1, p2, data, statusList) {\n            if (data === void 0) {\n                data = Buffer.alloc(0);\n            }\n            if (statusList === void 0) {\n                statusList = [\n                    _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.StatusCodes.OK\n                ];\n            }\n            return __awaiter(_this, void 0, void 0, function() {\n                var response, sw;\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            if (data.length >= 256) {\n                                throw new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError(\"data.length exceed 256 bytes limit. Got: \" + data.length, \"DataLengthTooBig\");\n                            }\n                            return [\n                                4 /*yield*/ ,\n                                this.exchange(Buffer.concat([\n                                    Buffer.from([\n                                        cla,\n                                        ins,\n                                        p1,\n                                        p2\n                                    ]),\n                                    Buffer.from([\n                                        data.length\n                                    ]),\n                                    data\n                                ]))\n                            ];\n                        case 1:\n                            response = _a.sent();\n                            sw = response.readUInt16BE(response.length - 2);\n                            if (!statusList.some(function(s) {\n                                return s === sw;\n                            })) {\n                                throw new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportStatusError(sw);\n                            }\n                            return [\n                                2 /*return*/ ,\n                                response\n                            ];\n                    }\n                });\n            });\n        };\n        this.exchangeAtomicImpl = function(f) {\n            return __awaiter(_this, void 0, void 0, function() {\n                var resolveBusy, busyPromise, unresponsiveReached, timeout, res;\n                var _this = this;\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            if (this.exchangeBusyPromise) {\n                                throw new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportRaceCondition(\"An action was already pending on the Ledger device. Please deny or reconnect.\");\n                            }\n                            busyPromise = new Promise(function(r) {\n                                resolveBusy = r;\n                            });\n                            this.exchangeBusyPromise = busyPromise;\n                            unresponsiveReached = false;\n                            timeout = setTimeout(function() {\n                                unresponsiveReached = true;\n                                _this.emit(\"unresponsive\");\n                            }, this.unresponsiveTimeout);\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([\n                                1,\n                                ,\n                                3,\n                                4\n                            ]);\n                            return [\n                                4 /*yield*/ ,\n                                f()\n                            ];\n                        case 2:\n                            res = _a.sent();\n                            if (unresponsiveReached) {\n                                this.emit(\"responsive\");\n                            }\n                            return [\n                                2 /*return*/ ,\n                                res\n                            ];\n                        case 3:\n                            clearTimeout(timeout);\n                            if (resolveBusy) resolveBusy();\n                            this.exchangeBusyPromise = null;\n                            return [\n                                7 /*endfinally*/ \n                            ];\n                        case 4:\n                            return [\n                                2 /*return*/ \n                            ];\n                    }\n                });\n            });\n        };\n        this._appAPIlock = null;\n    }\n    /**\n     * low level api to communicate with the device\n     * This method is for implementations to implement but should not be directly called.\n     * Instead, the recommanded way is to use send() method\n     * @param apdu the data to send\n     * @return a Promise of response data\n     */ Transport.prototype.exchange = function(_apdu) {\n        throw new Error(\"exchange not implemented\");\n    };\n    /**\n     * set the \"scramble key\" for the next exchanges with the device.\n     * Each App can have a different scramble key and they internally will set it at instanciation.\n     * @param key the scramble key\n     */ Transport.prototype.setScrambleKey = function(_key) {};\n    /**\n     * close the exchange with the device.\n     * @return a Promise that ends when the transport is closed.\n     */ Transport.prototype.close = function() {\n        return Promise.resolve();\n    };\n    /**\n     * Listen to an event on an instance of transport.\n     * Transport implementation can have specific events. Here is the common events:\n     * * `\"disconnect\"` : triggered if Transport is disconnected\n     */ Transport.prototype.on = function(eventName, cb) {\n        this._events.on(eventName, cb);\n    };\n    /**\n     * Stop listening to an event on an instance of transport.\n     */ Transport.prototype.off = function(eventName, cb) {\n        this._events.removeListener(eventName, cb);\n    };\n    Transport.prototype.emit = function(event) {\n        var _a;\n        var args = [];\n        for(var _i = 1; _i < arguments.length; _i++){\n            args[_i - 1] = arguments[_i];\n        }\n        (_a = this._events).emit.apply(_a, __spreadArray([\n            event\n        ], __read(args), false));\n    };\n    /**\n     * Enable or not logs of the binary exchange\n     */ Transport.prototype.setDebugMode = function() {\n        console.warn(\"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\");\n    };\n    /**\n     * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n     */ Transport.prototype.setExchangeTimeout = function(exchangeTimeout) {\n        this.exchangeTimeout = exchangeTimeout;\n    };\n    /**\n     * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n     */ Transport.prototype.setExchangeUnresponsiveTimeout = function(unresponsiveTimeout) {\n        this.unresponsiveTimeout = unresponsiveTimeout;\n    };\n    /**\n     * create() allows to open the first descriptor available or\n     * throw if there is none or if timeout is reached.\n     * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n     * @example\n    TransportFoo.create().then(transport => ...)\n     */ Transport.create = function(openTimeout, listenTimeout) {\n        var _this = this;\n        if (openTimeout === void 0) {\n            openTimeout = 3000;\n        }\n        return new Promise(function(resolve, reject) {\n            var found = false;\n            var sub = _this.listen({\n                next: function(e) {\n                    found = true;\n                    if (sub) sub.unsubscribe();\n                    if (listenTimeoutId) clearTimeout(listenTimeoutId);\n                    _this.open(e.descriptor, openTimeout).then(resolve, reject);\n                },\n                error: function(e) {\n                    if (listenTimeoutId) clearTimeout(listenTimeoutId);\n                    reject(e);\n                },\n                complete: function() {\n                    if (listenTimeoutId) clearTimeout(listenTimeoutId);\n                    if (!found) {\n                        reject(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError(_this.ErrorMessage_NoDeviceFound, \"NoDeviceFound\"));\n                    }\n                }\n            });\n            var listenTimeoutId = listenTimeout ? setTimeout(function() {\n                sub.unsubscribe();\n                reject(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError(_this.ErrorMessage_ListenTimeout, \"ListenTimeout\"));\n            }, listenTimeout) : null;\n        });\n    };\n    Transport.prototype.decorateAppAPIMethods = function(self, methods, scrambleKey) {\n        var e_1, _a;\n        try {\n            for(var methods_1 = __values(methods), methods_1_1 = methods_1.next(); !methods_1_1.done; methods_1_1 = methods_1.next()){\n                var methodName = methods_1_1.value;\n                self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (methods_1_1 && !methods_1_1.done && (_a = methods_1[\"return\"])) _a.call(methods_1);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n    };\n    Transport.prototype.decorateAppAPIMethod = function(methodName, f, ctx, scrambleKey) {\n        var _this = this;\n        return function() {\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            return __awaiter(_this, void 0, void 0, function() {\n                var _appAPIlock;\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            _appAPIlock = this._appAPIlock;\n                            if (_appAPIlock) {\n                                return [\n                                    2 /*return*/ ,\n                                    Promise.reject(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError(\"Ledger Device is busy (lock \" + _appAPIlock + \")\", \"TransportLocked\"))\n                                ];\n                            }\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([\n                                1,\n                                ,\n                                3,\n                                4\n                            ]);\n                            this._appAPIlock = methodName;\n                            this.setScrambleKey(scrambleKey);\n                            return [\n                                4 /*yield*/ ,\n                                f.apply(ctx, args)\n                            ];\n                        case 2:\n                            return [\n                                2 /*return*/ ,\n                                _a.sent()\n                            ];\n                        case 3:\n                            this._appAPIlock = null;\n                            return [\n                                7 /*endfinally*/ \n                            ];\n                        case 4:\n                            return [\n                                2 /*return*/ \n                            ];\n                    }\n                });\n            });\n        };\n    };\n    Transport.ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\n    Transport.ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n    return Transport;\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Transport); //# sourceMappingURL=Transport.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ledgerhq/hw-transport/lib-es/Transport.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ledgerhq/logs/lib-es/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ledgerhq/logs/lib-es/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalTracer: () => (/* binding */ LocalTracer),\n/* harmony export */   listen: () => (/* binding */ listen),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   trace: () => (/* binding */ trace)\n/* harmony export */ });\nlet id = 0;\nconst subscribers = [];\n/**\n * Logs something\n *\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */ const log = (type, message, data)=>{\n    const obj = {\n        type,\n        id: String(++id),\n        date: new Date()\n    };\n    if (message) obj.message = message;\n    if (data) obj.data = data;\n    dispatch(obj);\n};\n/**\n * A simple tracer function, only expanding the existing log function\n *\n * Its goal is to capture more context than a log function.\n * This is simple for now, but can be improved later.\n *\n * @param context Anything representing the context where the log occurred\n */ const trace = ({ type, message, data, context })=>{\n    const obj = {\n        type,\n        id: String(++id),\n        date: new Date()\n    };\n    if (message) obj.message = message;\n    if (data) obj.data = data;\n    if (context) obj.context = context;\n    dispatch(obj);\n};\n/**\n * A simple tracer class, that can be used to avoid repetition when using the `trace` function\n *\n * Its goal is to capture more context than a log function.\n * This is simple for now, but can be improved later.\n *\n * @param type A given type (not level) for the current local tracer (\"hw\", \"withDevice\", etc.)\n * @param context Anything representing the context where the log occurred\n */ class LocalTracer {\n    constructor(type, context){\n        this.type = type;\n        this.context = context;\n    }\n    trace(message, data) {\n        trace({\n            type: this.type,\n            message,\n            data,\n            context: this.context\n        });\n    }\n    getContext() {\n        return this.context;\n    }\n    setContext(context) {\n        this.context = context;\n    }\n    updateContext(contextToAdd) {\n        this.context = Object.assign(Object.assign({}, this.context), contextToAdd);\n    }\n    getType() {\n        return this.type;\n    }\n    setType(type) {\n        this.type = type;\n    }\n    /**\n     * Create a new instance of the LocalTracer with an updated `type`\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     */ withType(type) {\n        return new LocalTracer(type, this.context);\n    }\n    /**\n     * Create a new instance of the LocalTracer with a new `context`\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     *\n     * @param context A TraceContext, that can undefined to reset the context\n     */ withContext(context) {\n        return new LocalTracer(this.type, context);\n    }\n    /**\n     * Create a new instance of the LocalTracer with an updated `context`,\n     * on which an additional context is merged with the existing one.\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     */ withUpdatedContext(contextToAdd) {\n        return new LocalTracer(this.type, Object.assign(Object.assign({}, this.context), contextToAdd));\n    }\n}\n/**\n * Adds a subscribers to the emitted logs.\n *\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */ const listen = (cb)=>{\n    subscribers.push(cb);\n    return ()=>{\n        const i = subscribers.indexOf(cb);\n        if (i !== -1) {\n            // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n            subscribers[i] = subscribers[subscribers.length - 1];\n            subscribers.pop();\n        }\n    };\n};\nfunction dispatch(log) {\n    for(let i = 0; i < subscribers.length; i++){\n        try {\n            subscribers[i](log);\n        } catch (e) {\n            console.error(e);\n        }\n    }\n}\nif (false) {} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ledgerhq/logs/lib-es/index.js\n");

/***/ })

};
;