"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jotai";
exports.ids = ["vendor-chunks/jotai"];
exports.modules = {

/***/ "(ssr)/./node_modules/jotai/esm/react.mjs":
/*!******************************************!*\
  !*** ./node_modules/jotai/esm/react.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Provider: () => (/* binding */ Provider),\n/* harmony export */   useAtom: () => (/* binding */ useAtom),\n/* harmony export */   useAtomValue: () => (/* binding */ useAtomValue),\n/* harmony export */   useSetAtom: () => (/* binding */ useSetAtom),\n/* harmony export */   useStore: () => (/* binding */ useStore)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var jotai_vanilla__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jotai/vanilla */ \"(ssr)/./node_modules/jotai/esm/vanilla.mjs\");\n/* harmony import */ var jotai_vanilla_internals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jotai/vanilla/internals */ \"(ssr)/./node_modules/jotai/esm/vanilla/internals.mjs\");\n/* __next_internal_client_entry_do_not_use__ Provider,useAtom,useAtomValue,useSetAtom,useStore auto */ \n\n\nconst StoreContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0);\nfunction useStore(options) {\n    const store = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(StoreContext);\n    return (options == null ? void 0 : options.store) || store || (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_1__.getDefaultStore)();\n}\nfunction Provider({ children, store }) {\n    const storeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(void 0);\n    if (!store && !storeRef.current) {\n        storeRef.current = (0,jotai_vanilla__WEBPACK_IMPORTED_MODULE_1__.createStore)();\n    }\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(StoreContext.Provider, {\n        value: store || storeRef.current\n    }, children);\n}\nconst isPromiseLike = (x)=>typeof (x == null ? void 0 : x.then) === \"function\";\nconst attachPromiseMeta = (promise)=>{\n    promise.status = \"pending\";\n    promise.then((v)=>{\n        promise.status = \"fulfilled\";\n        promise.value = v;\n    }, (e)=>{\n        promise.status = \"rejected\";\n        promise.reason = e;\n    });\n};\nconst use = react__WEBPACK_IMPORTED_MODULE_0__.use || ((promise)=>{\n    if (promise.status === \"pending\") {\n        throw promise;\n    } else if (promise.status === \"fulfilled\") {\n        return promise.value;\n    } else if (promise.status === \"rejected\") {\n        throw promise.reason;\n    } else {\n        attachPromiseMeta(promise);\n        throw promise;\n    }\n});\nconst continuablePromiseMap = /* @__PURE__ */ new WeakMap();\nconst createContinuablePromise = (promise, getValue)=>{\n    let continuablePromise = continuablePromiseMap.get(promise);\n    if (!continuablePromise) {\n        continuablePromise = new Promise((resolve, reject)=>{\n            let curr = promise;\n            const onFulfilled = (me)=>(v)=>{\n                    if (curr === me) {\n                        resolve(v);\n                    }\n                };\n            const onRejected = (me)=>(e)=>{\n                    if (curr === me) {\n                        reject(e);\n                    }\n                };\n            const onAbort = ()=>{\n                try {\n                    const nextValue = getValue();\n                    if (isPromiseLike(nextValue)) {\n                        continuablePromiseMap.set(nextValue, continuablePromise);\n                        curr = nextValue;\n                        nextValue.then(onFulfilled(nextValue), onRejected(nextValue));\n                        (0,jotai_vanilla_internals__WEBPACK_IMPORTED_MODULE_2__.INTERNAL_registerAbortHandler)(nextValue, onAbort);\n                    } else {\n                        resolve(nextValue);\n                    }\n                } catch (e) {\n                    reject(e);\n                }\n            };\n            promise.then(onFulfilled(promise), onRejected(promise));\n            (0,jotai_vanilla_internals__WEBPACK_IMPORTED_MODULE_2__.INTERNAL_registerAbortHandler)(promise, onAbort);\n        });\n        continuablePromiseMap.set(promise, continuablePromise);\n    }\n    return continuablePromise;\n};\nfunction useAtomValue(atom, options) {\n    const store = useStore(options);\n    const [[valueFromReducer, storeFromReducer, atomFromReducer], rerender] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)((prev)=>{\n        const nextValue = store.get(atom);\n        if (Object.is(prev[0], nextValue) && prev[1] === store && prev[2] === atom) {\n            return prev;\n        }\n        return [\n            nextValue,\n            store,\n            atom\n        ];\n    }, void 0, ()=>[\n            store.get(atom),\n            store,\n            atom\n        ]);\n    let value = valueFromReducer;\n    if (storeFromReducer !== store || atomFromReducer !== atom) {\n        rerender();\n        value = store.get(atom);\n    }\n    const delay = options == null ? void 0 : options.delay;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const unsub = store.sub(atom, ()=>{\n            if (typeof delay === \"number\") {\n                const value2 = store.get(atom);\n                if (isPromiseLike(value2)) {\n                    attachPromiseMeta(createContinuablePromise(value2, ()=>store.get(atom)));\n                }\n                setTimeout(rerender, delay);\n                return;\n            }\n            rerender();\n        });\n        rerender();\n        return unsub;\n    }, [\n        store,\n        atom,\n        delay\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(value);\n    if (isPromiseLike(value)) {\n        const promise = createContinuablePromise(value, ()=>store.get(atom));\n        return use(promise);\n    }\n    return value;\n}\nfunction useSetAtom(atom, options) {\n    const store = useStore(options);\n    const setAtom = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((...args)=>{\n        if (( false ? 0 : void 0) !== \"production\" && !(\"write\" in atom)) {\n            throw new Error(\"not writable atom\");\n        }\n        return store.set(atom, ...args);\n    }, [\n        store,\n        atom\n    ]);\n    return setAtom;\n}\nfunction useAtom(atom, options) {\n    return [\n        useAtomValue(atom, options),\n        // We do wrong type assertion here, which results in throwing an error.\n        useSetAtom(atom, options)\n    ];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jotai/esm/react.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jotai/esm/vanilla.mjs":
/*!********************************************!*\
  !*** ./node_modules/jotai/esm/vanilla.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   atom: () => (/* binding */ atom),\n/* harmony export */   createStore: () => (/* binding */ createStore),\n/* harmony export */   getDefaultStore: () => (/* binding */ getDefaultStore)\n/* harmony export */ });\n/* harmony import */ var jotai_vanilla_internals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jotai/vanilla/internals */ \"(ssr)/./node_modules/jotai/esm/vanilla/internals.mjs\");\n\nlet keyCount = 0;\nfunction atom(read, write) {\n    const key = `atom${++keyCount}`;\n    const config = {\n        toString () {\n            return ( false ? 0 : void 0) !== \"production\" && this.debugLabel ? key + \":\" + this.debugLabel : key;\n        }\n    };\n    if (typeof read === \"function\") {\n        config.read = read;\n    } else {\n        config.init = read;\n        config.read = defaultRead;\n        config.write = defaultWrite;\n    }\n    if (write) {\n        config.write = write;\n    }\n    return config;\n}\nfunction defaultRead(get) {\n    return get(this);\n}\nfunction defaultWrite(get, set, arg) {\n    return set(this, typeof arg === \"function\" ? arg(get(this)) : arg);\n}\nconst createDevStoreRev4 = ()=>{\n    let inRestoreAtom = 0;\n    const storeHooks = (0,jotai_vanilla_internals__WEBPACK_IMPORTED_MODULE_0__.INTERNAL_initializeStoreHooks)({});\n    const atomStateMap = /* @__PURE__ */ new WeakMap();\n    const mountedAtoms = /* @__PURE__ */ new WeakMap();\n    const store = (0,jotai_vanilla_internals__WEBPACK_IMPORTED_MODULE_0__.INTERNAL_buildStoreRev1)(atomStateMap, mountedAtoms, void 0, void 0, void 0, void 0, storeHooks, void 0, (atom, get, set, ...args)=>{\n        if (inRestoreAtom) {\n            return set(atom, ...args);\n        }\n        return atom.write(get, set, ...args);\n    });\n    const debugMountedAtoms = /* @__PURE__ */ new Set();\n    storeHooks.m.add(void 0, (atom)=>{\n        debugMountedAtoms.add(atom);\n        const atomState = atomStateMap.get(atom);\n        atomState.m = mountedAtoms.get(atom);\n    });\n    storeHooks.u.add(void 0, (atom)=>{\n        debugMountedAtoms.delete(atom);\n        const atomState = atomStateMap.get(atom);\n        delete atomState.m;\n    });\n    const devStore = {\n        // store dev methods (these are tentative and subject to change without notice)\n        dev4_get_internal_weak_map: ()=>atomStateMap,\n        dev4_get_mounted_atoms: ()=>debugMountedAtoms,\n        dev4_restore_atoms: (values)=>{\n            const restoreAtom = {\n                read: ()=>null,\n                write: (_get, set)=>{\n                    ++inRestoreAtom;\n                    try {\n                        for (const [atom, value] of values){\n                            if (\"init\" in atom) {\n                                set(atom, value);\n                            }\n                        }\n                    } finally{\n                        --inRestoreAtom;\n                    }\n                }\n            };\n            store.set(restoreAtom);\n        }\n    };\n    return Object.assign(store, devStore);\n};\nfunction createStore() {\n    if (( false ? 0 : void 0) !== \"production\") {\n        return createDevStoreRev4();\n    }\n    const store = (0,jotai_vanilla_internals__WEBPACK_IMPORTED_MODULE_0__.INTERNAL_buildStoreRev1)();\n    return store;\n}\nlet defaultStore;\nfunction getDefaultStore() {\n    if (!defaultStore) {\n        defaultStore = createStore();\n        if (( false ? 0 : void 0) !== \"production\") {\n            globalThis.__JOTAI_DEFAULT_STORE__ || (globalThis.__JOTAI_DEFAULT_STORE__ = defaultStore);\n            if (globalThis.__JOTAI_DEFAULT_STORE__ !== defaultStore) {\n                console.warn(\"Detected multiple Jotai instances. It may cause unexpected behavior with the default store. https://github.com/pmndrs/jotai/discussions/2044\");\n            }\n        }\n    }\n    return defaultStore;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jotai/esm/vanilla.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/jotai/esm/vanilla/internals.mjs":
/*!******************************************************!*\
  !*** ./node_modules/jotai/esm/vanilla/internals.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INTERNAL_abortPromise: () => (/* binding */ INTERNAL_abortPromise),\n/* harmony export */   INTERNAL_addPendingPromiseToDependency: () => (/* binding */ INTERNAL_addPendingPromiseToDependency),\n/* harmony export */   INTERNAL_buildStoreRev1: () => (/* binding */ INTERNAL_buildStoreRev1),\n/* harmony export */   INTERNAL_getBuildingBlocksRev1: () => (/* binding */ INTERNAL_getBuildingBlocksRev1),\n/* harmony export */   INTERNAL_getMountedOrPendingDependents: () => (/* binding */ INTERNAL_getMountedOrPendingDependents),\n/* harmony export */   INTERNAL_hasInitialValue: () => (/* binding */ INTERNAL_hasInitialValue),\n/* harmony export */   INTERNAL_initializeStoreHooks: () => (/* binding */ INTERNAL_initializeStoreHooks),\n/* harmony export */   INTERNAL_isActuallyWritableAtom: () => (/* binding */ INTERNAL_isActuallyWritableAtom),\n/* harmony export */   INTERNAL_isAtomStateInitialized: () => (/* binding */ INTERNAL_isAtomStateInitialized),\n/* harmony export */   INTERNAL_isPendingPromise: () => (/* binding */ INTERNAL_isPendingPromise),\n/* harmony export */   INTERNAL_isPromiseLike: () => (/* binding */ INTERNAL_isPromiseLike),\n/* harmony export */   INTERNAL_isSelfAtom: () => (/* binding */ INTERNAL_isSelfAtom),\n/* harmony export */   INTERNAL_promiseStateMap: () => (/* binding */ INTERNAL_promiseStateMap),\n/* harmony export */   INTERNAL_registerAbortHandler: () => (/* binding */ INTERNAL_registerAbortHandler),\n/* harmony export */   INTERNAL_returnAtomValue: () => (/* binding */ INTERNAL_returnAtomValue),\n/* harmony export */   INTERNAL_setAtomStateValueOrPromise: () => (/* binding */ INTERNAL_setAtomStateValueOrPromise)\n/* harmony export */ });\nconst isSelfAtom = (atom, a)=>atom.unstable_is ? atom.unstable_is(a) : a === atom;\nconst hasInitialValue = (atom)=>\"init\" in atom;\nconst isActuallyWritableAtom = (atom)=>!!atom.write;\nconst isAtomStateInitialized = (atomState)=>\"v\" in atomState || \"e\" in atomState;\nconst returnAtomValue = (atomState)=>{\n    if (\"e\" in atomState) {\n        throw atomState.e;\n    }\n    if (( false ? 0 : void 0) !== \"production\" && !(\"v\" in atomState)) {\n        throw new Error(\"[Bug] atom state is not initialized\");\n    }\n    return atomState.v;\n};\nconst promiseStateMap = /* @__PURE__ */ new WeakMap();\nconst isPendingPromise = (value)=>{\n    var _a;\n    return isPromiseLike(value) && !!((_a = promiseStateMap.get(value)) == null ? void 0 : _a[0]);\n};\nconst abortPromise = (promise)=>{\n    const promiseState = promiseStateMap.get(promise);\n    if (promiseState == null ? void 0 : promiseState[0]) {\n        promiseState[0] = false;\n        promiseState[1].forEach((fn)=>fn());\n    }\n};\nconst registerAbortHandler = (promise, abortHandler)=>{\n    let promiseState = promiseStateMap.get(promise);\n    if (!promiseState) {\n        promiseState = [\n            true,\n            /* @__PURE__ */ new Set()\n        ];\n        promiseStateMap.set(promise, promiseState);\n        const settle = ()=>{\n            promiseState[0] = false;\n        };\n        promise.then(settle, settle);\n    }\n    promiseState[1].add(abortHandler);\n};\nconst isPromiseLike = (p)=>typeof (p == null ? void 0 : p.then) === \"function\";\nconst addPendingPromiseToDependency = (atom, promise, dependencyAtomState)=>{\n    if (!dependencyAtomState.p.has(atom)) {\n        dependencyAtomState.p.add(atom);\n        promise.then(()=>{\n            dependencyAtomState.p.delete(atom);\n        }, ()=>{\n            dependencyAtomState.p.delete(atom);\n        });\n    }\n};\nconst setAtomStateValueOrPromise = (atom, valueOrPromise, ensureAtomState)=>{\n    const atomState = ensureAtomState(atom);\n    const hasPrevValue = \"v\" in atomState;\n    const prevValue = atomState.v;\n    if (isPromiseLike(valueOrPromise)) {\n        for (const a of atomState.d.keys()){\n            addPendingPromiseToDependency(atom, valueOrPromise, ensureAtomState(a));\n        }\n    }\n    atomState.v = valueOrPromise;\n    delete atomState.e;\n    if (!hasPrevValue || !Object.is(prevValue, atomState.v)) {\n        ++atomState.n;\n        if (isPromiseLike(prevValue)) {\n            abortPromise(prevValue);\n        }\n    }\n};\nconst getMountedOrPendingDependents = (atom, atomState, mountedMap)=>{\n    var _a;\n    const dependents = /* @__PURE__ */ new Set();\n    for (const a of ((_a = mountedMap.get(atom)) == null ? void 0 : _a.t) || []){\n        if (mountedMap.has(a)) {\n            dependents.add(a);\n        }\n    }\n    for (const atomWithPendingPromise of atomState.p){\n        dependents.add(atomWithPendingPromise);\n    }\n    return dependents;\n};\nconst createStoreHook = ()=>{\n    const callbacks = /* @__PURE__ */ new Set();\n    const notify = ()=>{\n        callbacks.forEach((fn)=>fn());\n    };\n    notify.add = (fn)=>{\n        callbacks.add(fn);\n        return ()=>{\n            callbacks.delete(fn);\n        };\n    };\n    return notify;\n};\nconst createStoreHookForAtoms = ()=>{\n    const all = {};\n    const callbacks = /* @__PURE__ */ new WeakMap();\n    const notify = (atom)=>{\n        var _a, _b;\n        (_a = callbacks.get(all)) == null ? void 0 : _a.forEach((fn)=>fn(atom));\n        (_b = callbacks.get(atom)) == null ? void 0 : _b.forEach((fn)=>fn());\n    };\n    notify.add = (atom, fn)=>{\n        const key = atom || all;\n        const fns = (callbacks.has(key) ? callbacks : callbacks.set(key, /* @__PURE__ */ new Set())).get(key);\n        fns.add(fn);\n        return ()=>{\n            fns == null ? void 0 : fns.delete(fn);\n            if (!fns.size) {\n                callbacks.delete(key);\n            }\n        };\n    };\n    return notify;\n};\nconst initializeStoreHooks = (storeHooks)=>{\n    storeHooks.c || (storeHooks.c = createStoreHookForAtoms());\n    storeHooks.m || (storeHooks.m = createStoreHookForAtoms());\n    storeHooks.u || (storeHooks.u = createStoreHookForAtoms());\n    storeHooks.f || (storeHooks.f = createStoreHook());\n    return storeHooks;\n};\nconst BUILDING_BLOCKS = Symbol();\nconst getBuildingBlocks = (store)=>store[BUILDING_BLOCKS];\nconst buildStore = (atomStateMap = /* @__PURE__ */ new WeakMap(), mountedMap = /* @__PURE__ */ new WeakMap(), invalidatedAtoms = /* @__PURE__ */ new WeakMap(), changedAtoms = /* @__PURE__ */ new Set(), mountCallbacks = /* @__PURE__ */ new Set(), unmountCallbacks = /* @__PURE__ */ new Set(), storeHooks = {}, atomRead = (atom, ...params)=>atom.read(...params), atomWrite = (atom, ...params)=>atom.write(...params), atomOnInit = (atom, store)=>{\n    var _a;\n    return (_a = atom.unstable_onInit) == null ? void 0 : _a.call(atom, store);\n}, atomOnMount = (atom, setAtom)=>{\n    var _a;\n    return (_a = atom.onMount) == null ? void 0 : _a.call(atom, setAtom);\n}, ...buildingBlockFunctions)=>{\n    const ensureAtomState = buildingBlockFunctions[0] || ((atom)=>{\n        if (( false ? 0 : void 0) !== \"production\" && !atom) {\n            throw new Error(\"Atom is undefined or null\");\n        }\n        let atomState = atomStateMap.get(atom);\n        if (!atomState) {\n            atomState = {\n                d: /* @__PURE__ */ new Map(),\n                p: /* @__PURE__ */ new Set(),\n                n: 0\n            };\n            atomStateMap.set(atom, atomState);\n            atomOnInit == null ? void 0 : atomOnInit(atom, store);\n        }\n        return atomState;\n    });\n    const flushCallbacks = buildingBlockFunctions[1] || (()=>{\n        const errors = [];\n        const call = (fn)=>{\n            try {\n                fn();\n            } catch (e) {\n                errors.push(e);\n            }\n        };\n        do {\n            if (storeHooks.f) {\n                call(storeHooks.f);\n            }\n            const callbacks = /* @__PURE__ */ new Set();\n            const add = callbacks.add.bind(callbacks);\n            changedAtoms.forEach((atom)=>{\n                var _a;\n                return (_a = mountedMap.get(atom)) == null ? void 0 : _a.l.forEach(add);\n            });\n            changedAtoms.clear();\n            unmountCallbacks.forEach(add);\n            unmountCallbacks.clear();\n            mountCallbacks.forEach(add);\n            mountCallbacks.clear();\n            callbacks.forEach(call);\n            if (changedAtoms.size) {\n                recomputeInvalidatedAtoms();\n            }\n        }while (changedAtoms.size || unmountCallbacks.size || mountCallbacks.size);\n        if (errors.length) {\n            throw new AggregateError(errors);\n        }\n    });\n    const recomputeInvalidatedAtoms = buildingBlockFunctions[2] || (()=>{\n        const topSortedReversed = [];\n        const visiting = /* @__PURE__ */ new WeakSet();\n        const visited = /* @__PURE__ */ new WeakSet();\n        const stack = Array.from(changedAtoms);\n        while(stack.length){\n            const a = stack[stack.length - 1];\n            const aState = ensureAtomState(a);\n            if (visited.has(a)) {\n                stack.pop();\n                continue;\n            }\n            if (visiting.has(a)) {\n                if (invalidatedAtoms.get(a) === aState.n) {\n                    topSortedReversed.push([\n                        a,\n                        aState\n                    ]);\n                } else if (( false ? 0 : void 0) !== \"production\" && invalidatedAtoms.has(a)) {\n                    throw new Error(\"[Bug] invalidated atom exists\");\n                }\n                visited.add(a);\n                stack.pop();\n                continue;\n            }\n            visiting.add(a);\n            for (const d of getMountedOrPendingDependents(a, aState, mountedMap)){\n                if (!visiting.has(d)) {\n                    stack.push(d);\n                }\n            }\n        }\n        for(let i = topSortedReversed.length - 1; i >= 0; --i){\n            const [a, aState] = topSortedReversed[i];\n            let hasChangedDeps = false;\n            for (const dep of aState.d.keys()){\n                if (dep !== a && changedAtoms.has(dep)) {\n                    hasChangedDeps = true;\n                    break;\n                }\n            }\n            if (hasChangedDeps) {\n                readAtomState(a);\n                mountDependencies(a);\n            }\n            invalidatedAtoms.delete(a);\n        }\n    });\n    const readAtomState = buildingBlockFunctions[3] || ((atom)=>{\n        var _a;\n        const atomState = ensureAtomState(atom);\n        if (isAtomStateInitialized(atomState)) {\n            if (mountedMap.has(atom) && invalidatedAtoms.get(atom) !== atomState.n) {\n                return atomState;\n            }\n            if (Array.from(atomState.d).every(([a, n])=>// Recursively, read the atom state of the dependency, and\n                // check if the atom epoch number is unchanged\n                readAtomState(a).n === n)) {\n                return atomState;\n            }\n        }\n        atomState.d.clear();\n        let isSync = true;\n        const mountDependenciesIfAsync = ()=>{\n            if (mountedMap.has(atom)) {\n                mountDependencies(atom);\n                recomputeInvalidatedAtoms();\n                flushCallbacks();\n            }\n        };\n        const getter = (a)=>{\n            var _a2;\n            if (isSelfAtom(atom, a)) {\n                const aState2 = ensureAtomState(a);\n                if (!isAtomStateInitialized(aState2)) {\n                    if (hasInitialValue(a)) {\n                        setAtomStateValueOrPromise(a, a.init, ensureAtomState);\n                    } else {\n                        throw new Error(\"no atom init\");\n                    }\n                }\n                return returnAtomValue(aState2);\n            }\n            const aState = readAtomState(a);\n            try {\n                return returnAtomValue(aState);\n            } finally{\n                atomState.d.set(a, aState.n);\n                if (isPendingPromise(atomState.v)) {\n                    addPendingPromiseToDependency(atom, atomState.v, aState);\n                }\n                (_a2 = mountedMap.get(a)) == null ? void 0 : _a2.t.add(atom);\n                if (!isSync) {\n                    mountDependenciesIfAsync();\n                }\n            }\n        };\n        let controller;\n        let setSelf;\n        const options = {\n            get signal () {\n                if (!controller) {\n                    controller = new AbortController();\n                }\n                return controller.signal;\n            },\n            get setSelf () {\n                if (( false ? 0 : void 0) !== \"production\" && !isActuallyWritableAtom(atom)) {\n                    console.warn(\"setSelf function cannot be used with read-only atom\");\n                }\n                if (!setSelf && isActuallyWritableAtom(atom)) {\n                    setSelf = (...args)=>{\n                        if (( false ? 0 : void 0) !== \"production\" && isSync) {\n                            console.warn(\"setSelf function cannot be called in sync\");\n                        }\n                        if (!isSync) {\n                            try {\n                                return writeAtomState(atom, ...args);\n                            } finally{\n                                recomputeInvalidatedAtoms();\n                                flushCallbacks();\n                            }\n                        }\n                    };\n                }\n                return setSelf;\n            }\n        };\n        const prevEpochNumber = atomState.n;\n        try {\n            const valueOrPromise = atomRead(atom, getter, options);\n            setAtomStateValueOrPromise(atom, valueOrPromise, ensureAtomState);\n            if (isPromiseLike(valueOrPromise)) {\n                registerAbortHandler(valueOrPromise, ()=>controller == null ? void 0 : controller.abort());\n                valueOrPromise.then(mountDependenciesIfAsync, mountDependenciesIfAsync);\n            }\n            return atomState;\n        } catch (error) {\n            delete atomState.v;\n            atomState.e = error;\n            ++atomState.n;\n            return atomState;\n        } finally{\n            isSync = false;\n            if (prevEpochNumber !== atomState.n && invalidatedAtoms.get(atom) === prevEpochNumber) {\n                invalidatedAtoms.set(atom, atomState.n);\n                changedAtoms.add(atom);\n                (_a = storeHooks.c) == null ? void 0 : _a.call(storeHooks, atom);\n            }\n        }\n    });\n    const invalidateDependents = buildingBlockFunctions[4] || ((atom)=>{\n        const stack = [\n            atom\n        ];\n        while(stack.length){\n            const a = stack.pop();\n            const aState = ensureAtomState(a);\n            for (const d of getMountedOrPendingDependents(a, aState, mountedMap)){\n                const dState = ensureAtomState(d);\n                invalidatedAtoms.set(d, dState.n);\n                stack.push(d);\n            }\n        }\n    });\n    const writeAtomState = buildingBlockFunctions[5] || ((atom, ...args)=>{\n        let isSync = true;\n        const getter = (a)=>returnAtomValue(readAtomState(a));\n        const setter = (a, ...args2)=>{\n            var _a;\n            const aState = ensureAtomState(a);\n            try {\n                if (isSelfAtom(atom, a)) {\n                    if (!hasInitialValue(a)) {\n                        throw new Error(\"atom not writable\");\n                    }\n                    const prevEpochNumber = aState.n;\n                    const v = args2[0];\n                    setAtomStateValueOrPromise(a, v, ensureAtomState);\n                    mountDependencies(a);\n                    if (prevEpochNumber !== aState.n) {\n                        changedAtoms.add(a);\n                        (_a = storeHooks.c) == null ? void 0 : _a.call(storeHooks, a);\n                        invalidateDependents(a);\n                    }\n                    return void 0;\n                } else {\n                    return writeAtomState(a, ...args2);\n                }\n            } finally{\n                if (!isSync) {\n                    recomputeInvalidatedAtoms();\n                    flushCallbacks();\n                }\n            }\n        };\n        try {\n            return atomWrite(atom, getter, setter, ...args);\n        } finally{\n            isSync = false;\n        }\n    });\n    const mountDependencies = buildingBlockFunctions[6] || ((atom)=>{\n        var _a;\n        const atomState = ensureAtomState(atom);\n        const mounted = mountedMap.get(atom);\n        if (mounted && !isPendingPromise(atomState.v)) {\n            for (const [a, n] of atomState.d){\n                if (!mounted.d.has(a)) {\n                    const aState = ensureAtomState(a);\n                    const aMounted = mountAtom(a);\n                    aMounted.t.add(atom);\n                    mounted.d.add(a);\n                    if (n !== aState.n) {\n                        changedAtoms.add(a);\n                        (_a = storeHooks.c) == null ? void 0 : _a.call(storeHooks, a);\n                        invalidateDependents(a);\n                    }\n                }\n            }\n            for (const a of mounted.d || []){\n                if (!atomState.d.has(a)) {\n                    mounted.d.delete(a);\n                    const aMounted = unmountAtom(a);\n                    aMounted == null ? void 0 : aMounted.t.delete(atom);\n                }\n            }\n        }\n    });\n    const mountAtom = buildingBlockFunctions[7] || ((atom)=>{\n        var _a;\n        const atomState = ensureAtomState(atom);\n        let mounted = mountedMap.get(atom);\n        if (!mounted) {\n            readAtomState(atom);\n            for (const a of atomState.d.keys()){\n                const aMounted = mountAtom(a);\n                aMounted.t.add(atom);\n            }\n            mounted = {\n                l: /* @__PURE__ */ new Set(),\n                d: new Set(atomState.d.keys()),\n                t: /* @__PURE__ */ new Set()\n            };\n            mountedMap.set(atom, mounted);\n            (_a = storeHooks.m) == null ? void 0 : _a.call(storeHooks, atom);\n            if (isActuallyWritableAtom(atom)) {\n                const processOnMount = ()=>{\n                    let isSync = true;\n                    const setAtom = (...args)=>{\n                        try {\n                            return writeAtomState(atom, ...args);\n                        } finally{\n                            if (!isSync) {\n                                recomputeInvalidatedAtoms();\n                                flushCallbacks();\n                            }\n                        }\n                    };\n                    try {\n                        const onUnmount = atomOnMount(atom, setAtom);\n                        if (onUnmount) {\n                            mounted.u = ()=>{\n                                isSync = true;\n                                try {\n                                    onUnmount();\n                                } finally{\n                                    isSync = false;\n                                }\n                            };\n                        }\n                    } finally{\n                        isSync = false;\n                    }\n                };\n                mountCallbacks.add(processOnMount);\n            }\n        }\n        return mounted;\n    });\n    const unmountAtom = buildingBlockFunctions[8] || ((atom)=>{\n        var _a;\n        const atomState = ensureAtomState(atom);\n        let mounted = mountedMap.get(atom);\n        if (mounted && !mounted.l.size && !Array.from(mounted.t).some((a)=>{\n            var _a2;\n            return (_a2 = mountedMap.get(a)) == null ? void 0 : _a2.d.has(atom);\n        })) {\n            if (mounted.u) {\n                unmountCallbacks.add(mounted.u);\n            }\n            mounted = void 0;\n            mountedMap.delete(atom);\n            (_a = storeHooks.u) == null ? void 0 : _a.call(storeHooks, atom);\n            for (const a of atomState.d.keys()){\n                const aMounted = unmountAtom(a);\n                aMounted == null ? void 0 : aMounted.t.delete(atom);\n            }\n            return void 0;\n        }\n        return mounted;\n    });\n    const buildingBlocks = [\n        // store state\n        atomStateMap,\n        mountedMap,\n        invalidatedAtoms,\n        changedAtoms,\n        mountCallbacks,\n        unmountCallbacks,\n        storeHooks,\n        // atom intercepters\n        atomRead,\n        atomWrite,\n        atomOnInit,\n        atomOnMount,\n        // building-block functions\n        ensureAtomState,\n        flushCallbacks,\n        recomputeInvalidatedAtoms,\n        readAtomState,\n        invalidateDependents,\n        writeAtomState,\n        mountDependencies,\n        mountAtom,\n        unmountAtom\n    ];\n    const store = {\n        get: (atom)=>returnAtomValue(readAtomState(atom)),\n        set: (atom, ...args)=>{\n            try {\n                return writeAtomState(atom, ...args);\n            } finally{\n                recomputeInvalidatedAtoms();\n                flushCallbacks();\n            }\n        },\n        sub: (atom, listener)=>{\n            const mounted = mountAtom(atom);\n            const listeners = mounted.l;\n            listeners.add(listener);\n            flushCallbacks();\n            return ()=>{\n                listeners.delete(listener);\n                unmountAtom(atom);\n                flushCallbacks();\n            };\n        }\n    };\n    Object.defineProperty(store, BUILDING_BLOCKS, {\n        value: buildingBlocks\n    });\n    return store;\n};\nconst INTERNAL_buildStoreRev1 = buildStore;\nconst INTERNAL_getBuildingBlocksRev1 = getBuildingBlocks;\nconst INTERNAL_initializeStoreHooks = initializeStoreHooks;\nconst INTERNAL_isSelfAtom = isSelfAtom;\nconst INTERNAL_hasInitialValue = hasInitialValue;\nconst INTERNAL_isActuallyWritableAtom = isActuallyWritableAtom;\nconst INTERNAL_isAtomStateInitialized = isAtomStateInitialized;\nconst INTERNAL_returnAtomValue = returnAtomValue;\nconst INTERNAL_promiseStateMap = promiseStateMap;\nconst INTERNAL_isPendingPromise = isPendingPromise;\nconst INTERNAL_abortPromise = abortPromise;\nconst INTERNAL_registerAbortHandler = registerAbortHandler;\nconst INTERNAL_isPromiseLike = isPromiseLike;\nconst INTERNAL_addPendingPromiseToDependency = addPendingPromiseToDependency;\nconst INTERNAL_setAtomStateValueOrPromise = setAtomStateValueOrPromise;\nconst INTERNAL_getMountedOrPendingDependents = getMountedOrPendingDependents;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jotai/esm/vanilla/internals.mjs\n");

/***/ })

};
;