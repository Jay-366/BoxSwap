"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mdast-util-mdx-expression";
exports.ids = ["vendor-chunks/mdast-util-mdx-expression"];
exports.modules = {

/***/ "(ssr)/./node_modules/mdast-util-mdx-expression/lib/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/mdast-util-mdx-expression/lib/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mdxExpressionFromMarkdown: () => (/* binding */ mdxExpressionFromMarkdown),\n/* harmony export */   mdxExpressionToMarkdown: () => (/* binding */ mdxExpressionToMarkdown)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/**\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle} from 'mdast-util-from-markdown'\n * @import {MdxFlowExpression, MdxTextExpression} from 'mdast-util-mdx-expression'\n * @import {Handle as ToMarkdownHandle, Options as ToMarkdownExtension, State} from 'mdast-util-to-markdown'\n * @import {Parents} from 'mdast'\n */ \n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX expressions\n * in markdown.\n *\n * When using the micromark syntax extension with `addResult`, nodes will have\n * a `data.estree` field set to an ESTree `Program` node.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable MDX expressions.\n */ function mdxExpressionFromMarkdown() {\n    return {\n        enter: {\n            mdxFlowExpression: enterMdxFlowExpression,\n            mdxTextExpression: enterMdxTextExpression\n        },\n        exit: {\n            mdxFlowExpression: exitMdxExpression,\n            mdxFlowExpressionChunk: exitMdxExpressionData,\n            mdxTextExpression: exitMdxExpression,\n            mdxTextExpressionChunk: exitMdxExpressionData\n        }\n    };\n}\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX expressions\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX expressions.\n */ function mdxExpressionToMarkdown() {\n    return {\n        handlers: {\n            mdxFlowExpression: handleMdxExpression,\n            mdxTextExpression: handleMdxExpression\n        },\n        unsafe: [\n            {\n                character: \"{\",\n                inConstruct: [\n                    \"phrasing\"\n                ]\n            },\n            {\n                atBreak: true,\n                character: \"{\"\n            }\n        ]\n    };\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */ function enterMdxFlowExpression(token) {\n    this.enter({\n        type: \"mdxFlowExpression\",\n        value: \"\"\n    }, token);\n    this.buffer();\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */ function enterMdxTextExpression(token) {\n    this.enter({\n        type: \"mdxTextExpression\",\n        value: \"\"\n    }, token);\n    this.buffer();\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */ function exitMdxExpression(token) {\n    const value = this.resume();\n    const estree = token.estree;\n    const node = this.stack[this.stack.length - 1];\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === \"mdxFlowExpression\" || node.type === \"mdxTextExpression\");\n    this.exit(token);\n    node.value = value;\n    if (estree) {\n        node.data = {\n            estree\n        };\n    }\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */ function exitMdxExpressionData(token) {\n    this.config.enter.data.call(this, token);\n    this.config.exit.data.call(this, token);\n}\n/**\n * @type {ToMarkdownHandle}\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Node.\n * @param {Parents | undefined} parent\n *   Parent, if any.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized markdown.\n */ function handleMdxExpression(node, parent, state) {\n    const value = node.value || \"\";\n    const result = state.indentLines(value, function(line, index, blank) {\n        // Tab-size to eat has to be the same as what we serialize as.\n        // While in some places in markdown that’s 4, in JS it’s more common as 2.\n        // Which is what’s also in `mdast-util-mdx-jsx`:\n        // <https://github.com/syntax-tree/mdast-util-mdx-jsx/blob/40b951b/lib/index.js#L52>\n        return (index === 0 || blank ? \"\" : \"  \") + line;\n    });\n    return \"{\" + result + \"}\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC1tZHgtZXhwcmVzc2lvbi9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7O0NBS0MsR0FFa0M7QUFFbkM7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU0U7SUFDZCxPQUFPO1FBQ0xDLE9BQU87WUFDTEMsbUJBQW1CQztZQUNuQkMsbUJBQW1CQztRQUNyQjtRQUNBQyxNQUFNO1lBQ0pKLG1CQUFtQks7WUFDbkJDLHdCQUF3QkM7WUFDeEJMLG1CQUFtQkc7WUFDbkJHLHdCQUF3QkQ7UUFDMUI7SUFDRjtBQUNGO0FBRUE7Ozs7OztDQU1DLEdBQ00sU0FBU0U7SUFDZCxPQUFPO1FBQ0xDLFVBQVU7WUFDUlYsbUJBQW1CVztZQUNuQlQsbUJBQW1CUztRQUNyQjtRQUNBQyxRQUFRO1lBQ047Z0JBQUNDLFdBQVc7Z0JBQUtDLGFBQWE7b0JBQUM7aUJBQVc7WUFBQTtZQUMxQztnQkFBQ0MsU0FBUztnQkFBTUYsV0FBVztZQUFHO1NBQy9CO0lBQ0g7QUFDRjtBQUVBOzs7Q0FHQyxHQUNELFNBQVNaLHVCQUF1QmUsS0FBSztJQUNuQyxJQUFJLENBQUNqQixLQUFLLENBQUM7UUFBQ2tCLE1BQU07UUFBcUJDLE9BQU87SUFBRSxHQUFHRjtJQUNuRCxJQUFJLENBQUNHLE1BQU07QUFDYjtBQUVBOzs7Q0FHQyxHQUNELFNBQVNoQix1QkFBdUJhLEtBQUs7SUFDbkMsSUFBSSxDQUFDakIsS0FBSyxDQUFDO1FBQUNrQixNQUFNO1FBQXFCQyxPQUFPO0lBQUUsR0FBR0Y7SUFDbkQsSUFBSSxDQUFDRyxNQUFNO0FBQ2I7QUFFQTs7O0NBR0MsR0FDRCxTQUFTZCxrQkFBa0JXLEtBQUs7SUFDOUIsTUFBTUUsUUFBUSxJQUFJLENBQUNFLE1BQU07SUFDekIsTUFBTUMsU0FBU0wsTUFBTUssTUFBTTtJQUMzQixNQUFNQyxPQUFPLElBQUksQ0FBQ0MsS0FBSyxDQUFDLElBQUksQ0FBQ0EsS0FBSyxDQUFDQyxNQUFNLEdBQUcsRUFBRTtJQUM5QzNCLDBDQUFNQSxDQUFDeUIsS0FBS0wsSUFBSSxLQUFLLHVCQUF1QkssS0FBS0wsSUFBSSxLQUFLO0lBQzFELElBQUksQ0FBQ2IsSUFBSSxDQUFDWTtJQUNWTSxLQUFLSixLQUFLLEdBQUdBO0lBRWIsSUFBSUcsUUFBUTtRQUNWQyxLQUFLRyxJQUFJLEdBQUc7WUFBQ0o7UUFBTTtJQUNyQjtBQUNGO0FBRUE7OztDQUdDLEdBQ0QsU0FBU2Qsc0JBQXNCUyxLQUFLO0lBQ2xDLElBQUksQ0FBQ1UsTUFBTSxDQUFDM0IsS0FBSyxDQUFDMEIsSUFBSSxDQUFDRSxJQUFJLENBQUMsSUFBSSxFQUFFWDtJQUNsQyxJQUFJLENBQUNVLE1BQU0sQ0FBQ3RCLElBQUksQ0FBQ3FCLElBQUksQ0FBQ0UsSUFBSSxDQUFDLElBQUksRUFBRVg7QUFDbkM7QUFFQTs7Ozs7Ozs7OztDQVVDLEdBQ0QsU0FBU0wsb0JBQW9CVyxJQUFJLEVBQUVNLE1BQU0sRUFBRUMsS0FBSztJQUM5QyxNQUFNWCxRQUFRSSxLQUFLSixLQUFLLElBQUk7SUFDNUIsTUFBTVksU0FBU0QsTUFBTUUsV0FBVyxDQUFDYixPQUFPLFNBQVVjLElBQUksRUFBRUMsS0FBSyxFQUFFQyxLQUFLO1FBQ2xFLDhEQUE4RDtRQUM5RCwwRUFBMEU7UUFDMUUsZ0RBQWdEO1FBQ2hELG9GQUFvRjtRQUNwRixPQUFPLENBQUNELFVBQVUsS0FBS0MsUUFBUSxLQUFLLElBQUcsSUFBS0Y7SUFDOUM7SUFDQSxPQUFPLE1BQU1GLFNBQVM7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb2xhbmEtbGlxdWlkaXR5LXBvb2wvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC1tZHgtZXhwcmVzc2lvbi9saWIvaW5kZXguanM/Y2RkOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge0NvbXBpbGVDb250ZXh0LCBFeHRlbnNpb24gYXMgRnJvbU1hcmtkb3duRXh0ZW5zaW9uLCBIYW5kbGUgYXMgRnJvbU1hcmtkb3duSGFuZGxlfSBmcm9tICdtZGFzdC11dGlsLWZyb20tbWFya2Rvd24nXG4gKiBAaW1wb3J0IHtNZHhGbG93RXhwcmVzc2lvbiwgTWR4VGV4dEV4cHJlc3Npb259IGZyb20gJ21kYXN0LXV0aWwtbWR4LWV4cHJlc3Npb24nXG4gKiBAaW1wb3J0IHtIYW5kbGUgYXMgVG9NYXJrZG93bkhhbmRsZSwgT3B0aW9ucyBhcyBUb01hcmtkb3duRXh0ZW5zaW9uLCBTdGF0ZX0gZnJvbSAnbWRhc3QtdXRpbC10by1tYXJrZG93bidcbiAqIEBpbXBvcnQge1BhcmVudHN9IGZyb20gJ21kYXN0J1xuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5cbi8qKlxuICogQ3JlYXRlIGFuIGV4dGVuc2lvbiBmb3IgYG1kYXN0LXV0aWwtZnJvbS1tYXJrZG93bmAgdG8gZW5hYmxlIE1EWCBleHByZXNzaW9uc1xuICogaW4gbWFya2Rvd24uXG4gKlxuICogV2hlbiB1c2luZyB0aGUgbWljcm9tYXJrIHN5bnRheCBleHRlbnNpb24gd2l0aCBgYWRkUmVzdWx0YCwgbm9kZXMgd2lsbCBoYXZlXG4gKiBhIGBkYXRhLmVzdHJlZWAgZmllbGQgc2V0IHRvIGFuIEVTVHJlZSBgUHJvZ3JhbWAgbm9kZS5cbiAqXG4gKiBAcmV0dXJucyB7RnJvbU1hcmtkb3duRXh0ZW5zaW9ufVxuICogICBFeHRlbnNpb24gZm9yIGBtZGFzdC11dGlsLWZyb20tbWFya2Rvd25gIHRvIGVuYWJsZSBNRFggZXhwcmVzc2lvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZHhFeHByZXNzaW9uRnJvbU1hcmtkb3duKCkge1xuICByZXR1cm4ge1xuICAgIGVudGVyOiB7XG4gICAgICBtZHhGbG93RXhwcmVzc2lvbjogZW50ZXJNZHhGbG93RXhwcmVzc2lvbixcbiAgICAgIG1keFRleHRFeHByZXNzaW9uOiBlbnRlck1keFRleHRFeHByZXNzaW9uXG4gICAgfSxcbiAgICBleGl0OiB7XG4gICAgICBtZHhGbG93RXhwcmVzc2lvbjogZXhpdE1keEV4cHJlc3Npb24sXG4gICAgICBtZHhGbG93RXhwcmVzc2lvbkNodW5rOiBleGl0TWR4RXhwcmVzc2lvbkRhdGEsXG4gICAgICBtZHhUZXh0RXhwcmVzc2lvbjogZXhpdE1keEV4cHJlc3Npb24sXG4gICAgICBtZHhUZXh0RXhwcmVzc2lvbkNodW5rOiBleGl0TWR4RXhwcmVzc2lvbkRhdGFcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gZXh0ZW5zaW9uIGZvciBgbWRhc3QtdXRpbC10by1tYXJrZG93bmAgdG8gZW5hYmxlIE1EWCBleHByZXNzaW9uc1xuICogaW4gbWFya2Rvd24uXG4gKlxuICogQHJldHVybnMge1RvTWFya2Rvd25FeHRlbnNpb259XG4gKiAgIEV4dGVuc2lvbiBmb3IgYG1kYXN0LXV0aWwtdG8tbWFya2Rvd25gIHRvIGVuYWJsZSBNRFggZXhwcmVzc2lvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZHhFeHByZXNzaW9uVG9NYXJrZG93bigpIHtcbiAgcmV0dXJuIHtcbiAgICBoYW5kbGVyczoge1xuICAgICAgbWR4Rmxvd0V4cHJlc3Npb246IGhhbmRsZU1keEV4cHJlc3Npb24sXG4gICAgICBtZHhUZXh0RXhwcmVzc2lvbjogaGFuZGxlTWR4RXhwcmVzc2lvblxuICAgIH0sXG4gICAgdW5zYWZlOiBbXG4gICAgICB7Y2hhcmFjdGVyOiAneycsIGluQ29uc3RydWN0OiBbJ3BocmFzaW5nJ119LFxuICAgICAge2F0QnJlYWs6IHRydWUsIGNoYXJhY3RlcjogJ3snfVxuICAgIF1cbiAgfVxufVxuXG4vKipcbiAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAqIEB0eXBlIHtGcm9tTWFya2Rvd25IYW5kbGV9XG4gKi9cbmZ1bmN0aW9uIGVudGVyTWR4Rmxvd0V4cHJlc3Npb24odG9rZW4pIHtcbiAgdGhpcy5lbnRlcih7dHlwZTogJ21keEZsb3dFeHByZXNzaW9uJywgdmFsdWU6ICcnfSwgdG9rZW4pXG4gIHRoaXMuYnVmZmVyKClcbn1cblxuLyoqXG4gKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gKiBAdHlwZSB7RnJvbU1hcmtkb3duSGFuZGxlfVxuICovXG5mdW5jdGlvbiBlbnRlck1keFRleHRFeHByZXNzaW9uKHRva2VuKSB7XG4gIHRoaXMuZW50ZXIoe3R5cGU6ICdtZHhUZXh0RXhwcmVzc2lvbicsIHZhbHVlOiAnJ30sIHRva2VuKVxuICB0aGlzLmJ1ZmZlcigpXG59XG5cbi8qKlxuICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICogQHR5cGUge0Zyb21NYXJrZG93bkhhbmRsZX1cbiAqL1xuZnVuY3Rpb24gZXhpdE1keEV4cHJlc3Npb24odG9rZW4pIHtcbiAgY29uc3QgdmFsdWUgPSB0aGlzLnJlc3VtZSgpXG4gIGNvbnN0IGVzdHJlZSA9IHRva2VuLmVzdHJlZVxuICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gIGFzc2VydChub2RlLnR5cGUgPT09ICdtZHhGbG93RXhwcmVzc2lvbicgfHwgbm9kZS50eXBlID09PSAnbWR4VGV4dEV4cHJlc3Npb24nKVxuICB0aGlzLmV4aXQodG9rZW4pXG4gIG5vZGUudmFsdWUgPSB2YWx1ZVxuXG4gIGlmIChlc3RyZWUpIHtcbiAgICBub2RlLmRhdGEgPSB7ZXN0cmVlfVxuICB9XG59XG5cbi8qKlxuICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICogQHR5cGUge0Zyb21NYXJrZG93bkhhbmRsZX1cbiAqL1xuZnVuY3Rpb24gZXhpdE1keEV4cHJlc3Npb25EYXRhKHRva2VuKSB7XG4gIHRoaXMuY29uZmlnLmVudGVyLmRhdGEuY2FsbCh0aGlzLCB0b2tlbilcbiAgdGhpcy5jb25maWcuZXhpdC5kYXRhLmNhbGwodGhpcywgdG9rZW4pXG59XG5cbi8qKlxuICogQHR5cGUge1RvTWFya2Rvd25IYW5kbGV9XG4gKiBAcGFyYW0ge01keEZsb3dFeHByZXNzaW9uIHwgTWR4VGV4dEV4cHJlc3Npb259IG5vZGVcbiAqICAgTm9kZS5cbiAqIEBwYXJhbSB7UGFyZW50cyB8IHVuZGVmaW5lZH0gcGFyZW50XG4gKiAgIFBhcmVudCwgaWYgYW55LlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kIGFib3V0IHRoZSBjdXJyZW50IHN0YXRlLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgU2VyaWFsaXplZCBtYXJrZG93bi5cbiAqL1xuZnVuY3Rpb24gaGFuZGxlTWR4RXhwcmVzc2lvbihub2RlLCBwYXJlbnQsIHN0YXRlKSB7XG4gIGNvbnN0IHZhbHVlID0gbm9kZS52YWx1ZSB8fCAnJ1xuICBjb25zdCByZXN1bHQgPSBzdGF0ZS5pbmRlbnRMaW5lcyh2YWx1ZSwgZnVuY3Rpb24gKGxpbmUsIGluZGV4LCBibGFuaykge1xuICAgIC8vIFRhYi1zaXplIHRvIGVhdCBoYXMgdG8gYmUgdGhlIHNhbWUgYXMgd2hhdCB3ZSBzZXJpYWxpemUgYXMuXG4gICAgLy8gV2hpbGUgaW4gc29tZSBwbGFjZXMgaW4gbWFya2Rvd24gdGhhdOKAmXMgNCwgaW4gSlMgaXTigJlzIG1vcmUgY29tbW9uIGFzIDIuXG4gICAgLy8gV2hpY2ggaXMgd2hhdOKAmXMgYWxzbyBpbiBgbWRhc3QtdXRpbC1tZHgtanN4YDpcbiAgICAvLyA8aHR0cHM6Ly9naXRodWIuY29tL3N5bnRheC10cmVlL21kYXN0LXV0aWwtbWR4LWpzeC9ibG9iLzQwYjk1MWIvbGliL2luZGV4LmpzI0w1Mj5cbiAgICByZXR1cm4gKGluZGV4ID09PSAwIHx8IGJsYW5rID8gJycgOiAnICAnKSArIGxpbmVcbiAgfSlcbiAgcmV0dXJuICd7JyArIHJlc3VsdCArICd9J1xufVxuIl0sIm5hbWVzIjpbIm9rIiwiYXNzZXJ0IiwibWR4RXhwcmVzc2lvbkZyb21NYXJrZG93biIsImVudGVyIiwibWR4Rmxvd0V4cHJlc3Npb24iLCJlbnRlck1keEZsb3dFeHByZXNzaW9uIiwibWR4VGV4dEV4cHJlc3Npb24iLCJlbnRlck1keFRleHRFeHByZXNzaW9uIiwiZXhpdCIsImV4aXRNZHhFeHByZXNzaW9uIiwibWR4Rmxvd0V4cHJlc3Npb25DaHVuayIsImV4aXRNZHhFeHByZXNzaW9uRGF0YSIsIm1keFRleHRFeHByZXNzaW9uQ2h1bmsiLCJtZHhFeHByZXNzaW9uVG9NYXJrZG93biIsImhhbmRsZXJzIiwiaGFuZGxlTWR4RXhwcmVzc2lvbiIsInVuc2FmZSIsImNoYXJhY3RlciIsImluQ29uc3RydWN0IiwiYXRCcmVhayIsInRva2VuIiwidHlwZSIsInZhbHVlIiwiYnVmZmVyIiwicmVzdW1lIiwiZXN0cmVlIiwibm9kZSIsInN0YWNrIiwibGVuZ3RoIiwiZGF0YSIsImNvbmZpZyIsImNhbGwiLCJwYXJlbnQiLCJzdGF0ZSIsInJlc3VsdCIsImluZGVudExpbmVzIiwibGluZSIsImluZGV4IiwiYmxhbmsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mdast-util-mdx-expression/lib/index.js\n");

/***/ })

};
;