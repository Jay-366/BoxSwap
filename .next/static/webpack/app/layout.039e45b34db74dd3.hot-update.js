/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Capp%5CClientProvider.tsx&modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Capp%5Cglobals.css&modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Ccomponents%5CNavigation.tsx&modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Ccomponents%5CNovatrixBackground.tsx&modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Ccomponents%5CWalletProviders.tsx&modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Cnode_modules%5Cnext%5Cdist%5Cshared%5Clib%5Clazy-dynamic%5Cdynamic-bailout-to-csr.js&server=false!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Capp%5CClientProvider.tsx&modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Capp%5Cglobals.css&modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Ccomponents%5CNavigation.tsx&modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Ccomponents%5CNovatrixBackground.tsx&modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Ccomponents%5CWalletProviders.tsx&modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Cnode_modules%5Cnext%5Cdist%5Cshared%5Clib%5Clazy-dynamic%5Cdynamic-bailout-to-csr.js&server=false! ***!

/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/ClientProvider.tsx */ \"(app-pages-browser)/./app/ClientProvider.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/globals.css */ \"(app-pages-browser)/./app/globals.css\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/Navigation.tsx */ \"(app-pages-browser)/./components/Navigation.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/NovatrixBackground.tsx */ \"(app-pages-browser)/./components/NovatrixBackground.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/WalletProviders.tsx */ \"(app-pages-browser)/./components/WalletProviders.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./node_modules/next/dist/shared/lib/lazy-dynamic/dynamic-bailout-to-csr.js */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/lazy-dynamic/dynamic-bailout-to-csr.js\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz1DJTNBJTVDVXNlcnMlNUNMb3klMjBRdW4lMjBKaWUlNUNEZXNrdG9wJTVDc29sYW5hX2xpcXVpZGl0eV9wb29sJTVDYXBwJTVDQ2xpZW50UHJvdmlkZXIudHN4Jm1vZHVsZXM9QyUzQSU1Q1VzZXJzJTVDTG95JTIwUXVuJTIwSmllJTVDRGVza3RvcCU1Q3NvbGFuYV9saXF1aWRpdHlfcG9vbCU1Q2FwcCU1Q2dsb2JhbHMuY3NzJm1vZHVsZXM9QyUzQSU1Q1VzZXJzJTVDTG95JTIwUXVuJTIwSmllJTVDRGVza3RvcCU1Q3NvbGFuYV9saXF1aWRpdHlfcG9vbCU1Q2NvbXBvbmVudHMlNUNOYXZpZ2F0aW9uLnRzeCZtb2R1bGVzPUMlM0ElNUNVc2VycyU1Q0xveSUyMFF1biUyMEppZSU1Q0Rlc2t0b3AlNUNzb2xhbmFfbGlxdWlkaXR5X3Bvb2wlNUNjb21wb25lbnRzJTVDTm92YXRyaXhCYWNrZ3JvdW5kLnRzeCZtb2R1bGVzPUMlM0ElNUNVc2VycyU1Q0xveSUyMFF1biUyMEppZSU1Q0Rlc2t0b3AlNUNzb2xhbmFfbGlxdWlkaXR5X3Bvb2wlNUNjb21wb25lbnRzJTVDV2FsbGV0UHJvdmlkZXJzLnRzeCZtb2R1bGVzPUMlM0ElNUNVc2VycyU1Q0xveSUyMFF1biUyMEppZSU1Q0Rlc2t0b3AlNUNzb2xhbmFfbGlxdWlkaXR5X3Bvb2wlNUNub2RlX21vZHVsZXMlNUNuZXh0JTVDZGlzdCU1Q3NoYXJlZCU1Q2xpYiU1Q2xhenktZHluYW1pYyU1Q2R5bmFtaWMtYmFpbG91dC10by1jc3IuanMmc2VydmVyPWZhbHNlISIsIm1hcHBpbmdzIjoiQUFBQSwwS0FBb0g7QUFDcEgsNEpBQTZHO0FBQzdHLGdMQUF1SDtBQUN2SCxnTUFBK0g7QUFDL0gsMExBQTRIO0FBQzVIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/MTRmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXExveSBRdW4gSmllXFxcXERlc2t0b3BcXFxcc29sYW5hX2xpcXVpZGl0eV9wb29sXFxcXGFwcFxcXFxDbGllbnRQcm92aWRlci50c3hcIik7XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXExveSBRdW4gSmllXFxcXERlc2t0b3BcXFxcc29sYW5hX2xpcXVpZGl0eV9wb29sXFxcXGFwcFxcXFxnbG9iYWxzLmNzc1wiKTtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcTG95IFF1biBKaWVcXFxcRGVza3RvcFxcXFxzb2xhbmFfbGlxdWlkaXR5X3Bvb2xcXFxcY29tcG9uZW50c1xcXFxOYXZpZ2F0aW9uLnRzeFwiKTtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcTG95IFF1biBKaWVcXFxcRGVza3RvcFxcXFxzb2xhbmFfbGlxdWlkaXR5X3Bvb2xcXFxcY29tcG9uZW50c1xcXFxOb3ZhdHJpeEJhY2tncm91bmQudHN4XCIpO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJDOlxcXFxVc2Vyc1xcXFxMb3kgUXVuIEppZVxcXFxEZXNrdG9wXFxcXHNvbGFuYV9saXF1aWRpdHlfcG9vbFxcXFxjb21wb25lbnRzXFxcXFdhbGxldFByb3ZpZGVycy50c3hcIik7XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXExveSBRdW4gSmllXFxcXERlc2t0b3BcXFxcc29sYW5hX2xpcXVpZGl0eV9wb29sXFxcXG5vZGVfbW9kdWxlc1xcXFxuZXh0XFxcXGRpc3RcXFxcc2hhcmVkXFxcXGxpYlxcXFxsYXp5LWR5bmFtaWNcXFxcZHluYW1pYy1iYWlsb3V0LXRvLWNzci5qc1wiKSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Capp%5CClientProvider.tsx&modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Capp%5Cglobals.css&modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Ccomponents%5CNavigation.tsx&modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Ccomponents%5CNovatrixBackground.tsx&modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Ccomponents%5CWalletProviders.tsx&modules=C%3A%5CUsers%5CLoy%20Qun%20Jie%5CDesktop%5Csolana_liquidity_pool%5Cnode_modules%5Cnext%5Cdist%5Cshared%5Clib%5Clazy-dynamic%5Cdynamic-bailout-to-csr.js&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"8eec665bf90e\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2dsb2JhbHMuY3NzPzkyM2YiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCI4ZWVjNjY1YmY5MGVcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/NovatrixBackground.tsx":
/*!*******************************************!*\
  !*** ./components/NovatrixBackground.tsx ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ NovatrixBackground; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var uvcanvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uvcanvas */ \"(app-pages-browser)/./node_modules/uvcanvas/dist/components/novatrix/index.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\nfunction NovatrixBackground() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"fixed inset-0 -z-10\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(uvcanvas__WEBPACK_IMPORTED_MODULE_1__.Novatrix, {}, void 0, false, {\n            fileName: \"C:\\\\Users\\\\Loy Qun Jie\\\\Desktop\\\\solana_liquidity_pool\\\\components\\\\NovatrixBackground.tsx\",\n            lineNumber: 8,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Loy Qun Jie\\\\Desktop\\\\solana_liquidity_pool\\\\components\\\\NovatrixBackground.tsx\",\n        lineNumber: 7,\n        columnNumber: 5\n    }, this);\n}\n_c = NovatrixBackground;\nvar _c;\n$RefreshReg$(_c, \"NovatrixBackground\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvTm92YXRyaXhCYWNrZ3JvdW5kLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRW1DO0FBRXBCLFNBQVNDO0lBQ3RCLHFCQUNFLDhEQUFDQztRQUFJQyxXQUFVO2tCQUNiLDRFQUFDSCw4Q0FBUUE7Ozs7Ozs7Ozs7QUFHZjtLQU53QkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9Ob3ZhdHJpeEJhY2tncm91bmQudHN4P2RlN2YiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXHJcblxyXG5pbXBvcnQgeyBOb3ZhdHJpeCB9IGZyb20gXCJ1dmNhbnZhc1wiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBOb3ZhdHJpeEJhY2tncm91bmQoKSB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZml4ZWQgaW5zZXQtMCAtei0xMFwiPlxyXG4gICAgICA8Tm92YXRyaXggLz5cclxuICAgIDwvZGl2PlxyXG4gIClcclxufSAiXSwibmFtZXMiOlsiTm92YXRyaXgiLCJOb3ZhdHJpeEJhY2tncm91bmQiLCJkaXYiLCJjbGFzc05hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/NovatrixBackground.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/core/Geometry.js":
/*!***********************************************!*\
  !*** ./node_modules/ogl/src/core/Geometry.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Geometry: function() { return /* binding */ Geometry; }\n/* harmony export */ });\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Vec3.js */ \"(app-pages-browser)/./node_modules/ogl/src/math/Vec3.js\");\n// attribute params\n// {\n//     data - typed array eg UInt16Array for indices, Float32Array\n//     size - int default 1\n//     instanced - default null. Pass divisor amount\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\n//     normalized - boolean default false\n//     buffer - gl buffer, if buffer exists, don't need to provide data - although needs position data for bounds calculation\n//     stride - default 0 - for when passing in buffer\n//     offset - default 0 - for when passing in buffer\n//     count - default null - for when passing in buffer\n//     min - array - for when passing in buffer\n//     max - array - for when passing in buffer\n// }\n// TODO: fit in transform feedback\n\nconst tempVec3 = /* @__PURE__ */ new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3();\nlet ID = 1;\nlet ATTR_ID = 1;\n// To stop inifinite warnings\nlet isBoundsWarned = false;\nclass Geometry {\n    addAttribute(key, attr) {\n        this.attributes[key] = attr;\n        // Set options\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\n        attr.size = attr.size || 1;\n        attr.type = attr.type || (attr.data.constructor === Float32Array ? this.gl.FLOAT : attr.data.constructor === Uint16Array ? this.gl.UNSIGNED_SHORT : this.gl.UNSIGNED_INT); // Uint32Array\n        attr.target = key === \"index\" ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n        attr.normalized = attr.normalized || false;\n        attr.stride = attr.stride || 0;\n        attr.offset = attr.offset || 0;\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\n        attr.divisor = attr.instanced || 0;\n        attr.needsUpdate = false;\n        attr.usage = attr.usage || this.gl.STATIC_DRAW;\n        if (!attr.buffer) {\n            // Push data to buffer\n            this.updateAttribute(attr);\n        }\n        // Update geometry counts. If indexed, ignore regular attributes\n        if (attr.divisor) {\n            this.isInstanced = true;\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\n                console.warn(\"geometry has multiple instanced buffers of different length\");\n                return this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor);\n            }\n            this.instancedCount = attr.count * attr.divisor;\n        } else if (key === \"index\") {\n            this.drawRange.count = attr.count;\n        } else if (!this.attributes.index) {\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\n        }\n    }\n    updateAttribute(attr) {\n        const isNewBuffer = !attr.buffer;\n        if (isNewBuffer) attr.buffer = this.gl.createBuffer();\n        if (this.glState.boundBuffer !== attr.buffer) {\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n        }\n        if (isNewBuffer) {\n            this.gl.bufferData(attr.target, attr.data, attr.usage);\n        } else {\n            this.gl.bufferSubData(attr.target, 0, attr.data);\n        }\n        attr.needsUpdate = false;\n    }\n    setIndex(value) {\n        this.addAttribute(\"index\", value);\n    }\n    setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n    }\n    setInstancedCount(value) {\n        this.instancedCount = value;\n    }\n    createVAO(program) {\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n        this.bindAttributes(program);\n    }\n    bindAttributes(program) {\n        // Link all attributes to program using gl.vertexAttribPointer\n        program.attributeLocations.forEach((location, param)=>{\n            let { name, type } = param;\n            // If geometry missing a required shader attribute\n            if (!this.attributes[name]) {\n                console.warn(\"active attribute \".concat(name, \" not being supplied\"));\n                return;\n            }\n            const attr = this.attributes[name];\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n            // For matrix attributes, buffer needs to be defined per column\n            let numLoc = 1;\n            if (type === 35674) numLoc = 2; // mat2\n            if (type === 35675) numLoc = 3; // mat3\n            if (type === 35676) numLoc = 4; // mat4\n            const size = attr.size / numLoc;\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * 4;\n            const offset = numLoc === 1 ? 0 : numLoc * 4;\n            for(let i = 0; i < numLoc; i++){\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\n                this.gl.enableVertexAttribArray(location + i);\n                // For instanced attributes, divisor needs to be set.\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\n            }\n        });\n        // Bind indices if geometry indexed\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\n    }\n    draw(param) {\n        let { program, mode = this.gl.TRIANGLES } = param;\n        var _this_attributes_index;\n        if (this.gl.renderer.currentGeometry !== \"\".concat(this.id, \"_\").concat(program.attributeOrder)) {\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n            this.gl.renderer.currentGeometry = \"\".concat(this.id, \"_\").concat(program.attributeOrder);\n        }\n        // Check if any attributes need updating\n        program.attributeLocations.forEach((location, param)=>{\n            let { name } = param;\n            const attr = this.attributes[name];\n            if (attr.needsUpdate) this.updateAttribute(attr);\n        });\n        // For drawElements, offset needs to be multiple of type size\n        let indexBytesPerElement = 2;\n        if (((_this_attributes_index = this.attributes.index) === null || _this_attributes_index === void 0 ? void 0 : _this_attributes_index.type) === this.gl.UNSIGNED_INT) indexBytesPerElement = 4;\n        if (this.isInstanced) {\n            if (this.attributes.index) {\n                this.gl.renderer.drawElementsInstanced(mode, this.drawRange.count, this.attributes.index.type, this.attributes.index.offset + this.drawRange.start * indexBytesPerElement, this.instancedCount);\n            } else {\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\n            }\n        } else {\n            if (this.attributes.index) {\n                this.gl.drawElements(mode, this.drawRange.count, this.attributes.index.type, this.attributes.index.offset + this.drawRange.start * indexBytesPerElement);\n            } else {\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\n            }\n        }\n    }\n    getPosition() {\n        // Use position buffer, or min/max if available\n        const attr = this.attributes.position;\n        // if (attr.min) return [...attr.min, ...attr.max];\n        if (attr.data) return attr;\n        if (isBoundsWarned) return;\n        console.warn(\"No position buffer data found to compute bounds\");\n        return isBoundsWarned = true;\n    }\n    computeBoundingBox(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n        if (!this.bounds) {\n            this.bounds = {\n                min: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(),\n                max: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(),\n                center: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(),\n                scale: new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3(),\n                radius: Infinity\n            };\n        }\n        const min = this.bounds.min;\n        const max = this.bounds.max;\n        const center = this.bounds.center;\n        const scale = this.bounds.scale;\n        min.set(+Infinity);\n        max.set(-Infinity);\n        // TODO: check size of position (eg triangle with Vec2)\n        for(let i = 0, l = array.length; i < l; i += stride){\n            const x = array[i];\n            const y = array[i + 1];\n            const z = array[i + 2];\n            min.x = Math.min(x, min.x);\n            min.y = Math.min(y, min.y);\n            min.z = Math.min(z, min.z);\n            max.x = Math.max(x, max.x);\n            max.y = Math.max(y, max.y);\n            max.z = Math.max(z, max.z);\n        }\n        scale.sub(max, min);\n        center.add(min, max).divide(2);\n    }\n    computeBoundingSphere(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n        if (!this.bounds) this.computeBoundingBox(attr);\n        let maxRadiusSq = 0;\n        for(let i = 0, l = array.length; i < l; i += stride){\n            tempVec3.fromArray(array, i);\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\n        }\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\n    }\n    remove() {\n        for(let key in this.VAOs){\n            this.gl.renderer.deleteVertexArray(this.VAOs[key]);\n            delete this.VAOs[key];\n        }\n        for(let key in this.attributes){\n            this.gl.deleteBuffer(this.attributes[key].buffer);\n            delete this.attributes[key];\n        }\n    }\n    constructor(gl, attributes = {}){\n        if (!gl.canvas) console.error(\"gl not passed as first argument to Geometry\");\n        this.gl = gl;\n        this.attributes = attributes;\n        this.id = ID++;\n        // Store one VAO per program attribute locations order\n        this.VAOs = {};\n        this.drawRange = {\n            start: 0,\n            count: 0\n        };\n        this.instancedCount = 0;\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        this.gl.renderer.bindVertexArray(null);\n        this.gl.renderer.currentGeometry = null;\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n        // create the buffers\n        for(let key in attributes){\n            this.addAttribute(key, attributes[key]);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvR2VvbWV0cnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtQkFBbUI7QUFDbkIsSUFBSTtBQUNKLGtFQUFrRTtBQUNsRSwyQkFBMkI7QUFDM0Isb0RBQW9EO0FBQ3BELGdGQUFnRjtBQUNoRix5Q0FBeUM7QUFFekMsNkhBQTZIO0FBQzdILHNEQUFzRDtBQUN0RCxzREFBc0Q7QUFDdEQsd0RBQXdEO0FBQ3hELCtDQUErQztBQUMvQywrQ0FBK0M7QUFDL0MsSUFBSTtBQUVKLGtDQUFrQztBQUVLO0FBRXZDLE1BQU1DLFdBQVcsYUFBYSxHQUFHLElBQUlELCtDQUFJQTtBQUV6QyxJQUFJRSxLQUFLO0FBQ1QsSUFBSUMsVUFBVTtBQUVkLDZCQUE2QjtBQUM3QixJQUFJQyxpQkFBaUI7QUFFZCxNQUFNQztJQTBCVEMsYUFBYUMsR0FBRyxFQUFFQyxJQUFJLEVBQUU7UUFDcEIsSUFBSSxDQUFDQyxVQUFVLENBQUNGLElBQUksR0FBR0M7UUFFdkIsY0FBYztRQUNkQSxLQUFLRSxFQUFFLEdBQUdQLFdBQVcsa0NBQWtDO1FBQ3ZESyxLQUFLRyxJQUFJLEdBQUdILEtBQUtHLElBQUksSUFBSTtRQUN6QkgsS0FBS0ksSUFBSSxHQUNMSixLQUFLSSxJQUFJLElBQ1JKLENBQUFBLEtBQUtLLElBQUksQ0FBQ0MsV0FBVyxLQUFLQyxlQUNyQixJQUFJLENBQUNDLEVBQUUsQ0FBQ0MsS0FBSyxHQUNiVCxLQUFLSyxJQUFJLENBQUNDLFdBQVcsS0FBS0ksY0FDMUIsSUFBSSxDQUFDRixFQUFFLENBQUNHLGNBQWMsR0FDdEIsSUFBSSxDQUFDSCxFQUFFLENBQUNJLFlBQVksR0FBRyxjQUFjO1FBQy9DWixLQUFLYSxNQUFNLEdBQUdkLFFBQVEsVUFBVSxJQUFJLENBQUNTLEVBQUUsQ0FBQ00sb0JBQW9CLEdBQUcsSUFBSSxDQUFDTixFQUFFLENBQUNPLFlBQVk7UUFDbkZmLEtBQUtnQixVQUFVLEdB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T0FBTyxJQUFJLENBQUNFLFVBQVUsQ0FBRTtZQUM3QixJQUFJLENBQUNPLEVBQUUsQ0FBQzRGLFlBQVksQ0FBQyxJQUFJLENBQUNuRyxVQUFVLENBQUNGLElBQUksQ0FBQzRCLE1BQU07WUFDaEQsT0FBTyxJQUFJLENBQUMxQixVQUFVLENBQUNGLElBQUk7UUFDL0I7SUFDSjtJQXZRQU8sWUFBWUUsRUFBRSxFQUFFUCxhQUFhLENBQUMsQ0FBQyxDQUFFO1FBQzdCLElBQUksQ0FBQ08sR0FBRzZGLE1BQU0sRUFBRXRFLFFBQVF1RSxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDOUYsRUFBRSxHQUFHQTtRQUNWLElBQUksQ0FBQ1AsVUFBVSxHQUFHQTtRQUNsQixJQUFJLENBQUNDLEVBQUUsR0FBR1I7UUFFVixzREFBc0Q7UUFDdEQsSUFBSSxDQUFDMEQsSUFBSSxHQUFHLENBQUM7UUFFYixJQUFJLENBQUNqQixTQUFTLEdBQUc7WUFBRWEsT0FBTztZQUFHN0IsT0FBTztRQUFFO1FBQ3RDLElBQUksQ0FBQ1csY0FBYyxHQUFHO1FBRXRCLHdFQUF3RTtRQUN4RSxJQUFJLENBQUN0QixFQUFFLENBQUM4QyxRQUFRLENBQUNFLGVBQWUsQ0FBQztRQUNqQyxJQUFJLENBQUNoRCxFQUFFLENBQUM4QyxRQUFRLENBQUNnQixlQUFlLEdBQUc7UUFFbkMsa0VBQWtFO1FBQ2xFLElBQUksQ0FBQzlCLE9BQU8sR0FBRyxJQUFJLENBQUNoQyxFQUFFLENBQUM4QyxRQUFRLENBQUNpRCxLQUFLO1FBRXJDLHFCQUFxQjtRQUNyQixJQUFLLElBQUl4RyxPQUFPRSxXQUFZO1lBQ3hCLElBQUksQ0FBQ0gsWUFBWSxDQUFDQyxLQUFLRSxVQUFVLENBQUNGLElBQUk7UUFDMUM7SUFDSjtBQWlQSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9jb3JlL0dlb21ldHJ5LmpzP2VlZjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gYXR0cmlidXRlIHBhcmFtc1xuLy8ge1xuLy8gICAgIGRhdGEgLSB0eXBlZCBhcnJheSBlZyBVSW50MTZBcnJheSBmb3IgaW5kaWNlcywgRmxvYXQzMkFycmF5XG4vLyAgICAgc2l6ZSAtIGludCBkZWZhdWx0IDFcbi8vICAgICBpbnN0YW5jZWQgLSBkZWZhdWx0IG51bGwuIFBhc3MgZGl2aXNvciBhbW91bnRcbi8vICAgICB0eXBlIC0gZ2wgZW51bSBkZWZhdWx0IGdsLlVOU0lHTkVEX1NIT1JUIGZvciAnaW5kZXgnLCBnbC5GTE9BVCBmb3Igb3RoZXJzXG4vLyAgICAgbm9ybWFsaXplZCAtIGJvb2xlYW4gZGVmYXVsdCBmYWxzZVxuXG4vLyAgICAgYnVmZmVyIC0gZ2wgYnVmZmVyLCBpZiBidWZmZXIgZXhpc3RzLCBkb24ndCBuZWVkIHRvIHByb3ZpZGUgZGF0YSAtIGFsdGhvdWdoIG5lZWRzIHBvc2l0aW9uIGRhdGEgZm9yIGJvdW5kcyBjYWxjdWxhdGlvblxuLy8gICAgIHN0cmlkZSAtIGRlZmF1bHQgMCAtIGZvciB3aGVuIHBhc3NpbmcgaW4gYnVmZmVyXG4vLyAgICAgb2Zmc2V0IC0gZGVmYXVsdCAwIC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vICAgICBjb3VudCAtIGRlZmF1bHQgbnVsbCAtIGZvciB3aGVuIHBhc3NpbmcgaW4gYnVmZmVyXG4vLyAgICAgbWluIC0gYXJyYXkgLSBmb3Igd2hlbiBwYXNzaW5nIGluIGJ1ZmZlclxuLy8gICAgIG1heCAtIGFycmF5IC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vIH1cblxuLy8gVE9ETzogZml0IGluIHRyYW5zZm9ybSBmZWVkYmFja1xuXG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aC9WZWMzLmpzJztcblxuY29uc3QgdGVtcFZlYzMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFZlYzMoKTtcblxubGV0IElEID0gMTtcbmxldCBBVFRSX0lEID0gMTtcblxuLy8gVG8gc3RvcCBpbmlmaW5pdGUgd2FybmluZ3NcbmxldCBpc0JvdW5kc1dhcm5lZCA9IGZhbHNlO1xuXG5leHBvcnQgY2xhc3MgR2VvbWV0cnkge1xuICAgIGNvbnN0cnVjdG9yKGdsLCBhdHRyaWJ1dGVzID0ge30pIHtcbiAgICAgICAgaWYgKCFnbC5jYW52YXMpIGNvbnNvbGUuZXJyb3IoJ2dsIG5vdCBwYXNzZWQgYXMgZmlyc3QgYXJndW1lbnQgdG8gR2VvbWV0cnknKTtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICAgICAgICB0aGlzLmlkID0gSUQrKztcblxuICAgICAgICAvLyBTdG9yZSBvbmUgVkFPIHBlciBwcm9ncmFtIGF0dHJpYnV0ZSBsb2NhdGlvbnMgb3JkZXJcbiAgICAgICAgdGhpcy5WQU9zID0ge307XG5cbiAgICAgICAgdGhpcy5kcmF3UmFuZ2UgPSB7IHN0YXJ0OiAwLCBjb3VudDogMCB9O1xuICAgICAgICB0aGlzLmluc3RhbmNlZENvdW50ID0gMDtcblxuICAgICAgICAvLyBVbmJpbmQgY3VycmVudCBWQU8gc28gdGhhdCBuZXcgYnVmZmVycyBkb24ndCBnZXQgYWRkZWQgdG8gYWN0aXZlIG1lc2hcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5iaW5kVmVydGV4QXJyYXkobnVsbCk7XG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuY3VycmVudEdlb21ldHJ5ID0gbnVsbDtcblxuICAgICAgICAvLyBBbGlhcyBmb3Igc3RhdGUgc3RvcmUgdG8gYXZvaWQgcmVkdW5kYW50IGNhbGxzIGZvciBnbG9iYWwgc3RhdGVcbiAgICAgICAgdGhpcy5nbFN0YXRlID0gdGhpcy5nbC5yZW5kZXJlci5zdGF0ZTtcblxuICAgICAgICAvLyBjcmVhdGUgdGhlIGJ1ZmZlcnNcbiAgICAgICAgZm9yIChsZXQga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkQXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZEF0dHJpYnV0ZShrZXksIGF0dHIpIHtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzW2tleV0gPSBhdHRyO1xuXG4gICAgICAgIC8vIFNldCBvcHRpb25zXG4gICAgICAgIGF0dHIuaWQgPSBBVFRSX0lEKys7IC8vIFRPRE86IGN1cnJlbnRseSB1bnVzZWQsIHJlbW92ZT9cbiAgICAgICAgYXR0ci5zaXplID0gYXR0ci5zaXplIHx8IDE7XG4gICAgICAgIGF0dHIudHlwZSA9XG4gICAgICAgICAgICBhdHRyLnR5cGUgfHxcbiAgICAgICAgICAgIChhdHRyLmRhdGEuY29uc3RydWN0b3IgPT09IEZsb2F0MzJBcnJheVxuICAgICAgICAgICAgICAgID8gdGhpcy5nbC5GTE9BVFxuICAgICAgICAgICAgICAgIDogYXR0ci5kYXRhLmNvbnN0cnVjdG9yID09PSBVaW50MTZBcnJheVxuICAgICAgICAgICAgICAgID8gdGhpcy5nbC5VTlNJR05FRF9TSE9SVFxuICAgICAgICAgICAgICAgIDogdGhpcy5nbC5VTlNJR05FRF9JTlQpOyAvLyBVaW50MzJBcnJheVxuICAgICAgICBhdHRyLnRhcmdldCA9IGtleSA9PT0gJ2luZGV4JyA/IHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIgOiB0aGlzLmdsLkFSUkFZX0JVRkZFUjtcbiAgICAgICAgYXR0ci5ub3JtYWxpemVkID0gYXR0ci5ub3JtYWxpemVkIHx8IGZhbHNlO1xuICAgICAgICBhdHRyLnN0cmlkZSA9IGF0dHIuc3RyaWRlIHx8IDA7XG4gICAgICAgIGF0dHIub2Zmc2V0ID0gYXR0ci5vZmZzZXQgfHwgMDtcbiAgICAgICAgYXR0ci5jb3VudCA9IGF0dHIuY291bnQgfHwgKGF0dHIuc3RyaWRlID8gYXR0ci5kYXRhLmJ5dGVMZW5ndGggLyBhdHRyLnN0cmlkZSA6IGF0dHIuZGF0YS5sZW5ndGggLyBhdHRyLnNpemUpO1xuICAgICAgICBhdHRyLmRpdmlzb3IgPSBhdHRyLmluc3RhbmNlZCB8fCAwO1xuICAgICAgICBhdHRyLm5lZWRzVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIGF0dHIudXNhZ2UgPSBhdHRyLnVzYWdlIHx8IHRoaXMuZ2wuU1RBVElDX0RSQVc7XG5cbiAgICAgICAgaWYgKCFhdHRyLmJ1ZmZlcikge1xuICAgICAgICAgICAgLy8gUHVzaCBkYXRhIHRvIGJ1ZmZlclxuICAgICAgICAgICAgdGhpcy51cGRhdGVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgZ2VvbWV0cnkgY291bnRzLiBJZiBpbmRleGVkLCBpZ25vcmUgcmVndWxhciBhdHRyaWJ1dGVzXG4gICAgICAgIGlmIChhdHRyLmRpdmlzb3IpIHtcbiAgICAgICAgICAgIHRoaXMuaXNJbnN0YW5jZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2VkQ291bnQgJiYgdGhpcy5pbnN0YW5jZWRDb3VudCAhPT0gYXR0ci5jb3VudCAqIGF0dHIuZGl2aXNvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignZ2VvbWV0cnkgaGFzIG11bHRpcGxlIGluc3RhbmNlZCBidWZmZXJzIG9mIGRpZmZlcmVudCBsZW5ndGgnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuaW5zdGFuY2VkQ291bnQgPSBNYXRoLm1pbih0aGlzLmluc3RhbmNlZENvdW50LCBhdHRyLmNvdW50ICogYXR0ci5kaXZpc29yKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlZENvdW50ID0gYXR0ci5jb3VudCAqIGF0dHIuZGl2aXNvcjtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdpbmRleCcpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd1JhbmdlLmNvdW50ID0gYXR0ci5jb3VudDtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5hdHRyaWJ1dGVzLmluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdSYW5nZS5jb3VudCA9IE1hdGgubWF4KHRoaXMuZHJhd1JhbmdlLmNvdW50LCBhdHRyLmNvdW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZUF0dHJpYnV0ZShhdHRyKSB7XG4gICAgICAgIGNvbnN0IGlzTmV3QnVmZmVyID0gIWF0dHIuYnVmZmVyO1xuICAgICAgICBpZiAoaXNOZXdCdWZmZXIpIGF0dHIuYnVmZmVyID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgaWYgKHRoaXMuZ2xTdGF0ZS5ib3VuZEJ1ZmZlciAhPT0gYXR0ci5idWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcihhdHRyLnRhcmdldCwgYXR0ci5idWZmZXIpO1xuICAgICAgICAgICAgdGhpcy5nbFN0YXRlLmJvdW5kQnVmZmVyID0gYXR0ci5idWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV3QnVmZmVyKSB7XG4gICAgICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEoYXR0ci50YXJnZXQsIGF0dHIuZGF0YSwgYXR0ci51c2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdsLmJ1ZmZlclN1YkRhdGEoYXR0ci50YXJnZXQsIDAsIGF0dHIuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgYXR0ci5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHNldEluZGV4KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYWRkQXR0cmlidXRlKCdpbmRleCcsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBzZXREcmF3UmFuZ2Uoc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHRoaXMuZHJhd1JhbmdlLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIHRoaXMuZHJhd1JhbmdlLmNvdW50ID0gY291bnQ7XG4gICAgfVxuXG4gICAgc2V0SW5zdGFuY2VkQ291bnQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZWRDb3VudCA9IHZhbHVlO1xuICAgIH1cblxuICAgIGNyZWF0ZVZBTyhwcm9ncmFtKSB7XG4gICAgICAgIHRoaXMuVkFPc1twcm9ncmFtLmF0dHJpYnV0ZU9yZGVyXSA9IHRoaXMuZ2wucmVuZGVyZXIuY3JlYXRlVmVydGV4QXJyYXkoKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5iaW5kVmVydGV4QXJyYXkodGhpcy5WQU9zW3Byb2dyYW0uYXR0cmlidXRlT3JkZXJdKTtcbiAgICAgICAgdGhpcy5iaW5kQXR0cmlidXRlcyhwcm9ncmFtKTtcbiAgICB9XG5cbiAgICBiaW5kQXR0cmlidXRlcyhwcm9ncmFtKSB7XG4gICAgICAgIC8vIExpbmsgYWxsIGF0dHJpYnV0ZXMgdG8gcHJvZ3JhbSB1c2luZyBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyXG4gICAgICAgIHByb2dyYW0uYXR0cmlidXRlTG9jYXRpb25zLmZvckVhY2goKGxvY2F0aW9uLCB7IG5hbWUsIHR5cGUgfSkgPT4ge1xuICAgICAgICAgICAgLy8gSWYgZ2VvbWV0cnkgbWlzc2luZyBhIHJlcXVpcmVkIHNoYWRlciBhdHRyaWJ1dGVcbiAgICAgICAgICAgIGlmICghdGhpcy5hdHRyaWJ1dGVzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBhY3RpdmUgYXR0cmlidXRlICR7bmFtZX0gbm90IGJlaW5nIHN1cHBsaWVkYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5hdHRyaWJ1dGVzW25hbWVdO1xuXG4gICAgICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIoYXR0ci50YXJnZXQsIGF0dHIuYnVmZmVyKTtcbiAgICAgICAgICAgIHRoaXMuZ2xTdGF0ZS5ib3VuZEJ1ZmZlciA9IGF0dHIuYnVmZmVyO1xuXG4gICAgICAgICAgICAvLyBGb3IgbWF0cml4IGF0dHJpYnV0ZXMsIGJ1ZmZlciBuZWVkcyB0byBiZSBkZWZpbmVkIHBlciBjb2x1bW5cbiAgICAgICAgICAgIGxldCBudW1Mb2MgPSAxO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IDM1Njc0KSBudW1Mb2MgPSAyOyAvLyBtYXQyXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gMzU2NzUpIG51bUxvYyA9IDM7IC8vIG1hdDNcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAzNTY3NikgbnVtTG9jID0gNDsgLy8gbWF0NFxuXG4gICAgICAgICAgICBjb25zdCBzaXplID0gYXR0ci5zaXplIC8gbnVtTG9jO1xuICAgICAgICAgICAgY29uc3Qgc3RyaWRlID0gbnVtTG9jID09PSAxID8gMCA6IG51bUxvYyAqIG51bUxvYyAqIDQ7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBudW1Mb2MgPT09IDEgPyAwIDogbnVtTG9jICogNDtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Mb2M7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihsb2NhdGlvbiArIGksIHNpemUsIGF0dHIudHlwZSwgYXR0ci5ub3JtYWxpemVkLCBhdHRyLnN0cmlkZSArIHN0cmlkZSwgYXR0ci5vZmZzZXQgKyBpICogb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGxvY2F0aW9uICsgaSk7XG5cbiAgICAgICAgICAgICAgICAvLyBGb3IgaW5zdGFuY2VkIGF0dHJpYnV0ZXMsIGRpdmlzb3IgbmVlZHMgdG8gYmUgc2V0LlxuICAgICAgICAgICAgICAgIC8vIEZvciBmaXJlZm94LCBuZWVkIHRvIHNldCBiYWNrIHRvIDAgaWYgbm9uLWluc3RhbmNlZCBkcmF3biBhZnRlciBpbnN0YW5jZWQuIEVsc2Ugd29uJ3QgcmVuZGVyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci52ZXJ0ZXhBdHRyaWJEaXZpc29yKGxvY2F0aW9uICsgaSwgYXR0ci5kaXZpc29yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQmluZCBpbmRpY2VzIGlmIGdlb21ldHJ5IGluZGV4ZWRcbiAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5pbmRleCkgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuYXR0cmlidXRlcy5pbmRleC5idWZmZXIpO1xuICAgIH1cblxuICAgIGRyYXcoeyBwcm9ncmFtLCBtb2RlID0gdGhpcy5nbC5UUklBTkdMRVMgfSkge1xuICAgICAgICBpZiAodGhpcy5nbC5yZW5kZXJlci5jdXJyZW50R2VvbWV0cnkgIT09IGAke3RoaXMuaWR9XyR7cHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcn1gKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuVkFPc1twcm9ncmFtLmF0dHJpYnV0ZU9yZGVyXSkgdGhpcy5jcmVhdGVWQU8ocHJvZ3JhbSk7XG4gICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmJpbmRWZXJ0ZXhBcnJheSh0aGlzLlZBT3NbcHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcl0pO1xuICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5jdXJyZW50R2VvbWV0cnkgPSBgJHt0aGlzLmlkfV8ke3Byb2dyYW0uYXR0cmlidXRlT3JkZXJ9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIGFueSBhdHRyaWJ1dGVzIG5lZWQgdXBkYXRpbmdcbiAgICAgICAgcHJvZ3JhbS5hdHRyaWJ1dGVMb2NhdGlvbnMuZm9yRWFjaCgobG9jYXRpb24sIHsgbmFtZSB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5hdHRyaWJ1dGVzW25hbWVdO1xuICAgICAgICAgICAgaWYgKGF0dHIubmVlZHNVcGRhdGUpIHRoaXMudXBkYXRlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBGb3IgZHJhd0VsZW1lbnRzLCBvZmZzZXQgbmVlZHMgdG8gYmUgbXVsdGlwbGUgb2YgdHlwZSBzaXplXG4gICAgICAgIGxldCBpbmRleEJ5dGVzUGVyRWxlbWVudCA9IDI7XG4gICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuaW5kZXg/LnR5cGUgPT09IHRoaXMuZ2wuVU5TSUdORURfSU5UKSBpbmRleEJ5dGVzUGVyRWxlbWVudCA9IDQ7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNJbnN0YW5jZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmRyYXdFbGVtZW50c0luc3RhbmNlZChcbiAgICAgICAgICAgICAgICAgICAgbW9kZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3UmFuZ2UuY291bnQsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5pbmRleC50eXBlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuaW5kZXgub2Zmc2V0ICsgdGhpcy5kcmF3UmFuZ2Uuc3RhcnQgKiBpbmRleEJ5dGVzUGVyRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZWRDb3VudFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuZHJhd0FycmF5c0luc3RhbmNlZChtb2RlLCB0aGlzLmRyYXdSYW5nZS5zdGFydCwgdGhpcy5kcmF3UmFuZ2UuY291bnQsIHRoaXMuaW5zdGFuY2VkQ291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5pbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wuZHJhd0VsZW1lbnRzKFxuICAgICAgICAgICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdSYW5nZS5jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmluZGV4LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5pbmRleC5vZmZzZXQgKyB0aGlzLmRyYXdSYW5nZS5zdGFydCAqIGluZGV4Qnl0ZXNQZXJFbGVtZW50XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC5kcmF3QXJyYXlzKG1vZGUsIHRoaXMuZHJhd1JhbmdlLnN0YXJ0LCB0aGlzLmRyYXdSYW5nZS5jb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRQb3NpdGlvbigpIHtcbiAgICAgICAgLy8gVXNlIHBvc2l0aW9uIGJ1ZmZlciwgb3IgbWluL21heCBpZiBhdmFpbGFibGVcbiAgICAgICAgY29uc3QgYXR0ciA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjtcbiAgICAgICAgLy8gaWYgKGF0dHIubWluKSByZXR1cm4gWy4uLmF0dHIubWluLCAuLi5hdHRyLm1heF07XG4gICAgICAgIGlmIChhdHRyLmRhdGEpIHJldHVybiBhdHRyO1xuICAgICAgICBpZiAoaXNCb3VuZHNXYXJuZWQpIHJldHVybjtcbiAgICAgICAgY29uc29sZS53YXJuKCdObyBwb3NpdGlvbiBidWZmZXIgZGF0YSBmb3VuZCB0byBjb21wdXRlIGJvdW5kcycpO1xuICAgICAgICByZXR1cm4gKGlzQm91bmRzV2FybmVkID0gdHJ1ZSk7XG4gICAgfVxuXG4gICAgY29tcHV0ZUJvdW5kaW5nQm94KGF0dHIpIHtcbiAgICAgICAgaWYgKCFhdHRyKSBhdHRyID0gdGhpcy5nZXRQb3NpdGlvbigpO1xuICAgICAgICBjb25zdCBhcnJheSA9IGF0dHIuZGF0YTtcbiAgICAgICAgLy8gRGF0YSBsb2FkZWQgc2hvdWxkbid0IGhhYXZlIHN0cmlkZSwgb25seSBidWZmZXJzXG4gICAgICAgIC8vIGNvbnN0IHN0cmlkZSA9IGF0dHIuc3RyaWRlID8gYXR0ci5zdHJpZGUgLyBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCA6IGF0dHIuc2l6ZTtcbiAgICAgICAgY29uc3Qgc3RyaWRlID0gYXR0ci5zaXplO1xuXG4gICAgICAgIGlmICghdGhpcy5ib3VuZHMpIHtcbiAgICAgICAgICAgIHRoaXMuYm91bmRzID0ge1xuICAgICAgICAgICAgICAgIG1pbjogbmV3IFZlYzMoKSxcbiAgICAgICAgICAgICAgICBtYXg6IG5ldyBWZWMzKCksXG4gICAgICAgICAgICAgICAgY2VudGVyOiBuZXcgVmVjMygpLFxuICAgICAgICAgICAgICAgIHNjYWxlOiBuZXcgVmVjMygpLFxuICAgICAgICAgICAgICAgIHJhZGl1czogSW5maW5pdHksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWluID0gdGhpcy5ib3VuZHMubWluO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLmJvdW5kcy5tYXg7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHRoaXMuYm91bmRzLmNlbnRlcjtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSB0aGlzLmJvdW5kcy5zY2FsZTtcblxuICAgICAgICBtaW4uc2V0KCtJbmZpbml0eSk7XG4gICAgICAgIG1heC5zZXQoLUluZmluaXR5KTtcblxuICAgICAgICAvLyBUT0RPOiBjaGVjayBzaXplIG9mIHBvc2l0aW9uIChlZyB0cmlhbmdsZSB3aXRoIFZlYzIpXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHggPSBhcnJheVtpXTtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBhcnJheVtpICsgMV07XG4gICAgICAgICAgICBjb25zdCB6ID0gYXJyYXlbaSArIDJdO1xuXG4gICAgICAgICAgICBtaW4ueCA9IE1hdGgubWluKHgsIG1pbi54KTtcbiAgICAgICAgICAgIG1pbi55ID0gTWF0aC5taW4oeSwgbWluLnkpO1xuICAgICAgICAgICAgbWluLnogPSBNYXRoLm1pbih6LCBtaW4ueik7XG5cbiAgICAgICAgICAgIG1heC54ID0gTWF0aC5tYXgoeCwgbWF4LngpO1xuICAgICAgICAgICAgbWF4LnkgPSBNYXRoLm1heCh5LCBtYXgueSk7XG4gICAgICAgICAgICBtYXgueiA9IE1hdGgubWF4KHosIG1heC56KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjYWxlLnN1YihtYXgsIG1pbik7XG4gICAgICAgIGNlbnRlci5hZGQobWluLCBtYXgpLmRpdmlkZSgyKTtcbiAgICB9XG5cbiAgICBjb21wdXRlQm91bmRpbmdTcGhlcmUoYXR0cikge1xuICAgICAgICBpZiAoIWF0dHIpIGF0dHIgPSB0aGlzLmdldFBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFycmF5ID0gYXR0ci5kYXRhO1xuICAgICAgICAvLyBEYXRhIGxvYWRlZCBzaG91bGRuJ3QgaGFhdmUgc3RyaWRlLCBvbmx5IGJ1ZmZlcnNcbiAgICAgICAgLy8gY29uc3Qgc3RyaWRlID0gYXR0ci5zdHJpZGUgPyBhdHRyLnN0cmlkZSAvIGFycmF5LkJZVEVTX1BFUl9FTEVNRU5UIDogYXR0ci5zaXplO1xuICAgICAgICBjb25zdCBzdHJpZGUgPSBhdHRyLnNpemU7XG5cbiAgICAgICAgaWYgKCF0aGlzLmJvdW5kcykgdGhpcy5jb21wdXRlQm91bmRpbmdCb3goYXR0cik7XG5cbiAgICAgICAgbGV0IG1heFJhZGl1c1NxID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xuICAgICAgICAgICAgdGVtcFZlYzMuZnJvbUFycmF5KGFycmF5LCBpKTtcbiAgICAgICAgICAgIG1heFJhZGl1c1NxID0gTWF0aC5tYXgobWF4UmFkaXVzU3EsIHRoaXMuYm91bmRzLmNlbnRlci5zcXVhcmVkRGlzdGFuY2UodGVtcFZlYzMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYm91bmRzLnJhZGl1cyA9IE1hdGguc3FydChtYXhSYWRpdXNTcSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKCkge1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5WQU9zKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmRlbGV0ZVZlcnRleEFycmF5KHRoaXMuVkFPc1trZXldKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLlZBT3Nba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5hdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICB0aGlzLmdsLmRlbGV0ZUJ1ZmZlcih0aGlzLmF0dHJpYnV0ZXNba2V5XS5idWZmZXIpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIlZlYzMiLCJ0ZW1wVmVjMyIsIklEIiwiQVRUUl9JRCIsImlzQm91bmRzV2FybmVkIiwiR2VvbWV0cnkiLCJhZGRBdHRyaWJ1dGUiLCJrZXkiLCJhdHRyIiwiYXR0cmlidXRlcyIsImlkIiwic2l6ZSIsInR5cGUiLCJkYXRhIiwiY29uc3RydWN0b3IiLCJGbG9hdDMyQXJyYXkiLCJnbCIsIkZMT0FUIiwiVWludDE2QXJyYXkiLCJVTlNJR05FRF9TSE9SVCIsIlVOU0lHTkVEX0lOVCIsInRhcmdldCIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSIiwiQVJSQVlfQlVGRkVSIiwibm9ybWFsaXplZCIsInN0cmlkZSIsIm9mZnNldCIsImNvdW50IiwiYnl0ZUxlbmd0aCIsImxlbmd0aCIsImRpdmlzb3IiLCJpbnN0YW5jZWQiLCJuZWVkc1VwZGF0ZSIsInVzYWdlIiwiU1RBVElDX0RSQVciLCJidWZmZXIiLCJ1cGRhdGVBdHRyaWJ1dGUiLCJpc0luc3RhbmNlZCIsImluc3RhbmNlZENvdW50IiwiY29uc29sZSIsIndhcm4iLCJNYXRoIiwibWluIiwiZHJhd1JhbmdlIiwiaW5kZXgiLCJtYXgiLCJpc05ld0J1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsImdsU3RhdGUiLCJib3VuZEJ1ZmZlciIsImJpbmRCdWZmZXIiLCJidWZmZXJEYXRhIiwiYnVmZmVyU3ViRGF0YSIsInNldEluZGV4IiwidmFsdWUiLCJzZXREcmF3UmFuZ2UiLCJzdGFydCIsInNldEluc3RhbmNlZENvdW50IiwiY3JlYXRlVkFPIiwicHJvZ3JhbSIsIlZBT3MiLCJhdHRyaWJ1dGVPcmRlciIsInJlbmRlcmVyIiwiY3JlYXRlVmVydGV4QXJyYXkiLCJiaW5kVmVydGV4QXJyYXkiLCJiaW5kQXR0cmlidXRlcyIsImF0dHJpYnV0ZUxvY2F0aW9ucyIsImZvckVhY2giLCJsb2NhdGlvbiIsIm5hbWUiLCJudW1Mb2MiLCJpIiwidmVydGV4QXR0cmliUG9pbnRlciIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwidmVydGV4QXR0cmliRGl2aXNvciIsImRyYXciLCJtb2RlIiwiVFJJQU5HTEVTIiwiY3VycmVudEdlb21ldHJ5IiwiaW5kZXhCeXRlc1BlckVsZW1lbnQiLCJkcmF3RWxlbWVudHNJbnN0YW5jZWQiLCJkcmF3QXJyYXlzSW5zdGFuY2VkIiwiZHJhd0VsZW1lbnRzIiwiZHJhd0FycmF5cyIsImdldFBvc2l0aW9uIiwicG9zaXRpb24iLCJjb21wdXRlQm91bmRpbmdCb3giLCJhcnJheSIsImJvdW5kcyIsImNlbnRlciIsInNjYWxlIiwicmFkaXVzIiwiSW5maW5pdHkiLCJzZXQiLCJsIiwieCIsInkiLCJ6Iiwic3ViIiwiYWRkIiwiZGl2aWRlIiwiY29tcHV0ZUJvdW5kaW5nU3BoZXJlIiwibWF4UmFkaXVzU3EiLCJmcm9tQXJyYXkiLCJzcXVhcmVkRGlzdGFuY2UiLCJzcXJ0IiwicmVtb3ZlIiwiZGVsZXRlVmVydGV4QXJyYXkiLCJkZWxldGVCdWZmZXIiLCJjYW52YXMiLCJlcnJvciIsInN0YXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/core/Geometry.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/core/Mesh.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/core/Mesh.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mesh: function() { return /* binding */ Mesh; }\n/* harmony export */ });\n/* harmony import */ var _Transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Transform.js */ \"(app-pages-browser)/./node_modules/ogl/src/core/Transform.js\");\n/* harmony import */ var _math_Mat3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/Mat3.js */ \"(app-pages-browser)/./node_modules/ogl/src/math/Mat3.js\");\n/* harmony import */ var _math_Mat4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Mat4.js */ \"(app-pages-browser)/./node_modules/ogl/src/math/Mat4.js\");\n\n\n\nlet ID = 0;\nclass Mesh extends _Transform_js__WEBPACK_IMPORTED_MODULE_0__.Transform {\n    onBeforeRender(f) {\n        this.beforeRenderCallbacks.push(f);\n        return this;\n    }\n    onAfterRender(f) {\n        this.afterRenderCallbacks.push(f);\n        return this;\n    }\n    draw() {\n        let { camera } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        if (camera) {\n            // Add empty matrix uniforms to program if unset\n            if (!this.program.uniforms.modelMatrix) {\n                Object.assign(this.program.uniforms, {\n                    modelMatrix: {\n                        value: null\n                    },\n                    viewMatrix: {\n                        value: null\n                    },\n                    modelViewMatrix: {\n                        value: null\n                    },\n                    normalMatrix: {\n                        value: null\n                    },\n                    projectionMatrix: {\n                        value: null\n                    },\n                    cameraPosition: {\n                        value: null\n                    }\n                });\n            }\n            // Set the matrix uniforms\n            this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\n            this.program.uniforms.cameraPosition.value = camera.worldPosition;\n            this.program.uniforms.viewMatrix.value = camera.viewMatrix;\n            this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n            this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n            this.program.uniforms.modelMatrix.value = this.worldMatrix;\n            this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\n            this.program.uniforms.normalMatrix.value = this.normalMatrix;\n        }\n        this.beforeRenderCallbacks.forEach((f)=>f && f({\n                mesh: this,\n                camera\n            }));\n        // determine if faces need to be flipped - when mesh scaled negatively\n        let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\n        this.program.use({\n            flipFaces\n        });\n        this.geometry.draw({\n            mode: this.mode,\n            program: this.program\n        });\n        this.afterRenderCallbacks.forEach((f)=>f && f({\n                mesh: this,\n                camera\n            }));\n    }\n    constructor(gl, { geometry, program, mode = gl.TRIANGLES, frustumCulled = true, renderOrder = 0 } = {}){\n        super();\n        if (!gl.canvas) console.error(\"gl not passed as first argument to Mesh\");\n        this.gl = gl;\n        this.id = ID++;\n        this.geometry = geometry;\n        this.program = program;\n        this.mode = mode;\n        // Used to skip frustum culling\n        this.frustumCulled = frustumCulled;\n        // Override sorting to force an order\n        this.renderOrder = renderOrder;\n        this.modelViewMatrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_1__.Mat4();\n        this.normalMatrix = new _math_Mat3_js__WEBPACK_IMPORTED_MODULE_2__.Mat3();\n        this.beforeRenderCallbacks = [];\n        this.afterRenderCallbacks = [];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvTWVzaC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTJDO0FBQ0o7QUFDQTtBQUV2QyxJQUFJRyxLQUFLO0FBRUYsTUFBTUMsYUFBYUosb0RBQVNBO0lBcUIvQkssZUFBZUMsQ0FBQyxFQUFFO1FBQ2QsSUFBSSxDQUFDQyxxQkFBcUIsQ0FBQ0MsSUFBSSxDQUFDRjtRQUNoQyxPQUFPLElBQUk7SUFDZjtJQUVBRyxjQUFjSCxDQUFDLEVBQUU7UUFDYixJQUFJLENBQUNJLG9CQUFvQixDQUFDRixJQUFJLENBQUNGO1FBQy9CLE9BQU8sSUFBSTtJQUNmO0lBRUFLLE9BQXNCO1lBQWpCLEVBQUVDLE1BQU0sRUFBRSxHQUFWLGlFQUFhLENBQUM7UUFDZixJQUFJQSxRQUFRO1lBQ1IsZ0RBQWdEO1lBQ2hELElBQUksQ0FBQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDQyxXQUFXLEVBQUU7Z0JBQ3BDQyxPQUFPQyxNQUFNLENBQUMsSUFBSSxDQUFDSixPQUFPLENBQUNDLFFBQVEsRUFBRTtvQkFDakNDLGFBQWE7d0JBQUVHLE9BQU87b0JBQUs7b0JBQzNCQyxZQUFZO3dCQUFFRCxPQUFPO29CQUFLO29CQUMxQkUsaUJBQWlCO3dCQUFFRixPQUFPO29CQUFLO29CQUMvQkcsY0FBYzt3QkFBRUgsT0FBTztvQkFBSztvQkFDNUJJLGtCQUFrQjt3QkFBRUosT0FBTztvQkFBSztvQkFDaENLLGdCQUFnQjt3QkFBRUwsT0FBTztvQkFBSztnQkFDbEM7WUFDSjtZQUVBLDBCQUEwQjtZQUMxQixJQUFJLENBQUNMLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDUSxnQkFBZ0IsQ0FBQ0osS0FBSyxHQUFHTixPQUFPVSxnQkFBZ0I7WUFDdEUsSUFBSSxDQUFDVCxPQUFPLENBQUNDLFFBQVEsQ0FBQ1MsY0FBYyxDQUFDTCxLQUFLLEdBQUdOLE9BQU9ZLGFBQWE7WUFDakUsSUFBSSxDQUFDWCxPQUFPLENBQUNDLFFBQVEsQ0FBQ0ssVUFBVSxDQUFDRCxLQUFLLEdBQUdOLE9BQU9PLFVBQVU7WUFDMUQsSUFBSSxDQUFDQyxlQUFlLENBQUNLLFFBQVEsQ0FBQ2IsT0FBT08sVUFBVSxFQUFFLElBQUksQ0FBQ08sV0FBVztZQUNqRSxJQUFJLENBQUNMLFlBQVksQ0FBQ00sZUFBZSxDQUFDLElBQUksQ0FBQ1AsZUFBZTtZQUN0RCxJQUFJLENBQUNQLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDQyxXQUFXLENBQUNHLEtBQUssR0FBRyxJQUFJLENBQUNRLFdBQVc7WUFDMUQsSUFBSSxDQUFDYixPQUFPLENBQUNDLFFBQVEsQ0FBQ00sZUFBZSxDQUFDRixLQUFLLEdBQUcsSUFBSSxDQUFDRSxlQUFlO1lBQ2xFLElBQUksQ0FBQ1AsT0FBTyxDQUFDQyxRQUFRLENBQUNPLFlBQVksQ0FBQ0gsS0FBSyxHQUFHLElBQUksQ0FBQ0csWUFBWTtRQUNoRTtRQUNBLElBQUksQ0FBQ2QscUJBQXFCLENBQUNxQixPQUFPLENBQUMsQ0FBQ3RCLElBQU1BLEtBQUtBLEVBQUU7Z0JBQUV1QixNQUFNLElBQUk7Z0JBQUVqQjtZQUFPO1FBRXRFLHNFQUFzRTtRQUN0RSxJQUFJa0IsWUFBWSxJQUFJLENBQUNqQixPQUFPLENBQUNrQixRQUFRLElBQUksSUFBSSxDQUFDTCxXQUFXLENBQUNNLFdBQVcsS0FBSztRQUMxRSxJQUFJLENBQUNuQixPQUFPLENBQUNvQixHQUFHLENBQUM7WUFBRUg7UUFBVTtRQUM3QixJQUFJLENBQUNJLFFBQVEsQ0FBQ3ZCLElBQUksQ0FBQztZQUFFd0IsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFBRXRCLFNBQVMsSUFBSSxDQUFDQSxPQUFPO1FBQUM7UUFDNUQsSUFBSSxDQUFDSCxvQkFBb0IsQ0FBQ2tCLE9BQU8sQ0FBQyxDQUFDdEIsSUFBTUEsS0FBS0EsRUFBRTtnQkFBRXVCLE1BQU0sSUFBSTtnQkFBRWpCO1lBQU87SUFDekU7SUE3REF3QixZQUFZQyxFQUFFLEVBQUUsRUFBRUgsUUFBUSxFQUFFckIsT0FBTyxFQUFFc0IsT0FBT0UsR0FBR0MsU0FBUyxFQUFFQyxnQkFBZ0IsSUFBSSxFQUFFQyxjQUFjLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFFO1FBQ3BHLEtBQUs7UUFDTCxJQUFJLENBQUNILEdBQUdJLE1BQU0sRUFBRUMsUUFBUUMsS0FBSyxDQUFDO1FBQzlCLElBQUksQ0FBQ04sRUFBRSxHQUFHQTtRQUNWLElBQUksQ0FBQ08sRUFBRSxHQUFHekM7UUFDVixJQUFJLENBQUMrQixRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ3JCLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNzQixJQUFJLEdBQUdBO1FBRVosK0JBQStCO1FBQy9CLElBQUksQ0FBQ0ksYUFBYSxHQUFHQTtRQUVyQixxQ0FBcUM7UUFDckMsSUFBSSxDQUFDQyxXQUFXLEdBQUdBO1FBQ25CLElBQUksQ0FBQ3BCLGVBQWUsR0FBRyxJQUFJbEIsK0NBQUlBO1FBQy9CLElBQUksQ0FBQ21CLFlBQVksR0FBRyxJQUFJcEIsK0NBQUlBO1FBQzVCLElBQUksQ0FBQ00scUJBQXFCLEdBQUcsRUFBRTtRQUMvQixJQUFJLENBQUNHLG9CQUFvQixHQUFHLEVBQUU7SUFDbEM7QUE0Q0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvY29yZS9NZXNoLmpzPzI5ZjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnLi9UcmFuc2Zvcm0uanMnO1xuaW1wb3J0IHsgTWF0MyB9IGZyb20gJy4uL21hdGgvTWF0My5qcyc7XG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSAnLi4vbWF0aC9NYXQ0LmpzJztcblxubGV0IElEID0gMDtcblxuZXhwb3J0IGNsYXNzIE1lc2ggZXh0ZW5kcyBUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKGdsLCB7IGdlb21ldHJ5LCBwcm9ncmFtLCBtb2RlID0gZ2wuVFJJQU5HTEVTLCBmcnVzdHVtQ3VsbGVkID0gdHJ1ZSwgcmVuZGVyT3JkZXIgPSAwIH0gPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAoIWdsLmNhbnZhcykgY29uc29sZS5lcnJvcignZ2wgbm90IHBhc3NlZCBhcyBmaXJzdCBhcmd1bWVudCB0byBNZXNoJyk7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy5pZCA9IElEKys7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gcHJvZ3JhbTtcbiAgICAgICAgdGhpcy5tb2RlID0gbW9kZTtcblxuICAgICAgICAvLyBVc2VkIHRvIHNraXAgZnJ1c3R1bSBjdWxsaW5nXG4gICAgICAgIHRoaXMuZnJ1c3R1bUN1bGxlZCA9IGZydXN0dW1DdWxsZWQ7XG5cbiAgICAgICAgLy8gT3ZlcnJpZGUgc29ydGluZyB0byBmb3JjZSBhbiBvcmRlclxuICAgICAgICB0aGlzLnJlbmRlck9yZGVyID0gcmVuZGVyT3JkZXI7XG4gICAgICAgIHRoaXMubW9kZWxWaWV3TWF0cml4ID0gbmV3IE1hdDQoKTtcbiAgICAgICAgdGhpcy5ub3JtYWxNYXRyaXggPSBuZXcgTWF0MygpO1xuICAgICAgICB0aGlzLmJlZm9yZVJlbmRlckNhbGxiYWNrcyA9IFtdO1xuICAgICAgICB0aGlzLmFmdGVyUmVuZGVyQ2FsbGJhY2tzID0gW107XG4gICAgfVxuXG4gICAgb25CZWZvcmVSZW5kZXIoZikge1xuICAgICAgICB0aGlzLmJlZm9yZVJlbmRlckNhbGxiYWNrcy5wdXNoKGYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBvbkFmdGVyUmVuZGVyKGYpIHtcbiAgICAgICAgdGhpcy5hZnRlclJlbmRlckNhbGxiYWNrcy5wdXNoKGYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkcmF3KHsgY2FtZXJhIH0gPSB7fSkge1xuICAgICAgICBpZiAoY2FtZXJhKSB7XG4gICAgICAgICAgICAvLyBBZGQgZW1wdHkgbWF0cml4IHVuaWZvcm1zIHRvIHByb2dyYW0gaWYgdW5zZXRcbiAgICAgICAgICAgIGlmICghdGhpcy5wcm9ncmFtLnVuaWZvcm1zLm1vZGVsTWF0cml4KSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLnByb2dyYW0udW5pZm9ybXMsIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxNYXRyaXg6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgdmlld01hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICBtb2RlbFZpZXdNYXRyaXg6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsTWF0cml4OiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Rpb25NYXRyaXg6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgY2FtZXJhUG9zaXRpb246IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IHRoZSBtYXRyaXggdW5pZm9ybXNcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5wcm9qZWN0aW9uTWF0cml4LnZhbHVlID0gY2FtZXJhLnByb2plY3Rpb25NYXRyaXg7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMuY2FtZXJhUG9zaXRpb24udmFsdWUgPSBjYW1lcmEud29ybGRQb3NpdGlvbjtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy52aWV3TWF0cml4LnZhbHVlID0gY2FtZXJhLnZpZXdNYXRyaXg7XG4gICAgICAgICAgICB0aGlzLm1vZGVsVmlld01hdHJpeC5tdWx0aXBseShjYW1lcmEudmlld01hdHJpeCwgdGhpcy53b3JsZE1hdHJpeCk7XG4gICAgICAgICAgICB0aGlzLm5vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgodGhpcy5tb2RlbFZpZXdNYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLm1vZGVsTWF0cml4LnZhbHVlID0gdGhpcy53b3JsZE1hdHJpeDtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5tb2RlbFZpZXdNYXRyaXgudmFsdWUgPSB0aGlzLm1vZGVsVmlld01hdHJpeDtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5ub3JtYWxNYXRyaXgudmFsdWUgPSB0aGlzLm5vcm1hbE1hdHJpeDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJlZm9yZVJlbmRlckNhbGxiYWNrcy5mb3JFYWNoKChmKSA9PiBmICYmIGYoeyBtZXNoOiB0aGlzLCBjYW1lcmEgfSkpO1xuXG4gICAgICAgIC8vIGRldGVybWluZSBpZiBmYWNlcyBuZWVkIHRvIGJlIGZsaXBwZWQgLSB3aGVuIG1lc2ggc2NhbGVkIG5lZ2F0aXZlbHlcbiAgICAgICAgbGV0IGZsaXBGYWNlcyA9IHRoaXMucHJvZ3JhbS5jdWxsRmFjZSAmJiB0aGlzLndvcmxkTWF0cml4LmRldGVybWluYW50KCkgPCAwO1xuICAgICAgICB0aGlzLnByb2dyYW0udXNlKHsgZmxpcEZhY2VzIH0pO1xuICAgICAgICB0aGlzLmdlb21ldHJ5LmRyYXcoeyBtb2RlOiB0aGlzLm1vZGUsIHByb2dyYW06IHRoaXMucHJvZ3JhbSB9KTtcbiAgICAgICAgdGhpcy5hZnRlclJlbmRlckNhbGxiYWNrcy5mb3JFYWNoKChmKSA9PiBmICYmIGYoeyBtZXNoOiB0aGlzLCBjYW1lcmEgfSkpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJUcmFuc2Zvcm0iLCJNYXQzIiwiTWF0NCIsIklEIiwiTWVzaCIsIm9uQmVmb3JlUmVuZGVyIiwiZiIsImJlZm9yZVJlbmRlckNhbGxiYWNrcyIsInB1c2giLCJvbkFmdGVyUmVuZGVyIiwiYWZ0ZXJSZW5kZXJDYWxsYmFja3MiLCJkcmF3IiwiY2FtZXJhIiwicHJvZ3JhbSIsInVuaWZvcm1zIiwibW9kZWxNYXRyaXgiLCJPYmplY3QiLCJhc3NpZ24iLCJ2YWx1ZSIsInZpZXdNYXRyaXgiLCJtb2RlbFZpZXdNYXRyaXgiLCJub3JtYWxNYXRyaXgiLCJwcm9qZWN0aW9uTWF0cml4IiwiY2FtZXJhUG9zaXRpb24iLCJ3b3JsZFBvc2l0aW9uIiwibXVsdGlwbHkiLCJ3b3JsZE1hdHJpeCIsImdldE5vcm1hbE1hdHJpeCIsImZvckVhY2giLCJtZXNoIiwiZmxpcEZhY2VzIiwiY3VsbEZhY2UiLCJkZXRlcm1pbmFudCIsInVzZSIsImdlb21ldHJ5IiwibW9kZSIsImNvbnN0cnVjdG9yIiwiZ2wiLCJUUklBTkdMRVMiLCJmcnVzdHVtQ3VsbGVkIiwicmVuZGVyT3JkZXIiLCJjYW52YXMiLCJjb25zb2xlIiwiZXJyb3IiLCJpZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/core/Mesh.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/core/Program.js":
/*!**********************************************!*\
  !*** ./node_modules/ogl/src/core/Program.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Program: function() { return /* binding */ Program; }\n/* harmony export */ });\n// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\nlet ID = 1;\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\nclass Program {\n    setShaders(param) {\n        let { vertex, fragment } = param;\n        if (vertex) {\n            // compile vertex shader and log errors\n            this.gl.shaderSource(this.vertexShader, vertex);\n            this.gl.compileShader(this.vertexShader);\n            if (this.gl.getShaderInfoLog(this.vertexShader) !== \"\") {\n                console.warn(\"\".concat(this.gl.getShaderInfoLog(this.vertexShader), \"\\nVertex Shader\\n\").concat(addLineNumbers(vertex)));\n            }\n        }\n        if (fragment) {\n            // compile fragment shader and log errors\n            this.gl.shaderSource(this.fragmentShader, fragment);\n            this.gl.compileShader(this.fragmentShader);\n            if (this.gl.getShaderInfoLog(this.fragmentShader) !== \"\") {\n                console.warn(\"\".concat(this.gl.getShaderInfoLog(this.fragmentShader), \"\\nFragment Shader\\n\").concat(addLineNumbers(fragment)));\n            }\n        }\n        // compile program and log errors\n        this.gl.linkProgram(this.program);\n        if (!this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS)) {\n            return console.warn(this.gl.getProgramInfoLog(this.program));\n        }\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_UNIFORMS);\n        for(let uIndex = 0; uIndex < numUniforms; uIndex++){\n            let uniform = this.gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, this.gl.getUniformLocation(this.program, uniform.name));\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n            uniform.uniformName = split[0];\n            uniform.nameComponents = split.slice(1);\n        }\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_ATTRIBUTES);\n        for(let aIndex = 0; aIndex < numAttribs; aIndex++){\n            const attribute = this.gl.getActiveAttrib(this.program, aIndex);\n            const location = this.gl.getAttribLocation(this.program, attribute.name);\n            // Ignore special built-in inputs. eg gl_VertexID, gl_InstanceID\n            if (location === -1) continue;\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join(\"\");\n    }\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n    setStencilFunc(func, ref, mask) {\n        this.stencilRef = ref;\n        this.stencilFunc.func = func;\n        this.stencilFunc.ref = ref;\n        this.stencilFunc.mask = mask;\n    }\n    setStencilOp(stencilFail, depthFail, depthPass) {\n        this.stencilOp.stencilFail = stencilFail;\n        this.stencilOp.depthFail = depthFail;\n        this.stencilOp.depthPass = depthPass;\n    }\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src) this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n        if (this.stencilFunc.func || this.stencilOp.stencilFail) this.gl.renderer.enable(this.gl.STENCIL_TEST);\n        else this.gl.renderer.disable(this.gl.STENCIL_TEST);\n        this.gl.renderer.setStencilFunc(this.stencilFunc.func, this.stencilFunc.ref, this.stencilFunc.mask);\n        this.gl.renderer.setStencilOp(this.stencilOp.stencilFail, this.stencilOp.depthFail, this.stencilOp.depthPass);\n    }\n    use() {\n        let { flipFaces = false } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.state.currentProgram === this.id;\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.state.currentProgram = this.id;\n        }\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform)=>{\n            let uniform = this.uniforms[activeUniform.uniformName];\n            for (const component of activeUniform.nameComponents){\n                if (!uniform) break;\n                if (component in uniform) {\n                    uniform = uniform[component];\n                } else if (Array.isArray(uniform.value)) {\n                    break;\n                } else {\n                    uniform = undefined;\n                    break;\n                }\n            }\n            if (!uniform) {\n                return warn(\"Active uniform \".concat(activeUniform.name, \" has not been supplied\"));\n            }\n            if (uniform && uniform.value === undefined) {\n                return warn(\"\".concat(activeUniform.name, \" uniform is missing a value parameter\"));\n            }\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value)=>{\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n    constructor(gl, { vertex, fragment, uniforms = {}, transparent = false, cullFace = gl.BACK, frontFace = gl.CCW, depthTest = true, depthWrite = true, depthFunc = gl.LEQUAL } = {}){\n        if (!gl.canvas) console.error(\"gl not passed as first argument to Program\");\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n        if (!vertex) console.warn(\"vertex shader not supplied\");\n        if (!fragment) console.warn(\"fragment shader not supplied\");\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n        this.stencilFunc = {};\n        this.stencilOp = {};\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n        // Create empty shaders and attach to program\n        this.vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        this.fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, this.vertexShader);\n        gl.attachShader(this.program, this.fragmentShader);\n        // Compile shaders with source\n        this.setShaders({\n            vertex,\n            fragment\n        });\n    }\n}\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n    switch(type){\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670:\n        case 5124:\n        case 35678:\n        case 36306:\n        case 35680:\n        case 36289:\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671:\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672:\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673:\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\nfunction addLineNumbers(string) {\n    let lines = string.split(\"\\n\");\n    for(let i = 0; i < lines.length; i++){\n        lines[i] = i + 1 + \": \" + lines[i];\n    }\n    return lines.join(\"\\n\");\n}\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for(let i = 0; i < arrayLen; i++)value.set(a[i], i * valueLen);\n    return value;\n}\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for(let i = 0, l = a.length; i < l; i++){\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\nfunction setArray(a, b) {\n    for(let i = 0, l = a.length; i < l; i++){\n        a[i] = b[i];\n    }\n}\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn(\"More than 100 program warnings - stopping logs.\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvUHJvZ3JhbS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaURBQWlEO0FBQ2pELHlDQUF5QztBQUN6QyxxQkFBcUI7QUFFckIsSUFBSUEsS0FBSztBQUVULHVEQUF1RDtBQUN2RCxNQUFNQyxnQkFBZ0IsQ0FBQztBQUVoQixNQUFNQztJQXFEVEMsV0FBVyxLQUFvQixFQUFFO1lBQXRCLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFLEdBQXBCO1FBQ1AsSUFBSUQsUUFBUTtZQUNSLHVDQUF1QztZQUN2QyxJQUFJLENBQUNFLEVBQUUsQ0FBQ0MsWUFBWSxDQUFDLElBQUksQ0FBQ0MsWUFBWSxFQUFFSjtZQUN4QyxJQUFJLENBQUNFLEVBQUUsQ0FBQ0csYUFBYSxDQUFDLElBQUksQ0FBQ0QsWUFBWTtZQUN2QyxJQUFJLElBQUksQ0FBQ0YsRUFBRSxDQUFDSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUNGLFlBQVksTUFBTSxJQUFJO2dCQUNwREcsUUFBUUMsSUFBSSxDQUFDLEdBQWtFQyxPQUEvRCxJQUFJLENBQUNQLEVBQUUsQ0FBQ0ksZ0JBQWdCLENBQUMsSUFBSSxDQUFDRixZQUFZLEdBQUUscUJBQTBDLE9BQXZCSyxlQUFlVDtZQUNsRztRQUNKO1FBRUEsSUFBSUMsVUFBVTtZQUNWLHlDQUF5QztZQUN6QyxJQUFJLENBQUNDLEVBQUUsQ0FBQ0MsWUFBWSxDQUFDLElBQUksQ0FBQ08sY0FBYyxFQUFFVDtZQUMxQyxJQUFJLENBQUNDLEVBQUUsQ0FBQ0csYUFBYSxDQUFDLElBQUksQ0FBQ0ssY0FBYztZQUN6QyxJQUFJLElBQUksQ0FBQ1IsRUFBRSxDQUFDSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUNJLGNBQWMsTUFBTSxJQUFJO2dCQUN0REgsUUFBUUMsSUFBSSxDQUFDLEdBQXNFQyxPQUFuRSxJQUFJLENBQUNQLEVBQUUsQ0FBQ0ksZ0JBQWdCLENBQUMsSUFBSSxDQUFDSSxjQUFjLEdB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QWEsQ0FBQ3dHLE9BQU8sR0FBR04sUUFBUSxJQUFJbUQsYUFBYTdDO0lBQzdELElBQUssSUFBSXlDLElBQUksR0FBR0EsSUFBSUUsVUFBVUYsSUFBSy9DLE1BQU14RSxHQUFHLENBQUN3SCxDQUFDLENBQUNELEVBQUUsRUFBRUEsSUFBSUc7SUFDdkQsT0FBT2xEO0FBQ1g7QUFFQSxTQUFTOEIsWUFBWWtCLENBQUMsRUFBRUksQ0FBQztJQUNyQixJQUFJSixFQUFFMUMsTUFBTSxLQUFLOEMsRUFBRTlDLE1BQU0sRUFBRSxPQUFPO0lBQ2xDLElBQUssSUFBSXlDLElBQUksR0FBR00sSUFBSUwsRUFBRTFDLE1BQU0sRUFBRXlDLElBQUlNLEdBQUdOLElBQUs7UUFDdEMsSUFBSUMsQ0FBQyxDQUFDRCxFQUFFLEtBQUtLLENBQUMsQ0FBQ0wsRUFBRSxFQUFFLE9BQU87SUFDOUI7SUFDQSxPQUFPO0FBQ1g7QUFFQSxTQUFTaEIsU0FBU2lCLENBQUMsRUFBRUksQ0FBQztJQUNsQixJQUFLLElBQUlMLElBQUksR0FBR00sSUFBSUwsRUFBRTFDLE1BQU0sRUFBRXlDLElBQUlNLEdBQUdOLElBQUs7UUFDdENDLENBQUMsQ0FBQ0QsRUFBRSxHQUFHSyxDQUFDLENBQUNMLEVBQUU7SUFDZjtBQUNKO0FBRUEsSUFBSU8sWUFBWTtBQUNoQixTQUFTN0ksS0FBSzhJLE9BQU87SUFDakIsSUFBSUQsWUFBWSxLQUFLO0lBQ3JCOUksUUFBUUMsSUFBSSxDQUFDOEk7SUFDYkQ7SUFDQSxJQUFJQSxZQUFZLEtBQUs5SSxRQUFRQyxJQUFJLENBQUM7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvY29yZS9Qcm9ncmFtLmpzPzVmNTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVE9ETzogdXBsb2FkIGVtcHR5IHRleHR1cmUgaWYgbnVsbCA/IG1heWJlIG5vdFxuLy8gVE9ETzogdXBsb2FkIGlkZW50aXR5IG1hdHJpeCBpZiBudWxsID9cbi8vIFRPRE86IHNhbXBsZXIgQ3ViZVxuXG5sZXQgSUQgPSAxO1xuXG4vLyBjYWNoZSBvZiB0eXBlZCBhcnJheXMgdXNlZCB0byBmbGF0dGVuIHVuaWZvcm0gYXJyYXlzXG5jb25zdCBhcnJheUNhY2hlRjMyID0ge307XG5cbmV4cG9ydCBjbGFzcyBQcm9ncmFtIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2wsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZlcnRleCxcbiAgICAgICAgICAgIGZyYWdtZW50LFxuICAgICAgICAgICAgdW5pZm9ybXMgPSB7fSxcblxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgPSBmYWxzZSxcbiAgICAgICAgICAgIGN1bGxGYWNlID0gZ2wuQkFDSyxcbiAgICAgICAgICAgIGZyb250RmFjZSA9IGdsLkNDVyxcbiAgICAgICAgICAgIGRlcHRoVGVzdCA9IHRydWUsXG4gICAgICAgICAgICBkZXB0aFdyaXRlID0gdHJ1ZSxcbiAgICAgICAgICAgIGRlcHRoRnVuYyA9IGdsLkxFUVVBTCxcbiAgICAgICAgfSA9IHt9XG4gICAgKSB7XG4gICAgICAgIGlmICghZ2wuY2FudmFzKSBjb25zb2xlLmVycm9yKCdnbCBub3QgcGFzc2VkIGFzIGZpcnN0IGFyZ3VtZW50IHRvIFByb2dyYW0nKTtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLnVuaWZvcm1zID0gdW5pZm9ybXM7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuXG4gICAgICAgIGlmICghdmVydGV4KSBjb25zb2xlLndhcm4oJ3ZlcnRleCBzaGFkZXIgbm90IHN1cHBsaWVkJyk7XG4gICAgICAgIGlmICghZnJhZ21lbnQpIGNvbnNvbGUud2FybignZnJhZ21lbnQgc2hhZGVyIG5vdCBzdXBwbGllZCcpO1xuXG4gICAgICAgIC8vIFN0b3JlIHByb2dyYW0gc3RhdGVcbiAgICAgICAgdGhpcy50cmFuc3BhcmVudCA9IHRyYW5zcGFyZW50O1xuICAgICAgICB0aGlzLmN1bGxGYWNlID0gY3VsbEZhY2U7XG4gICAgICAgIHRoaXMuZnJvbnRGYWNlID0gZnJvbnRGYWNlO1xuICAgICAgICB0aGlzLmRlcHRoVGVzdCA9IGRlcHRoVGVzdDtcbiAgICAgICAgdGhpcy5kZXB0aFdyaXRlID0gZGVwdGhXcml0ZTtcbiAgICAgICAgdGhpcy5kZXB0aEZ1bmMgPSBkZXB0aEZ1bmM7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jID0ge307XG4gICAgICAgIHRoaXMuYmxlbmRFcXVhdGlvbiA9IHt9O1xuICAgICAgICB0aGlzLnN0ZW5jaWxGdW5jID0ge307XG4gICAgICAgIHRoaXMuc3RlbmNpbE9wID0ge31cblxuICAgICAgICAvLyBzZXQgZGVmYXVsdCBibGVuZEZ1bmMgaWYgdHJhbnNwYXJlbnQgZmxhZ2dlZFxuICAgICAgICBpZiAodGhpcy50cmFuc3BhcmVudCAmJiAhdGhpcy5ibGVuZEZ1bmMuc3JjKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5nbC5yZW5kZXJlci5wcmVtdWx0aXBsaWVkQWxwaGEpIHRoaXMuc2V0QmxlbmRGdW5jKHRoaXMuZ2wuT05FLCB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuICAgICAgICAgICAgZWxzZSB0aGlzLnNldEJsZW5kRnVuYyh0aGlzLmdsLlNSQ19BTFBIQSwgdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBlbXB0eSBzaGFkZXJzIGFuZCBhdHRhY2ggdG8gcHJvZ3JhbVxuICAgICAgICB0aGlzLnZlcnRleFNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSKTtcbiAgICAgICAgdGhpcy5mcmFnbWVudFNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5GUkFHTUVOVF9TSEFERVIpO1xuICAgICAgICB0aGlzLnByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG4gICAgICAgIGdsLmF0dGFjaFNoYWRlcih0aGlzLnByb2dyYW0sIHRoaXMudmVydGV4U2hhZGVyKTtcbiAgICAgICAgZ2wuYXR0YWNoU2hhZGVyKHRoaXMucHJvZ3JhbSwgdGhpcy5mcmFnbWVudFNoYWRlcik7XG5cbiAgICAgICAgLy8gQ29tcGlsZSBzaGFkZXJzIHdpdGggc291cmNlXG4gICAgICAgIHRoaXMuc2V0U2hhZGVycyh7IHZlcnRleCwgZnJhZ21lbnQgfSk7XG4gICAgfVxuXG4gICAgc2V0U2hhZGVycyh7IHZlcnRleCwgZnJhZ21lbnQgfSkge1xuICAgICAgICBpZiAodmVydGV4KSB7XG4gICAgICAgICAgICAvLyBjb21waWxlIHZlcnRleCBzaGFkZXIgYW5kIGxvZyBlcnJvcnNcbiAgICAgICAgICAgIHRoaXMuZ2wuc2hhZGVyU291cmNlKHRoaXMudmVydGV4U2hhZGVyLCB2ZXJ0ZXgpO1xuICAgICAgICAgICAgdGhpcy5nbC5jb21waWxlU2hhZGVyKHRoaXMudmVydGV4U2hhZGVyKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmdsLmdldFNoYWRlckluZm9Mb2codGhpcy52ZXJ0ZXhTaGFkZXIpICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHt0aGlzLmdsLmdldFNoYWRlckluZm9Mb2codGhpcy52ZXJ0ZXhTaGFkZXIpfVxcblZlcnRleCBTaGFkZXJcXG4ke2FkZExpbmVOdW1iZXJzKHZlcnRleCl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJhZ21lbnQpIHtcbiAgICAgICAgICAgIC8vIGNvbXBpbGUgZnJhZ21lbnQgc2hhZGVyIGFuZCBsb2cgZXJyb3JzXG4gICAgICAgICAgICB0aGlzLmdsLnNoYWRlclNvdXJjZSh0aGlzLmZyYWdtZW50U2hhZGVyLCBmcmFnbWVudCk7XG4gICAgICAgICAgICB0aGlzLmdsLmNvbXBpbGVTaGFkZXIodGhpcy5mcmFnbWVudFNoYWRlcik7XG4gICAgICAgICAgICBpZiAodGhpcy5nbC5nZXRTaGFkZXJJbmZvTG9nKHRoaXMuZnJhZ21lbnRTaGFkZXIpICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHt0aGlzLmdsLmdldFNoYWRlckluZm9Mb2codGhpcy5mcmFnbWVudFNoYWRlcil9XFxuRnJhZ21lbnQgU2hhZGVyXFxuJHthZGRMaW5lTnVtYmVycyhmcmFnbWVudCl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb21waWxlIHByb2dyYW0gYW5kIGxvZyBlcnJvcnNcbiAgICAgICAgdGhpcy5nbC5saW5rUHJvZ3JhbSh0aGlzLnByb2dyYW0pO1xuICAgICAgICBpZiAoIXRoaXMuZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLnByb2dyYW0sIHRoaXMuZ2wuTElOS19TVEFUVVMpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKHRoaXMuZ2wuZ2V0UHJvZ3JhbUluZm9Mb2codGhpcy5wcm9ncmFtKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgYWN0aXZlIHVuaWZvcm0gbG9jYXRpb25zXG4gICAgICAgIHRoaXMudW5pZm9ybUxvY2F0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgbGV0IG51bVVuaWZvcm1zID0gdGhpcy5nbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHRoaXMucHJvZ3JhbSwgdGhpcy5nbC5BQ1RJVkVfVU5JRk9STVMpO1xuICAgICAgICBmb3IgKGxldCB1SW5kZXggPSAwOyB1SW5kZXggPCBudW1Vbmlmb3JtczsgdUluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCB1bmlmb3JtID0gdGhpcy5nbC5nZXRBY3RpdmVVbmlmb3JtKHRoaXMucHJvZ3JhbSwgdUluZGV4KTtcbiAgICAgICAgICAgIHRoaXMudW5pZm9ybUxvY2F0aW9ucy5zZXQodW5pZm9ybSwgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5wcm9ncmFtLCB1bmlmb3JtLm5hbWUpKTtcblxuICAgICAgICAgICAgLy8gc3BsaXQgdW5pZm9ybXMnIG5hbWVzIHRvIHNlcGFyYXRlIGFycmF5IGFuZCBzdHJ1Y3QgZGVjbGFyYXRpb25zXG4gICAgICAgICAgICBjb25zdCBzcGxpdCA9IHVuaWZvcm0ubmFtZS5tYXRjaCgvKFxcdyspL2cpO1xuXG4gICAgICAgICAgICB1bmlmb3JtLnVuaWZvcm1OYW1lID0gc3BsaXRbMF07XG4gICAgICAgICAgICB1bmlmb3JtLm5hbWVDb21wb25lbnRzID0gc3BsaXQuc2xpY2UoMSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgYWN0aXZlIGF0dHJpYnV0ZSBsb2NhdGlvbnNcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVMb2NhdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGNvbnN0IGxvY2F0aW9ucyA9IFtdO1xuICAgICAgICBjb25zdCBudW1BdHRyaWJzID0gdGhpcy5nbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHRoaXMucHJvZ3JhbSwgdGhpcy5nbC5BQ1RJVkVfQVRUUklCVVRFUyk7XG4gICAgICAgIGZvciAobGV0IGFJbmRleCA9IDA7IGFJbmRleCA8IG51bUF0dHJpYnM7IGFJbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSB0aGlzLmdsLmdldEFjdGl2ZUF0dHJpYih0aGlzLnByb2dyYW0sIGFJbmRleCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5wcm9ncmFtLCBhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICAvLyBJZ25vcmUgc3BlY2lhbCBidWlsdC1pbiBpbnB1dHMuIGVnIGdsX1ZlcnRleElELCBnbF9JbnN0YW5jZUlEXG4gICAgICAgICAgICBpZiAobG9jYXRpb24gPT09IC0xKSBjb250aW51ZTtcbiAgICAgICAgICAgIGxvY2F0aW9uc1tsb2NhdGlvbl0gPSBhdHRyaWJ1dGUubmFtZTtcbiAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlTG9jYXRpb25zLnNldChhdHRyaWJ1dGUsIGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0dHJpYnV0ZU9yZGVyID0gbG9jYXRpb25zLmpvaW4oJycpO1xuICAgIH1cblxuICAgIHNldEJsZW5kRnVuYyhzcmMsIGRzdCwgc3JjQWxwaGEsIGRzdEFscGhhKSB7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jLnNyYyA9IHNyYztcbiAgICAgICAgdGhpcy5ibGVuZEZ1bmMuZHN0ID0gZHN0O1xuICAgICAgICB0aGlzLmJsZW5kRnVuYy5zcmNBbHBoYSA9IHNyY0FscGhhO1xuICAgICAgICB0aGlzLmJsZW5kRnVuYy5kc3RBbHBoYSA9IGRzdEFscGhhO1xuICAgICAgICBpZiAoc3JjKSB0aGlzLnRyYW5zcGFyZW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBzZXRCbGVuZEVxdWF0aW9uKG1vZGVSR0IsIG1vZGVBbHBoYSkge1xuICAgICAgICB0aGlzLmJsZW5kRXF1YXRpb24ubW9kZVJHQiA9IG1vZGVSR0I7XG4gICAgICAgIHRoaXMuYmxlbmRFcXVhdGlvbi5tb2RlQWxwaGEgPSBtb2RlQWxwaGE7XG4gICAgfVxuXG4gICAgc2V0U3RlbmNpbEZ1bmMoZnVuYywgcmVmLCBtYXNrKSB7XG4gICAgICAgIHRoaXMuc3RlbmNpbFJlZiA9IHJlZjtcbiAgICAgICAgdGhpcy5zdGVuY2lsRnVuYy5mdW5jID0gZnVuYztcbiAgICAgICAgdGhpcy5zdGVuY2lsRnVuYy5yZWYgPSByZWY7XG4gICAgICAgIHRoaXMuc3RlbmNpbEZ1bmMubWFzayA9IG1hc2s7XG4gICAgfVxuXG4gICAgc2V0U3RlbmNpbE9wKHN0ZW5jaWxGYWlsLCBkZXB0aEZhaWwsIGRlcHRoUGFzcykge1xuICAgICAgICB0aGlzLnN0ZW5jaWxPcC5zdGVuY2lsRmFpbCA9IHN0ZW5jaWxGYWlsO1xuICAgICAgICB0aGlzLnN0ZW5jaWxPcC5kZXB0aEZhaWwgPSBkZXB0aEZhaWw7XG4gICAgICAgIHRoaXMuc3RlbmNpbE9wLmRlcHRoUGFzcyA9IGRlcHRoUGFzcztcbiAgICB9XG5cbiAgICBhcHBseVN0YXRlKCkge1xuICAgICAgICBpZiAodGhpcy5kZXB0aFRlc3QpIHRoaXMuZ2wucmVuZGVyZXIuZW5hYmxlKHRoaXMuZ2wuREVQVEhfVEVTVCk7XG4gICAgICAgIGVsc2UgdGhpcy5nbC5yZW5kZXJlci5kaXNhYmxlKHRoaXMuZ2wuREVQVEhfVEVTVCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VsbEZhY2UpIHRoaXMuZ2wucmVuZGVyZXIuZW5hYmxlKHRoaXMuZ2wuQ1VMTF9GQUNFKTtcbiAgICAgICAgZWxzZSB0aGlzLmdsLnJlbmRlcmVyLmRpc2FibGUodGhpcy5nbC5DVUxMX0ZBQ0UpO1xuXG4gICAgICAgIGlmICh0aGlzLmJsZW5kRnVuYy5zcmMpIHRoaXMuZ2wucmVuZGVyZXIuZW5hYmxlKHRoaXMuZ2wuQkxFTkQpO1xuICAgICAgICBlbHNlIHRoaXMuZ2wucmVuZGVyZXIuZGlzYWJsZSh0aGlzLmdsLkJMRU5EKTtcblxuICAgICAgICBpZiAodGhpcy5jdWxsRmFjZSkgdGhpcy5nbC5yZW5kZXJlci5zZXRDdWxsRmFjZSh0aGlzLmN1bGxGYWNlKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXRGcm9udEZhY2UodGhpcy5mcm9udEZhY2UpO1xuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnNldERlcHRoTWFzayh0aGlzLmRlcHRoV3JpdGUpO1xuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnNldERlcHRoRnVuYyh0aGlzLmRlcHRoRnVuYyk7XG4gICAgICAgIGlmICh0aGlzLmJsZW5kRnVuYy5zcmMpIHRoaXMuZ2wucmVuZGVyZXIuc2V0QmxlbmRGdW5jKHRoaXMuYmxlbmRGdW5jLnNyYywgdGhpcy5ibGVuZEZ1bmMuZHN0LCB0aGlzLmJsZW5kRnVuYy5zcmNBbHBoYSwgdGhpcy5ibGVuZEZ1bmMuZHN0QWxwaGEpO1xuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnNldEJsZW5kRXF1YXRpb24odGhpcy5ibGVuZEVxdWF0aW9uLm1vZGVSR0IsIHRoaXMuYmxlbmRFcXVhdGlvbi5tb2RlQWxwaGEpO1xuXG4gICAgICAgIGlmKHRoaXMuc3RlbmNpbEZ1bmMuZnVuYyB8fCB0aGlzLnN0ZW5jaWxPcC5zdGVuY2lsRmFpbCkgdGhpcy5nbC5yZW5kZXJlci5lbmFibGUodGhpcy5nbC5TVEVOQ0lMX1RFU1QpXG4gICAgICAgICAgICBlbHNlIHRoaXMuZ2wucmVuZGVyZXIuZGlzYWJsZSh0aGlzLmdsLlNURU5DSUxfVEVTVClcblxuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnNldFN0ZW5jaWxGdW5jKHRoaXMuc3RlbmNpbEZ1bmMuZnVuYywgdGhpcy5zdGVuY2lsRnVuYy5yZWYsIHRoaXMuc3RlbmNpbEZ1bmMubWFzaylcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5zZXRTdGVuY2lsT3AodGhpcy5zdGVuY2lsT3Auc3RlbmNpbEZhaWwsIHRoaXMuc3RlbmNpbE9wLmRlcHRoRmFpbCwgdGhpcy5zdGVuY2lsT3AuZGVwdGhQYXNzKVxuXG4gICAgfVxuXG4gICAgdXNlKHsgZmxpcEZhY2VzID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgICAgIGxldCB0ZXh0dXJlVW5pdCA9IC0xO1xuICAgICAgICBjb25zdCBwcm9ncmFtQWN0aXZlID0gdGhpcy5nbC5yZW5kZXJlci5zdGF0ZS5jdXJyZW50UHJvZ3JhbSA9PT0gdGhpcy5pZDtcblxuICAgICAgICAvLyBBdm9pZCBnbCBjYWxsIGlmIHByb2dyYW0gYWxyZWFkeSBpbiB1c2VcbiAgICAgICAgaWYgKCFwcm9ncmFtQWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuc3RhdGUuY3VycmVudFByb2dyYW0gPSB0aGlzLmlkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IG9ubHkgdGhlIGFjdGl2ZSB1bmlmb3JtcyBmb3VuZCBpbiB0aGUgc2hhZGVyXG4gICAgICAgIHRoaXMudW5pZm9ybUxvY2F0aW9ucy5mb3JFYWNoKChsb2NhdGlvbiwgYWN0aXZlVW5pZm9ybSkgPT4ge1xuICAgICAgICAgICAgbGV0IHVuaWZvcm0gPSB0aGlzLnVuaWZvcm1zW2FjdGl2ZVVuaWZvcm0udW5pZm9ybU5hbWVdO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiBhY3RpdmVVbmlmb3JtLm5hbWVDb21wb25lbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF1bmlmb3JtKSBicmVhaztcblxuICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnQgaW4gdW5pZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3JtID0gdW5pZm9ybVtjb21wb25lbnRdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh1bmlmb3JtLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3JtID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdW5pZm9ybSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXJuKGBBY3RpdmUgdW5pZm9ybSAke2FjdGl2ZVVuaWZvcm0ubmFtZX0gaGFzIG5vdCBiZWVuIHN1cHBsaWVkYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh1bmlmb3JtICYmIHVuaWZvcm0udmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXJuKGAke2FjdGl2ZVVuaWZvcm0ubmFtZX0gdW5pZm9ybSBpcyBtaXNzaW5nIGEgdmFsdWUgcGFyYW1ldGVyYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh1bmlmb3JtLnZhbHVlLnRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlVW5pdCA9IHRleHR1cmVVbml0ICsgMTtcblxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRleHR1cmUgbmVlZHMgdG8gYmUgdXBkYXRlZFxuICAgICAgICAgICAgICAgIHVuaWZvcm0udmFsdWUudXBkYXRlKHRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0VW5pZm9ybSh0aGlzLmdsLCBhY3RpdmVVbmlmb3JtLnR5cGUsIGxvY2F0aW9uLCB0ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZvciB0ZXh0dXJlIGFycmF5cywgc2V0IHVuaWZvcm0gYXMgYW4gYXJyYXkgb2YgdGV4dHVyZSB1bml0cyBpbnN0ZWFkIG9mIGp1c3Qgb25lXG4gICAgICAgICAgICBpZiAodW5pZm9ybS52YWx1ZS5sZW5ndGggJiYgdW5pZm9ybS52YWx1ZVswXS50ZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dHVyZVVuaXRzID0gW107XG4gICAgICAgICAgICAgICAgdW5pZm9ybS52YWx1ZS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlVW5pdCA9IHRleHR1cmVVbml0ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUudXBkYXRlKHRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZVVuaXRzLnB1c2godGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldFVuaWZvcm0odGhpcy5nbCwgYWN0aXZlVW5pZm9ybS50eXBlLCBsb2NhdGlvbiwgdGV4dHVyZVVuaXRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0VW5pZm9ybSh0aGlzLmdsLCBhY3RpdmVVbmlmb3JtLnR5cGUsIGxvY2F0aW9uLCB1bmlmb3JtLnZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hcHBseVN0YXRlKCk7XG4gICAgICAgIGlmIChmbGlwRmFjZXMpIHRoaXMuZ2wucmVuZGVyZXIuc2V0RnJvbnRGYWNlKHRoaXMuZnJvbnRGYWNlID09PSB0aGlzLmdsLkNDVyA/IHRoaXMuZ2wuQ1cgOiB0aGlzLmdsLkNDVyk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKCkge1xuICAgICAgICB0aGlzLmdsLmRlbGV0ZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFVuaWZvcm0oZ2wsIHR5cGUsIGxvY2F0aW9uLCB2YWx1ZSkge1xuICAgIHZhbHVlID0gdmFsdWUubGVuZ3RoID8gZmxhdHRlbih2YWx1ZSkgOiB2YWx1ZTtcbiAgICBjb25zdCBzZXRWYWx1ZSA9IGdsLnJlbmRlcmVyLnN0YXRlLnVuaWZvcm1Mb2NhdGlvbnMuZ2V0KGxvY2F0aW9uKTtcblxuICAgIC8vIEF2b2lkIHJlZHVuZGFudCB1bmlmb3JtIGNvbW1hbmRzXG4gICAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICBpZiAoc2V0VmFsdWUgPT09IHVuZGVmaW5lZCB8fCBzZXRWYWx1ZS5sZW5ndGggIT09IHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gY2xvbmUgYXJyYXkgdG8gc3RvcmUgYXMgY2FjaGVcbiAgICAgICAgICAgIGdsLnJlbmRlcmVyLnN0YXRlLnVuaWZvcm1Mb2NhdGlvbnMuc2V0KGxvY2F0aW9uLCB2YWx1ZS5zbGljZSgwKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYXJyYXlzRXF1YWwoc2V0VmFsdWUsIHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgY2FjaGVkIGFycmF5IHZhbHVlc1xuICAgICAgICAgICAgc2V0VmFsdWUuc2V0ID8gc2V0VmFsdWUuc2V0KHZhbHVlKSA6IHNldEFycmF5KHNldFZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICBnbC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLnNldChsb2NhdGlvbiwgc2V0VmFsdWUpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNldFZhbHVlID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICBnbC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLnNldChsb2NhdGlvbiwgdmFsdWUpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIDUxMjY6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoID8gZ2wudW5pZm9ybTFmdihsb2NhdGlvbiwgdmFsdWUpIDogZ2wudW5pZm9ybTFmKGxvY2F0aW9uLCB2YWx1ZSk7IC8vIEZMT0FUXG4gICAgICAgIGNhc2UgMzU2NjQ6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTJmdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVF9WRUMyXG4gICAgICAgIGNhc2UgMzU2NjU6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTNmdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVF9WRUMzXG4gICAgICAgIGNhc2UgMzU2NjY6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTRmdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVF9WRUM0XG4gICAgICAgIGNhc2UgMzU2NzA6IC8vIEJPT0xcbiAgICAgICAgY2FzZSA1MTI0OiAvLyBJTlRcbiAgICAgICAgY2FzZSAzNTY3ODogLy8gU0FNUExFUl8yRFxuICAgICAgICBjYXNlIDM2MzA2OiAvLyBVX1NBTVBMRVJfMkRcbiAgICAgICAgY2FzZSAzNTY4MDogLy8gU0FNUExFUl9DVUJFXG4gICAgICAgIGNhc2UgMzYyODk6IC8vIFNBTVBMRVJfMkRfQVJSQVlcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPyBnbC51bmlmb3JtMWl2KGxvY2F0aW9uLCB2YWx1ZSkgOiBnbC51bmlmb3JtMWkobG9jYXRpb24sIHZhbHVlKTsgLy8gU0FNUExFUl9DVUJFXG4gICAgICAgIGNhc2UgMzU2NzE6IC8vIEJPT0xfVkVDMlxuICAgICAgICBjYXNlIDM1NjY3OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm0yaXYobG9jYXRpb24sIHZhbHVlKTsgLy8gSU5UX1ZFQzJcbiAgICAgICAgY2FzZSAzNTY3MjogLy8gQk9PTF9WRUMzXG4gICAgICAgIGNhc2UgMzU2Njg6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTNpdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBJTlRfVkVDM1xuICAgICAgICBjYXNlIDM1NjczOiAvLyBCT09MX1ZFQzRcbiAgICAgICAgY2FzZSAzNTY2OTpcbiAgICAgICAgICAgIHJldHVybiBnbC51bmlmb3JtNGl2KGxvY2F0aW9uLCB2YWx1ZSk7IC8vIElOVF9WRUM0XG4gICAgICAgIGNhc2UgMzU2NzQ6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybU1hdHJpeDJmdihsb2NhdGlvbiwgZmFsc2UsIHZhbHVlKTsgLy8gRkxPQVRfTUFUMlxuICAgICAgICBjYXNlIDM1Njc1OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm1NYXRyaXgzZnYobG9jYXRpb24sIGZhbHNlLCB2YWx1ZSk7IC8vIEZMT0FUX01BVDNcbiAgICAgICAgY2FzZSAzNTY3NjpcbiAgICAgICAgICAgIHJldHVybiBnbC51bmlmb3JtTWF0cml4NGZ2KGxvY2F0aW9uLCBmYWxzZSwgdmFsdWUpOyAvLyBGTE9BVF9NQVQ0XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhZGRMaW5lTnVtYmVycyhzdHJpbmcpIHtcbiAgICBsZXQgbGluZXMgPSBzdHJpbmcuc3BsaXQoJ1xcbicpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGluZXNbaV0gPSBpICsgMSArICc6ICcgKyBsaW5lc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGxpbmVzLmpvaW4oJ1xcbicpO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuKGEpIHtcbiAgICBjb25zdCBhcnJheUxlbiA9IGEubGVuZ3RoO1xuICAgIGNvbnN0IHZhbHVlTGVuID0gYVswXS5sZW5ndGg7XG4gICAgaWYgKHZhbHVlTGVuID09PSB1bmRlZmluZWQpIHJldHVybiBhO1xuICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5TGVuICogdmFsdWVMZW47XG4gICAgbGV0IHZhbHVlID0gYXJyYXlDYWNoZUYzMltsZW5ndGhdO1xuICAgIGlmICghdmFsdWUpIGFycmF5Q2FjaGVGMzJbbGVuZ3RoXSA9IHZhbHVlID0gbmV3IEZsb2F0MzJBcnJheShsZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXlMZW47IGkrKykgdmFsdWUuc2V0KGFbaV0sIGkgKiB2YWx1ZUxlbik7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhcnJheXNFcXVhbChhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gYS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHNldEFycmF5KGEsIGIpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGFbaV0gPSBiW2ldO1xuICAgIH1cbn1cblxubGV0IHdhcm5Db3VudCA9IDA7XG5mdW5jdGlvbiB3YXJuKG1lc3NhZ2UpIHtcbiAgICBpZiAod2FybkNvdW50ID4gMTAwKSByZXR1cm47XG4gICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgIHdhcm5Db3VudCsrO1xuICAgIGlmICh3YXJuQ291bnQgPiAxMDApIGNvbnNvbGUud2FybignTW9yZSB0aGFuIDEwMCBwcm9ncmFtIHdhcm5pbmdzIC0gc3RvcHBpbmcgbG9ncy4nKTtcbn1cbiJdLCJuYW1lcyI6WyJJRCIsImFycmF5Q2FjaGVGMzIiLCJQcm9ncmFtIiwic2V0U2hhZGVycyIsInZlcnRleCIsImZyYWdtZW50IiwiZ2wiLCJzaGFkZXJTb3VyY2UiLCJ2ZXJ0ZXhTaGFkZXIiLCJjb21waWxlU2hhZGVyIiwiZ2V0U2hhZGVySW5mb0xvZyIsImNvbnNvbGUiLCJ3YXJuIiwiYWRkTGluZU51bWJlcnMiLCJmcmFnbWVudFNoYWRlciIsImxpbmtQcm9ncmFtIiwicHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImdldFByb2dyYW1JbmZvTG9nIiwidW5pZm9ybUxvY2F0aW9ucyIsIk1hcCIsIm51bVVuaWZvcm1zIiwiQUNUSVZFX1VOSUZPUk1TIiwidUluZGV4IiwidW5pZm9ybSIsImdldEFjdGl2ZVVuaWZvcm0iLCJzZXQiLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJuYW1lIiwic3BsaXQiLCJtYXRjaCIsInVuaWZvcm1OYW1lIiwibmFtZUNvbXBvbmVudHMiLCJzbGljZSIsImF0dHJpYnV0ZUxvY2F0aW9ucyIsImxvY2F0aW9ucyIsIm51bUF0dHJpYnMiLCJBQ1RJVkVfQVRUUklCVVRFUyIsImFJbmRleCIsImF0dHJpYnV0ZSIsImdldEFjdGl2ZUF0dHJpYiIsImxvY2F0aW9uIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJhdHRyaWJ1dGVPcmRlciIsImpvaW4iLCJzZXRCbGVuZEZ1bmMiLCJzcmMiLCJkc3QiLCJzcmNBbHBoYSIsImRzdEFscGhhIiwiYmxlbmRGdW5jIiwidHJhbnNwYXJlbnQiLCJzZXRCbGVuZEVxdWF0aW9uIiwibW9kZVJHQiIsIm1vZGVBbHBoYSIsImJsZW5kRXF1YXRpb24iLCJzZXRTdGVuY2lsRnVuYyIsImZ1bmMiLCJyZWYiLCJtYXNrIiwic3RlbmNpbFJlZiIsInN0ZW5jaWxGdW5jIiwic2V0U3RlbmNpbE9wIiwic3RlbmNpbEZhaWwiLCJkZXB0aEZhaWwiLCJkZXB0aFBhc3MiLCJzdGVuY2lsT3AiLCJhcHBseVN0YXRlIiwiZGVwdGhUZXN0IiwicmVuZGVyZXIiLCJlbmFibGUiLCJERVBUSF9URVNUIiwiZGlzYWJsZSIsImN1bGxGYWNlIiwiQ1VMTF9GQUNFIiwiQkxFTkQiLCJzZXRDdWxsRmFjZSIsInNldEZyb250RmFjZSIsImZyb250RmFjZSIsInNldERlcHRoTWFzayIsImRlcHRoV3JpdGUiLCJzZXREZXB0aEZ1bmMiLCJkZXB0aEZ1bmMiLCJTVEVOQ0lMX1RFU1QiLCJ1c2UiLCJmbGlwRmFjZXMiLCJ0ZXh0dXJlVW5pdCIsInByb2dyYW1BY3RpdmUiLCJzdGF0ZSIsImN1cnJlbnRQcm9ncmFtIiwiaWQiLCJ1c2VQcm9ncmFtIiwiZm9yRWFjaCIsImFjdGl2ZVVuaWZvcm0iLCJ1bmlmb3JtcyIsImNvbXBvbmVudCIsIkFycmF5IiwiaXNBcnJheSIsInZhbHVlIiwidW5kZWZpbmVkIiwidGV4dHVyZSIsInVwZGF0ZSIsInNldFVuaWZvcm0iLCJ0eXBlIiwibGVuZ3RoIiwidGV4dHVyZVVuaXRzIiwicHVzaCIsIkNDVyIsIkNXIiwicmVtb3ZlIiwiZGVsZXRlUHJvZ3JhbSIsImNvbnN0cnVjdG9yIiwiQkFDSyIsIkxFUVVBTCIsImNhbnZhcyIsImVycm9yIiwicHJlbXVsdGlwbGllZEFscGhhIiwiT05FIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsIlNSQ19BTFBIQSIsImNyZWF0ZVNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJGUkFHTUVOVF9TSEFERVIiLCJjcmVhdGVQcm9ncmFtIiwiYXR0YWNoU2hhZGVyIiwiZmxhdHRlbiIsInNldFZhbHVlIiwiZ2V0IiwiYXJyYXlzRXF1YWwiLCJzZXRBcnJheSIsInVuaWZvcm0xZnYiLCJ1bmlmb3JtMWYiLCJ1bmlmb3JtMmZ2IiwidW5pZm9ybTNmdiIsInVuaWZvcm00ZnYiLCJ1bmlmb3JtMWl2IiwidW5pZm9ybTFpIiwidW5pZm9ybTJpdiIsInVuaWZvcm0zaXYiLCJ1bmlmb3JtNGl2IiwidW5pZm9ybU1hdHJpeDJmdiIsInVuaWZvcm1NYXRyaXgzZnYiLCJ1bmlmb3JtTWF0cml4NGZ2Iiwic3RyaW5nIiwibGluZXMiLCJpIiwiYSIsImFycmF5TGVuIiwidmFsdWVMZW4iLCJGbG9hdDMyQXJyYXkiLCJiIiwibCIsIndhcm5Db3VudCIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/core/Program.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/core/Renderer.js":
/*!***********************************************!*\
  !*** ./node_modules/ogl/src/core/Renderer.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Renderer: function() { return /* binding */ Renderer; }\n/* harmony export */ });\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Vec3.js */ \"(app-pages-browser)/./node_modules/ogl/src/math/Vec3.js\");\n\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\n// Not automatic - devs to use these methods manually\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n// gl.clearColor( r, g, b, a );\n// gl.stencilMask( stencilMask );\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n// gl.clearStencil( stencil );\nconst tempVec3 = /* @__PURE__ */ new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_0__.Vec3();\nlet ID = 1;\nclass Renderer {\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.gl.canvas.width = width * this.dpr;\n        this.gl.canvas.height = height * this.dpr;\n        if (!this.gl.canvas.style) return;\n        Object.assign(this.gl.canvas.style, {\n            width: width + \"px\",\n            height: height + \"px\"\n        });\n    }\n    setViewport(width, height) {\n        let x = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, y = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\n        this.state.viewport.width = width;\n        this.state.viewport.height = height;\n        this.state.viewport.x = x;\n        this.state.viewport.y = y;\n        this.gl.viewport(x, y, width, height);\n    }\n    setScissor(width, height) {\n        let x = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, y = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;\n        this.gl.scissor(x, y, width, height);\n    }\n    enable(id) {\n        if (this.state[id] === true) return;\n        this.gl.enable(id);\n        this.state[id] = true;\n    }\n    disable(id) {\n        if (this.state[id] === false) return;\n        this.gl.disable(id);\n        this.state[id] = false;\n    }\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        if (this.state.blendFunc.src === src && this.state.blendFunc.dst === dst && this.state.blendFunc.srcAlpha === srcAlpha && this.state.blendFunc.dstAlpha === dstAlpha) return;\n        this.state.blendFunc.src = src;\n        this.state.blendFunc.dst = dst;\n        this.state.blendFunc.srcAlpha = srcAlpha;\n        this.state.blendFunc.dstAlpha = dstAlpha;\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n        else this.gl.blendFunc(src, dst);\n    }\n    setBlendEquation(modeRGB, modeAlpha) {\n        modeRGB = modeRGB || this.gl.FUNC_ADD;\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\n        this.state.blendEquation.modeRGB = modeRGB;\n        this.state.blendEquation.modeAlpha = modeAlpha;\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n        else this.gl.blendEquation(modeRGB);\n    }\n    setCullFace(value) {\n        if (this.state.cullFace === value) return;\n        this.state.cullFace = value;\n        this.gl.cullFace(value);\n    }\n    setFrontFace(value) {\n        if (this.state.frontFace === value) return;\n        this.state.frontFace = value;\n        this.gl.frontFace(value);\n    }\n    setDepthMask(value) {\n        if (this.state.depthMask === value) return;\n        this.state.depthMask = value;\n        this.gl.depthMask(value);\n    }\n    setDepthFunc(value) {\n        if (this.state.depthFunc === value) return;\n        this.state.depthFunc = value;\n        this.gl.depthFunc(value);\n    }\n    setStencilMask(value) {\n        if (this.state.stencilMask === value) return;\n        this.state.stencilMask = value;\n        this.gl.stencilMask(value);\n    }\n    setStencilFunc(func, ref, mask) {\n        if (this.state.stencilFunc === func && this.state.stencilRef === ref && this.state.stencilFuncMask === mask) return;\n        this.state.stencilFunc = func || this.gl.ALWAYS;\n        this.state.stencilRef = ref || 0;\n        this.state.stencilFuncMask = mask || 0;\n        this.gl.stencilFunc(func || this.gl.ALWAYS, ref || 0, mask || 0);\n    }\n    setStencilOp(stencilFail, depthFail, depthPass) {\n        if (this.state.stencilFail === stencilFail && this.state.stencilDepthFail === depthFail && this.state.stencilDepthPass === depthPass) return;\n        this.state.stencilFail = stencilFail;\n        this.state.stencilDepthFail = depthFail;\n        this.state.stencilDepthPass = depthPass;\n        this.gl.stencilOp(stencilFail, depthFail, depthPass);\n    }\n    activeTexture(value) {\n        if (this.state.activeTextureUnit === value) return;\n        this.state.activeTextureUnit = value;\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\n    }\n    bindFramebuffer() {\n        let { target = this.gl.FRAMEBUFFER, buffer = null } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        if (this.state.framebuffer === buffer) return;\n        this.state.framebuffer = buffer;\n        this.gl.bindFramebuffer(target, buffer);\n    }\n    getExtension(extension, webgl2Func, extFunc) {\n        // if webgl2 function supported, return func bound to gl context\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\n        // fetch extension once only\n        if (!this.extensions[extension]) {\n            this.extensions[extension] = this.gl.getExtension(extension);\n        }\n        // return extension if no function requested\n        if (!webgl2Func) return this.extensions[extension];\n        // Return null if extension not supported\n        if (!this.extensions[extension]) return null;\n        // return extension function, bound to extension\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\n    }\n    sortOpaque(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else if (a.zDepth !== b.zDepth) {\n            return a.zDepth - b.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n    sortTransparent(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        }\n        if (a.zDepth !== b.zDepth) {\n            return b.zDepth - a.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n    sortUI(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else {\n            return b.id - a.id;\n        }\n    }\n    getRenderList(param) {\n        let { scene, camera, frustumCull, sort } = param;\n        let renderList = [];\n        if (camera && frustumCull) camera.updateFrustum();\n        // Get visible\n        scene.traverse((node)=>{\n            if (!node.visible) return true;\n            if (!node.draw) return;\n            if (frustumCull && node.frustumCulled && camera) {\n                if (!camera.frustumIntersectsMesh(node)) return;\n            }\n            renderList.push(node);\n        });\n        if (sort) {\n            const opaque = [];\n            const transparent = []; // depthTest true\n            const ui = []; // depthTest false\n            renderList.forEach((node)=>{\n                // Split into the 3 render groups\n                if (!node.program.transparent) {\n                    opaque.push(node);\n                } else if (node.program.depthTest) {\n                    transparent.push(node);\n                } else {\n                    ui.push(node);\n                }\n                node.zDepth = 0;\n                // Only calculate z-depth if renderOrder unset and depthTest is true\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\n                // update z-depth\n                node.worldMatrix.getTranslation(tempVec3);\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\n                node.zDepth = tempVec3.z;\n            });\n            opaque.sort(this.sortOpaque);\n            transparent.sort(this.sortTransparent);\n            ui.sort(this.sortUI);\n            renderList = opaque.concat(transparent, ui);\n        }\n        return renderList;\n    }\n    render(param) {\n        let { scene, camera, target = null, update = true, sort = true, frustumCull = true, clear } = param;\n        if (target === null) {\n            // make sure no render target bound so draws to canvas\n            this.bindFramebuffer();\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\n        } else {\n            // bind supplied render target and update viewport\n            this.bindFramebuffer(target);\n            this.setViewport(target.width, target.height);\n        }\n        if (clear || this.autoClear && clear !== false) {\n            // Ensure depth buffer writing is enabled so it can be cleared\n            if (this.depth && (!target || target.depth)) {\n                this.enable(this.gl.DEPTH_TEST);\n                this.setDepthMask(true);\n            }\n            // Same for stencil\n            if (this.stencil || !target || target.stencil) {\n                this.enable(this.gl.STENCIL_TEST);\n                this.setStencilMask(0xff);\n            }\n            this.gl.clear((this.color ? this.gl.COLOR_BUFFER_BIT : 0) | (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) | (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0));\n        }\n        // updates all scene graph matrices\n        if (update) scene.updateMatrixWorld();\n        // Update camera separately, in case not in scene graph\n        if (camera) camera.updateMatrixWorld();\n        // Get render list - entails culling and sorting\n        const renderList = this.getRenderList({\n            scene,\n            camera,\n            frustumCull,\n            sort\n        });\n        renderList.forEach((node)=>{\n            node.draw({\n                camera\n            });\n        });\n    }\n    constructor({ canvas = document.createElement(\"canvas\"), width = 300, height = 150, dpr = 1, alpha = false, depth = true, stencil = false, antialias = false, premultipliedAlpha = false, preserveDrawingBuffer = false, powerPreference = \"default\", autoClear = true, webgl = 2 } = {}){\n        const attributes = {\n            alpha,\n            depth,\n            stencil,\n            antialias,\n            premultipliedAlpha,\n            preserveDrawingBuffer,\n            powerPreference\n        };\n        this.dpr = dpr;\n        this.alpha = alpha;\n        this.color = true;\n        this.depth = depth;\n        this.stencil = stencil;\n        this.premultipliedAlpha = premultipliedAlpha;\n        this.autoClear = autoClear;\n        this.id = ID++;\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\n        if (webgl === 2) this.gl = canvas.getContext(\"webgl2\", attributes);\n        this.isWebgl2 = !!this.gl;\n        if (!this.gl) this.gl = canvas.getContext(\"webgl\", attributes);\n        if (!this.gl) console.error(\"unable to create webgl context\");\n        // Attach renderer to gl so that all classes have access to internal state functions\n        this.gl.renderer = this;\n        // initialise size values\n        this.setSize(width, height);\n        // gl state stores to avoid redundant calls on methods used internally\n        this.state = {};\n        this.state.blendFunc = {\n            src: this.gl.ONE,\n            dst: this.gl.ZERO\n        };\n        this.state.blendEquation = {\n            modeRGB: this.gl.FUNC_ADD\n        };\n        this.state.cullFace = false;\n        this.state.frontFace = this.gl.CCW;\n        this.state.depthMask = true;\n        this.state.depthFunc = this.gl.LEQUAL;\n        this.state.premultiplyAlpha = false;\n        this.state.flipY = false;\n        this.state.unpackAlignment = 4;\n        this.state.framebuffer = null;\n        this.state.viewport = {\n            x: 0,\n            y: 0,\n            width: null,\n            height: null\n        };\n        this.state.textureUnits = [];\n        this.state.activeTextureUnit = 0;\n        this.state.boundBuffer = null;\n        this.state.uniformLocations = new Map();\n        this.state.currentProgram = null;\n        // store requested extensions\n        this.extensions = {};\n        // Initialise extra format types\n        if (this.isWebgl2) {\n            this.getExtension(\"EXT_color_buffer_float\");\n            this.getExtension(\"OES_texture_float_linear\");\n        } else {\n            this.getExtension(\"OES_texture_float\");\n            this.getExtension(\"OES_texture_float_linear\");\n            this.getExtension(\"OES_texture_half_float\");\n            this.getExtension(\"OES_texture_half_float_linear\");\n            this.getExtension(\"OES_element_index_uint\");\n            this.getExtension(\"OES_standard_derivatives\");\n            this.getExtension(\"EXT_sRGB\");\n            this.getExtension(\"WEBGL_depth_texture\");\n            this.getExtension(\"WEBGL_draw_buffers\");\n        }\n        this.getExtension(\"WEBGL_compressed_texture_astc\");\n        this.getExtension(\"EXT_texture_compression_bptc\");\n        this.getExtension(\"WEBGL_compressed_texture_s3tc\");\n        this.getExtension(\"WEBGL_compressed_texture_etc1\");\n        this.getExtension(\"WEBGL_compressed_texture_pvrtc\");\n        this.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\");\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\n        this.vertexAttribDivisor = this.getExtension(\"ANGLE_instanced_arrays\", \"vertexAttribDivisor\", \"vertexAttribDivisorANGLE\");\n        this.drawArraysInstanced = this.getExtension(\"ANGLE_instanced_arrays\", \"drawArraysInstanced\", \"drawArraysInstancedANGLE\");\n        this.drawElementsInstanced = this.getExtension(\"ANGLE_instanced_arrays\", \"drawElementsInstanced\", \"drawElementsInstancedANGLE\");\n        this.createVertexArray = this.getExtension(\"OES_vertex_array_object\", \"createVertexArray\", \"createVertexArrayOES\");\n        this.bindVertexArray = this.getExtension(\"OES_vertex_array_object\", \"bindVertexArray\", \"bindVertexArrayOES\");\n        this.deleteVertexArray = this.getExtension(\"OES_vertex_array_object\", \"deleteVertexArray\", \"deleteVertexArrayOES\");\n        this.drawBuffers = this.getExtension(\"WEBGL_draw_buffers\", \"drawBuffers\", \"drawBuffersWEBGL\");\n        // Store device parameters\n        this.parameters = {};\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.parameters.maxAnisotropy = this.getExtension(\"EXT_texture_filter_anisotropic\") ? this.gl.getParameter(this.getExtension(\"EXT_texture_filter_anisotropic\").MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/core/Renderer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/core/Transform.js":
/*!************************************************!*\
  !*** ./node_modules/ogl/src/core/Transform.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transform: function() { return /* binding */ Transform; }\n/* harmony export */ });\n/* harmony import */ var _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Vec3.js */ \"(app-pages-browser)/./node_modules/ogl/src/math/Vec3.js\");\n/* harmony import */ var _math_Quat_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/Quat.js */ \"(app-pages-browser)/./node_modules/ogl/src/math/Quat.js\");\n/* harmony import */ var _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Mat4.js */ \"(app-pages-browser)/./node_modules/ogl/src/math/Mat4.js\");\n/* harmony import */ var _math_Euler_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/Euler.js */ \"(app-pages-browser)/./node_modules/ogl/src/math/Euler.js\");\n\n\n\n\nclass Transform {\n    setParent(parent) {\n        let notifyParent = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        if (this.parent && parent !== this.parent) this.parent.removeChild(this, false);\n        this.parent = parent;\n        if (notifyParent && parent) parent.addChild(this, false);\n    }\n    addChild(child) {\n        let notifyChild = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        if (!~this.children.indexOf(child)) this.children.push(child);\n        if (notifyChild) child.setParent(this, false);\n    }\n    removeChild(child) {\n        let notifyChild = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\n        if (notifyChild) child.setParent(null, false);\n    }\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.worldMatrixNeedsUpdate || force) {\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\n            this.worldMatrixNeedsUpdate = false;\n            force = true;\n        }\n        for(let i = 0, l = this.children.length; i < l; i++){\n            this.children[i].updateMatrixWorld(force);\n        }\n    }\n    updateMatrix() {\n        this.matrix.compose(this.quaternion, this.position, this.scale);\n        this.worldMatrixNeedsUpdate = true;\n    }\n    traverse(callback) {\n        // Return true in callback to stop traversing children\n        if (callback(this)) return;\n        for(let i = 0, l = this.children.length; i < l; i++){\n            this.children[i].traverse(callback);\n        }\n    }\n    decompose() {\n        this.matrix.decompose(this.quaternion._target, this.position, this.scale);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n    lookAt(target) {\n        let invert = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\n        else this.matrix.lookAt(target, this.position, this.up);\n        this.matrix.getRotation(this.quaternion._target);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n    constructor(){\n        this.parent = null;\n        this.children = [];\n        this.visible = true;\n        this.matrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\n        this.worldMatrix = new _math_Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\n        this.matrixAutoUpdate = true;\n        this.worldMatrixNeedsUpdate = false;\n        this.position = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3();\n        this.quaternion = new _math_Quat_js__WEBPACK_IMPORTED_MODULE_2__.Quat();\n        this.scale = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3(1);\n        this.rotation = new _math_Euler_js__WEBPACK_IMPORTED_MODULE_3__.Euler();\n        this.up = new _math_Vec3_js__WEBPACK_IMPORTED_MODULE_1__.Vec3(0, 1, 0);\n        this.rotation._target.onChange = ()=>this.quaternion.fromEuler(this.rotation, true);\n        this.quaternion._target.onChange = ()=>this.rotation.fromQuaternion(this.quaternion, undefined, true);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/core/Transform.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/extras/Triangle.js":
/*!*************************************************!*\
  !*** ./node_modules/ogl/src/extras/Triangle.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Triangle: function() { return /* binding */ Triangle; }\n/* harmony export */ });\n/* harmony import */ var _core_Geometry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Geometry.js */ \"(app-pages-browser)/./node_modules/ogl/src/core/Geometry.js\");\n\nclass Triangle extends _core_Geometry_js__WEBPACK_IMPORTED_MODULE_0__.Geometry {\n    constructor(gl, { attributes = {} } = {}){\n        Object.assign(attributes, {\n            position: {\n                size: 2,\n                data: new Float32Array([\n                    -1,\n                    -1,\n                    3,\n                    -1,\n                    -1,\n                    3\n                ])\n            },\n            uv: {\n                size: 2,\n                data: new Float32Array([\n                    0,\n                    0,\n                    2,\n                    0,\n                    0,\n                    2\n                ])\n            }\n        });\n        super(gl, attributes);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2V4dHJhcy9UcmlhbmdsZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErQztBQUV4QyxNQUFNQyxpQkFBaUJELHVEQUFRQTtJQUNsQ0UsWUFBWUMsRUFBRSxFQUFFLEVBQUVDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBRTtRQUN0Q0MsT0FBT0MsTUFBTSxDQUFDRixZQUFZO1lBQ3RCRyxVQUFVO2dCQUFFQyxNQUFNO2dCQUFHQyxNQUFNLElBQUlDLGFBQWE7b0JBQUMsQ0FBQztvQkFBRyxDQUFDO29CQUFHO29CQUFHLENBQUM7b0JBQUcsQ0FBQztvQkFBRztpQkFBRTtZQUFFO1lBQ3BFQyxJQUFJO2dCQUFFSCxNQUFNO2dCQUFHQyxNQUFNLElBQUlDLGFBQWE7b0JBQUM7b0JBQUc7b0JBQUc7b0JBQUc7b0JBQUc7b0JBQUc7aUJBQUU7WUFBRTtRQUM5RDtRQUVBLEtBQUssQ0FBQ1AsSUFBSUM7SUFDZDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2V4dHJhcy9UcmlhbmdsZS5qcz9hOTVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9HZW9tZXRyeS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBUcmlhbmdsZSBleHRlbmRzIEdlb21ldHJ5IHtcbiAgICBjb25zdHJ1Y3RvcihnbCwgeyBhdHRyaWJ1dGVzID0ge30gfSA9IHt9KSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlcywge1xuICAgICAgICAgICAgcG9zaXRpb246IHsgc2l6ZTogMiwgZGF0YTogbmV3IEZsb2F0MzJBcnJheShbLTEsIC0xLCAzLCAtMSwgLTEsIDNdKSB9LFxuICAgICAgICAgICAgdXY6IHsgc2l6ZTogMiwgZGF0YTogbmV3IEZsb2F0MzJBcnJheShbMCwgMCwgMiwgMCwgMCwgMl0pIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN1cGVyKGdsLCBhdHRyaWJ1dGVzKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiR2VvbWV0cnkiLCJUcmlhbmdsZSIsImNvbnN0cnVjdG9yIiwiZ2wiLCJhdHRyaWJ1dGVzIiwiT2JqZWN0IiwiYXNzaWduIiwicG9zaXRpb24iLCJzaXplIiwiZGF0YSIsIkZsb2F0MzJBcnJheSIsInV2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/extras/Triangle.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/math/Color.js":
/*!********************************************!*\
  !*** ./node_modules/ogl/src/math/Color.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Color: function() { return /* binding */ Color; }\n/* harmony export */ });\n/* harmony import */ var _functions_ColorFunc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/ColorFunc.js */ \"(app-pages-browser)/./node_modules/ogl/src/math/functions/ColorFunc.js\");\n\n// Color stored as an array of RGB decimal values (between 0 > 1)\n// Constructor and set method accept following formats:\n// new Color() - Empty (defaults to black)\n// new Color([0.2, 0.4, 1.0]) - Decimal Array (or another Color instance)\n// new Color(0.7, 0.0, 0.1) - Decimal RGB values\n// new Color('#ff0000') - Hex string\n// new Color('#ccc') - Short-hand Hex string\n// new Color(0x4f27e8) - Number\n// new Color('red') - Color name string (short list in ColorFunc.js)\nclass Color extends Array {\n    get r() {\n        return this[0];\n    }\n    get g() {\n        return this[1];\n    }\n    get b() {\n        return this[2];\n    }\n    set r(v) {\n        this[0] = v;\n    }\n    set g(v) {\n        this[1] = v;\n    }\n    set b(v) {\n        this[2] = v;\n    }\n    set(color) {\n        if (Array.isArray(color)) return this.copy(color);\n        return this.copy(_functions_ColorFunc_js__WEBPACK_IMPORTED_MODULE_0__.parseColor(...arguments));\n    }\n    copy(v) {\n        this[0] = v[0];\n        this[1] = v[1];\n        this[2] = v[2];\n        return this;\n    }\n    constructor(color){\n        if (Array.isArray(color)) return super(...color);\n        return super(..._functions_ColorFunc_js__WEBPACK_IMPORTED_MODULE_0__.parseColor(...arguments));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvQ29sb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBc0Q7QUFFdEQsaUVBQWlFO0FBQ2pFLHVEQUF1RDtBQUN2RCwwQ0FBMEM7QUFDMUMseUVBQXlFO0FBQ3pFLGdEQUFnRDtBQUNoRCxvQ0FBb0M7QUFDcEMsNENBQTRDO0FBQzVDLCtCQUErQjtBQUMvQixvRUFBb0U7QUFFN0QsTUFBTUMsY0FBY0M7SUFNdkIsSUFBSUMsSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLEVBQUU7SUFDbEI7SUFFQSxJQUFJQyxJQUFJO1FBQ0osT0FBTyxJQUFJLENBQUMsRUFBRTtJQUNsQjtJQUVBLElBQUlDLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxFQUFFO0lBQ2xCO0lBRUEsSUFBSUYsRUFBRUcsQ0FBQyxFQUFFO1FBQ0wsSUFBSSxDQUFDLEVBQUUsR0FBR0E7SUFDZDtJQUVBLElBQUlGLEVBQUVFLENBQUMsRUFBRTtRQUNMLElBQUksQ0FBQyxFQUFFLEdBQUdBO0lBQ2Q7SUFFQSxJQUFJRCxFQUFFQyxDQUFDLEVBQUU7UUFDTCxJQUFJLENBQUMsRUFBRSxHQUFHQTtJQUNkO0lBRUFDLElBQUlDLEtBQUssRUFBRTtRQUNQLElBQUlOLE1BQU1PLE9BQU8sQ0FBQ0QsUUFBUSxPQUFPLElBQUksQ0FBQ0UsSUFBSSxDQUFDRjtRQUMzQyxPQUFPLElBQUksQ0FBQ0UsSUFBSSxDQUFDViwrREFBb0IsSUFBSVk7SUFDN0M7SUFFQUYsS0FBS0osQ0FBQyxFQUFFO1FBQ0osSUFBSSxDQUFDLEVBQUUsR0FBR0EsQ0FBQyxDQUFDLEVBQUU7UUFDZCxJQUFJLENBQUMsRUFBRSxHQUFHQSxDQUFDLENBQUMsRUFBRTtRQUNkLElBQUksQ0FBQyxFQUFFLEdBQUdBLENBQUMsQ0FBQyxFQUFFO1FBQ2QsT0FBTyxJQUFJO0lBQ2Y7SUF2Q0FPLFlBQVlMLEtBQUssQ0FBRTtRQUNmLElBQUlOLE1BQU1PLE9BQU8sQ0FBQ0QsUUFBUSxPQUFPLEtBQUssSUFBSUE7UUFDMUMsT0FBTyxLQUFLLElBQUlSLCtEQUFvQixJQUFJWTtJQUM1QztBQXFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL0NvbG9yLmpzP2FjM2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQ29sb3JGdW5jIGZyb20gJy4vZnVuY3Rpb25zL0NvbG9yRnVuYy5qcyc7XG5cbi8vIENvbG9yIHN0b3JlZCBhcyBhbiBhcnJheSBvZiBSR0IgZGVjaW1hbCB2YWx1ZXMgKGJldHdlZW4gMCA+IDEpXG4vLyBDb25zdHJ1Y3RvciBhbmQgc2V0IG1ldGhvZCBhY2NlcHQgZm9sbG93aW5nIGZvcm1hdHM6XG4vLyBuZXcgQ29sb3IoKSAtIEVtcHR5IChkZWZhdWx0cyB0byBibGFjaylcbi8vIG5ldyBDb2xvcihbMC4yLCAwLjQsIDEuMF0pIC0gRGVjaW1hbCBBcnJheSAob3IgYW5vdGhlciBDb2xvciBpbnN0YW5jZSlcbi8vIG5ldyBDb2xvcigwLjcsIDAuMCwgMC4xKSAtIERlY2ltYWwgUkdCIHZhbHVlc1xuLy8gbmV3IENvbG9yKCcjZmYwMDAwJykgLSBIZXggc3RyaW5nXG4vLyBuZXcgQ29sb3IoJyNjY2MnKSAtIFNob3J0LWhhbmQgSGV4IHN0cmluZ1xuLy8gbmV3IENvbG9yKDB4NGYyN2U4KSAtIE51bWJlclxuLy8gbmV3IENvbG9yKCdyZWQnKSAtIENvbG9yIG5hbWUgc3RyaW5nIChzaG9ydCBsaXN0IGluIENvbG9yRnVuYy5qcylcblxuZXhwb3J0IGNsYXNzIENvbG9yIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKGNvbG9yKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbG9yKSkgcmV0dXJuIHN1cGVyKC4uLmNvbG9yKTtcbiAgICAgICAgcmV0dXJuIHN1cGVyKC4uLkNvbG9yRnVuYy5wYXJzZUNvbG9yKC4uLmFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIGdldCByKCkge1xuICAgICAgICByZXR1cm4gdGhpc1swXTtcbiAgICB9XG5cbiAgICBnZXQgZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMV07XG4gICAgfVxuXG4gICAgZ2V0IGIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzJdO1xuICAgIH1cblxuICAgIHNldCByKHYpIHtcbiAgICAgICAgdGhpc1swXSA9IHY7XG4gICAgfVxuXG4gICAgc2V0IGcodikge1xuICAgICAgICB0aGlzWzFdID0gdjtcbiAgICB9XG5cbiAgICBzZXQgYih2KSB7XG4gICAgICAgIHRoaXNbMl0gPSB2O1xuICAgIH1cblxuICAgIHNldChjb2xvcikge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb2xvcikpIHJldHVybiB0aGlzLmNvcHkoY29sb3IpO1xuICAgICAgICByZXR1cm4gdGhpcy5jb3B5KENvbG9yRnVuYy5wYXJzZUNvbG9yKC4uLmFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIGNvcHkodikge1xuICAgICAgICB0aGlzWzBdID0gdlswXTtcbiAgICAgICAgdGhpc1sxXSA9IHZbMV07XG4gICAgICAgIHRoaXNbMl0gPSB2WzJdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQ29sb3JGdW5jIiwiQ29sb3IiLCJBcnJheSIsInIiLCJnIiwiYiIsInYiLCJzZXQiLCJjb2xvciIsImlzQXJyYXkiLCJjb3B5IiwicGFyc2VDb2xvciIsImFyZ3VtZW50cyIsImNvbnN0cnVjdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/math/Color.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/math/Euler.js":
/*!********************************************!*\
  !*** ./node_modules/ogl/src/math/Euler.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Euler: function() { return /* binding */ Euler; }\n/* harmony export */ });\n/* harmony import */ var _functions_EulerFunc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functions/EulerFunc.js */ \"(app-pages-browser)/./node_modules/ogl/src/math/functions/EulerFunc.js\");\n/* harmony import */ var _Mat4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Mat4.js */ \"(app-pages-browser)/./node_modules/ogl/src/math/Mat4.js\");\n\n\nconst tmpMat4 = /* @__PURE__ */ new _Mat4_js__WEBPACK_IMPORTED_MODULE_0__.Mat4();\nclass Euler extends Array {\n    get x() {\n        return this[0];\n    }\n    get y() {\n        return this[1];\n    }\n    get z() {\n        return this[2];\n    }\n    set x(v) {\n        this._target[0] = v;\n        this.onChange();\n    }\n    set y(v) {\n        this._target[1] = v;\n        this.onChange();\n    }\n    set z(v) {\n        this._target[2] = v;\n        this.onChange();\n    }\n    set(x) {\n        let y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : x, z = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : x;\n        if (x.length) return this.copy(x);\n        this._target[0] = x;\n        this._target[1] = y;\n        this._target[2] = z;\n        this.onChange();\n        return this;\n    }\n    copy(v) {\n        this._target[0] = v[0];\n        this._target[1] = v[1];\n        this._target[2] = v[2];\n        this.onChange();\n        return this;\n    }\n    reorder(order) {\n        this._target.order = order;\n        this.onChange();\n        return this;\n    }\n    fromRotationMatrix(m) {\n        let order = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.order;\n        _functions_EulerFunc_js__WEBPACK_IMPORTED_MODULE_1__.fromRotationMatrix(this._target, m, order);\n        this.onChange();\n        return this;\n    }\n    fromQuaternion(q) {\n        let order = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.order, isInternal = arguments.length > 2 ? arguments[2] : void 0;\n        tmpMat4.fromQuaternion(q);\n        this._target.fromRotationMatrix(tmpMat4, order);\n        // Avoid infinite recursion\n        if (!isInternal) this.onChange();\n        return this;\n    }\n    fromArray(a) {\n        let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        this._target[0] = a[o];\n        this._target[1] = a[o + 1];\n        this._target[2] = a[o + 2];\n        return this;\n    }\n    toArray() {\n        let a = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n    constructor(x = 0, y = x, z = x, order = \"YXZ\"){\n        super(x, y, z);\n        this.order = order;\n        this.onChange = ()=>{};\n        // Keep reference to proxy target to avoid triggering onChange internally\n        this._target = this;\n        // Return a proxy to trigger onChange when array elements are edited directly\n        const triggerProps = [\n            \"0\",\n            \"1\",\n            \"2\"\n        ];\n        return new Proxy(this, {\n            set (target, property) {\n                const success = Reflect.set(...arguments);\n                if (success && triggerProps.includes(property)) target.onChange();\n                return success;\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvRXVsZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXNEO0FBQ3JCO0FBRWpDLE1BQU1FLFVBQVUsYUFBYSxHQUFHLElBQUlELDBDQUFJQTtBQUVqQyxNQUFNRSxjQUFjQztJQW9CdkIsSUFBSUMsSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLEVBQUU7SUFDbEI7SUFFQSxJQUFJQyxJQUFJO1FBQ0osT0FBTyxJQUFJLENBQUMsRUFBRTtJQUNsQjtJQUVBLElBQUlDLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxFQUFFO0lBQ2xCO0lBRUEsSUFBSUYsRUFBRUcsQ0FBQyxFQUFFO1FBQ0wsSUFBSSxDQUFDQyxPQUFPLENBQUMsRUFBRSxHQUFHRDtRQUNsQixJQUFJLENBQUNFLFFBQVE7SUFDakI7SUFFQSxJQUFJSixFQUFFRSxDQUFDLEVBQUU7UUFDTCxJQUFJLENBQUNDLE9BQU8sQ0FBQyxFQUFFLEdBQUdEO1FBQ2xCLElBQUksQ0FBQ0UsUUFBUTtJQUNqQjtJQUVBLElBQUlILEVBQUVDLENBQUMsRUFBRTtRQUNMLElBQUksQ0FBQ0MsT0FBTyxDQUFDLEVBQUUsR0FBR0Q7UUFDbEIsSUFBSSxDQUFDRSxRQUFRO0lBQ2pCO0lBRUFDLElBQUlOLENBQUMsRUFBZ0I7WUFBZEMsSUFBQUEsaUVBQUlELEdBQUdFLElBQUFBLGlFQUFJRjtRQUNkLElBQUlBLEVBQUVPLE1BQU0sRUFBRSxPQUFPLElBQUksQ0FBQ0MsSUFBSSxDQUFDUjtRQUMvQixJQUFJLENBQUNJLE9BQU8sQ0FBQyxFQUFFLEdBQUdKO1FBQ2xCLElBQUksQ0FBQ0ksT0FBTyxDQUFDLEVBQUUsR0FBR0g7UUFDbEIsSUFBSSxDQUFDRyxPQUFPLENBQUMsRUFBRSxHQUFHRjtRQUNsQixJQUFJLENBQUNHLFFBQVE7UUFDYixPQUFPLElBQUk7SUFDZjtJQUVBRyxLQUFLTCxDQUFDLEVBQUU7UUFDSixJQUFJLENBQUNDLE9BQU8sQ0FBQyxFQUFFLEdBQUdELENBQUMsQ0FBQyxFQUFFO1FBQ3RCLElBQUksQ0FBQ0MsT0FBTyxDQUFDLEVBQUUsR0FBR0QsQ0FBQyxDQUFDLEVBQUU7UUFDdEIsSUFBSSxDQUFDQyxPQUFPLENBQUMsRUFBRSxHQUFHRCxDQUFDLENBQUMsRUFBRTtRQUN0QixJQUFJLENBQUNFLFFBQVE7UUFDYixPQUFPLElBQUk7SUFDZjtJQUVBSSxRQUFRQyxLQUFLLEVBQUU7UUFDWCxJQUFJLENBQUNOLE9BQU8sQ0FBQ00sS0FBSyxHQUFHQTtRQUNyQixJQUFJLENBQUNMLFFBQVE7UUFDYixPQUFPLElBQUk7SUFDZjtJQUVBTSxtQkFBbUJDLENBQUMsRUFBc0I7WUFBcEJGLFFBQUFBLGlFQUFRLElBQUksQ0FBQ0EsS0FBSztRQUNwQ2YsdUVBQTRCLENBQUMsSUFBSSxDQUFDUyxPQUFPLEVBQUVRLEdBQUdGO1FBQzlDLElBQUksQ0FBQ0wsUUFBUTtRQUNiLE9BQU8sSUFBSTtJQUNmO0lBRUFRLGVBQWVDLENBQUMsRUFBa0M7WUFBaENKLFFBQUFBLGlFQUFRLElBQUksQ0FBQ0EsS0FBSyxFQUFFSztRQUNsQ2xCLFFBQVFnQixjQUFjLENBQUNDO1FBQ3ZCLElBQUksQ0FBQ1YsT0FBTyxDQUFDTyxrQkFBa0IsQ0FBQ2QsU0FBU2E7UUFDekMsMkJBQTJCO1FBQzNCLElBQUksQ0FBQ0ssWUFBWSxJQUFJLENBQUNWLFFBQVE7UUFDOUIsT0FBTyxJQUFJO0lBQ2Y7SUFFQVcsVUFBVUMsQ0FBQyxFQUFTO1lBQVBDLElBQUFBLGlFQUFJO1FBQ2IsSUFBSSxDQUFDZCxPQUFPLENBQUMsRUFBRSxHQUFHYSxDQUFDLENBQUNDLEVBQUU7UUFDdEIsSUFBSSxDQUFDZCxPQUFPLENBQUMsRUFBRSxHQUFHYSxDQUFDLENBQUNDLElBQUksRUFBRTtRQUMxQixJQUFJLENBQUNkLE9BQU8sQ0FBQyxFQUFFLEdBQUdhLENBQUMsQ0FBQ0MsSUFBSSxFQUFFO1FBQzFCLE9BQU8sSUFBSTtJQUNmO0lBRUFDLFVBQXVCO1lBQWZGLElBQUFBLGlFQUFJLEVBQUUsRUFBRUMsSUFBQUEsaUVBQUk7UUFDaEJELENBQUMsQ0FBQ0MsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFO1FBQ2RELENBQUMsQ0FBQ0MsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUU7UUFDbEJELENBQUMsQ0FBQ0MsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUU7UUFDbEIsT0FBT0Q7SUFDWDtJQS9GQUcsWUFBWXBCLElBQUksQ0FBQyxFQUFFQyxJQUFJRCxDQUFDLEVBQUVFLElBQUlGLENBQUMsRUFBRVUsUUFBUSxLQUFLLENBQUU7UUFDNUMsS0FBSyxDQUFDVixHQUFHQyxHQUFHQztRQUNaLElBQUksQ0FBQ1EsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ0wsUUFBUSxHQUFHLEtBQU87UUFFdkIseUVBQXlFO1FBQ3pFLElBQUksQ0FBQ0QsT0FBTyxHQUFHLElBQUk7UUFFbkIsNkVBQTZFO1FBQzdFLE1BQU1pQixlQUFlO1lBQUM7WUFBSztZQUFLO1NBQUk7UUFDcEMsT0FBTyxJQUFJQyxNQUFNLElBQUksRUFBRTtZQUNuQmhCLEtBQUlpQixNQUFNLEVBQUVDLFFBQVE7Z0JBQ2hCLE1BQU1DLFVBQVVDLFFBQVFwQixHQUFHLElBQUlxQjtnQkFDL0IsSUFBSUYsV0FBV0osYUFBYU8sUUFBUSxDQUFDSixXQUFXRCxPQUFPbEIsUUFBUTtnQkFDL0QsT0FBT29CO1lBQ1g7UUFDSjtJQUNKO0FBK0VKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvRXVsZXIuanM/N2NmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBFdWxlckZ1bmMgZnJvbSAnLi9mdW5jdGlvbnMvRXVsZXJGdW5jLmpzJztcbmltcG9ydCB7IE1hdDQgfSBmcm9tICcuL01hdDQuanMnO1xuXG5jb25zdCB0bXBNYXQ0ID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXQ0KCk7XG5cbmV4cG9ydCBjbGFzcyBFdWxlciBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IHgsIHogPSB4LCBvcmRlciA9ICdZWFonKSB7XG4gICAgICAgIHN1cGVyKHgsIHksIHopO1xuICAgICAgICB0aGlzLm9yZGVyID0gb3JkZXI7XG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSAoKSA9PiB7fTtcblxuICAgICAgICAvLyBLZWVwIHJlZmVyZW5jZSB0byBwcm94eSB0YXJnZXQgdG8gYXZvaWQgdHJpZ2dlcmluZyBvbkNoYW5nZSBpbnRlcm5hbGx5XG4gICAgICAgIHRoaXMuX3RhcmdldCA9IHRoaXM7XG5cbiAgICAgICAgLy8gUmV0dXJuIGEgcHJveHkgdG8gdHJpZ2dlciBvbkNoYW5nZSB3aGVuIGFycmF5IGVsZW1lbnRzIGFyZSBlZGl0ZWQgZGlyZWN0bHlcbiAgICAgICAgY29uc3QgdHJpZ2dlclByb3BzID0gWycwJywgJzEnLCAnMiddO1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRoaXMsIHtcbiAgICAgICAgICAgIHNldCh0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IFJlZmxlY3Quc2V0KC4uLmFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MgJiYgdHJpZ2dlclByb3BzLmluY2x1ZGVzKHByb3BlcnR5KSkgdGFyZ2V0Lm9uQ2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXQgeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMF07XG4gICAgfVxuXG4gICAgZ2V0IHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzFdO1xuICAgIH1cblxuICAgIGdldCB6KCkge1xuICAgICAgICByZXR1cm4gdGhpc1syXTtcbiAgICB9XG5cbiAgICBzZXQgeCh2KSB7XG4gICAgICAgIHRoaXMuX3RhcmdldFswXSA9IHY7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBzZXQgeSh2KSB7XG4gICAgICAgIHRoaXMuX3RhcmdldFsxXSA9IHY7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBzZXQgeih2KSB7XG4gICAgICAgIHRoaXMuX3RhcmdldFsyXSA9IHY7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBzZXQoeCwgeSA9IHgsIHogPSB4KSB7XG4gICAgICAgIGlmICh4Lmxlbmd0aCkgcmV0dXJuIHRoaXMuY29weSh4KTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzBdID0geDtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzFdID0geTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzJdID0gejtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb3B5KHYpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzBdID0gdlswXTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzFdID0gdlsxXTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0WzJdID0gdlsyXTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZW9yZGVyKG9yZGVyKSB7XG4gICAgICAgIHRoaXMuX3RhcmdldC5vcmRlciA9IG9yZGVyO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZyb21Sb3RhdGlvbk1hdHJpeChtLCBvcmRlciA9IHRoaXMub3JkZXIpIHtcbiAgICAgICAgRXVsZXJGdW5jLmZyb21Sb3RhdGlvbk1hdHJpeCh0aGlzLl90YXJnZXQsIG0sIG9yZGVyKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tUXVhdGVybmlvbihxLCBvcmRlciA9IHRoaXMub3JkZXIsIGlzSW50ZXJuYWwpIHtcbiAgICAgICAgdG1wTWF0NC5mcm9tUXVhdGVybmlvbihxKTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0LmZyb21Sb3RhdGlvbk1hdHJpeCh0bXBNYXQ0LCBvcmRlcik7XG4gICAgICAgIC8vIEF2b2lkIGluZmluaXRlIHJlY3Vyc2lvblxuICAgICAgICBpZiAoIWlzSW50ZXJuYWwpIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbUFycmF5KGEsIG8gPSAwKSB7XG4gICAgICAgIHRoaXMuX3RhcmdldFswXSA9IGFbb107XG4gICAgICAgIHRoaXMuX3RhcmdldFsxXSA9IGFbbyArIDFdO1xuICAgICAgICB0aGlzLl90YXJnZXRbMl0gPSBhW28gKyAyXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdG9BcnJheShhID0gW10sIG8gPSAwKSB7XG4gICAgICAgIGFbb10gPSB0aGlzWzBdO1xuICAgICAgICBhW28gKyAxXSA9IHRoaXNbMV07XG4gICAgICAgIGFbbyArIDJdID0gdGhpc1syXTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkV1bGVyRnVuYyIsIk1hdDQiLCJ0bXBNYXQ0IiwiRXVsZXIiLCJBcnJheSIsIngiLCJ5IiwieiIsInYiLCJfdGFyZ2V0Iiwib25DaGFuZ2UiLCJzZXQiLCJsZW5ndGgiLCJjb3B5IiwicmVvcmRlciIsIm9yZGVyIiwiZnJvbVJvdGF0aW9uTWF0cml4IiwibSIsImZyb21RdWF0ZXJuaW9uIiwicSIsImlzSW50ZXJuYWwiLCJmcm9tQXJyYXkiLCJhIiwibyIsInRvQXJyYXkiLCJjb25zdHJ1Y3RvciIsInRyaWdnZXJQcm9wcyIsIlByb3h5IiwidGFyZ2V0IiwicHJvcGVydHkiLCJzdWNjZXNzIiwiUmVmbGVjdCIsImFyZ3VtZW50cyIsImluY2x1ZGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/math/Euler.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/math/Mat3.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/math/Mat3.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mat3: function() { return /* binding */ Mat3; }\n/* harmony export */ });\n/* harmony import */ var _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/Mat3Func.js */ \"(app-pages-browser)/./node_modules/ogl/src/math/functions/Mat3Func.js\");\n\nclass Mat3 extends Array {\n    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n        if (m00.length) return this.copy(m00);\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n    translate(v) {\n        let m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this;\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.translate(this, m, v);\n        return this;\n    }\n    rotate(v) {\n        let m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this;\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.rotate(this, m, v);\n        return this;\n    }\n    scale(v) {\n        let m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this;\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, m, v);\n        return this;\n    }\n    multiply(ma, mb) {\n        if (mb) {\n            _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, ma, mb);\n        } else {\n            _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, this, ma);\n        }\n        return this;\n    }\n    identity() {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.identity(this);\n        return this;\n    }\n    copy(m) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.copy(this, m);\n        return this;\n    }\n    fromMatrix4(m) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.fromMat4(this, m);\n        return this;\n    }\n    fromQuaternion(q) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.fromQuat(this, q);\n        return this;\n    }\n    fromBasis(vec3a, vec3b, vec3c) {\n        this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\n        return this;\n    }\n    inverse() {\n        let m = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this;\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.invert(this, m);\n        return this;\n    }\n    getNormalMatrix(m) {\n        _functions_Mat3Func_js__WEBPACK_IMPORTED_MODULE_0__.normalFromMat4(this, m);\n        return this;\n    }\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1){\n        super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvTWF0My5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFvRDtBQUU3QyxNQUFNQyxhQUFhQztJQU10QkMsSUFBSUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRTtRQUM3QyxJQUFJUixJQUFJUyxNQUFNLEVBQUUsT0FBTyxJQUFJLENBQUNDLElBQUksQ0FBQ1Y7UUFDakNKLHVEQUFZLENBQUMsSUFBSSxFQUFFSSxLQUFLQyxLQUFLQyxLQUFLQyxLQUFLQyxLQUFLQyxLQUFLQyxLQUFLQyxLQUFLQztRQUMzRCxPQUFPLElBQUk7SUFDZjtJQUVBRyxVQUFVQyxDQUFDLEVBQVk7WUFBVkMsSUFBQUEsaUVBQUksSUFBSTtRQUNqQmpCLDZEQUFrQixDQUFDLElBQUksRUFBRWlCLEdBQUdEO1FBQzVCLE9BQU8sSUFBSTtJQUNmO0lBRUFFLE9BQU9GLENBQUMsRUFBWTtZQUFWQyxJQUFBQSxpRUFBSSxJQUFJO1FBQ2RqQiwwREFBZSxDQUFDLElBQUksRUFBRWlCLEdBQUdEO1FBQ3pCLE9BQU8sSUFBSTtJQUNmO0lBRUFHLE1BQU1ILENBQUMsRUFBWTtZQUFWQyxJQUFBQSxpRUFBSSxJQUFJO1FBQ2JqQix5REFBYyxDQUFDLElBQUksRUFBRWlCLEdBQUdEO1FBQ3hCLE9BQU8sSUFBSTtJQUNmO0lBRUFJLFNBQVNDLEVBQUUsRUFBRUMsRUFBRSxFQUFFO1FBQ2IsSUFBSUEsSUFBSTtZQUNKdEIsNERBQWlCLENBQUMsSUFBSSxFQUFFcUIsSUFBSUM7UUFDaEMsT0FBTztZQUNIdEIsNERBQWlCLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRXFCO1FBQ2xDO1FBQ0EsT0FBTyxJQUFJO0lBQ2Y7SUFFQUUsV0FBVztRQUNQdkIsNERBQWlCLENBQUMsSUFBSTtRQUN0QixPQUFPLElBQUk7SUFDZjtJQUVBYyxLQUFLRyxDQUFDLEVBQUU7UUFDSmpCLHdEQUFhLENBQUMsSUFBSSxFQUFFaUI7UUFDcEIsT0FBTyxJQUFJO0lBQ2Y7SUFFQU8sWUFBWVAsQ0FBQyxFQUFFO1FBQ1hqQiw0REFBaUIsQ0FBQyxJQUFJLEVBQUVpQjtRQUN4QixPQUFPLElBQUk7SUFDZjtJQUVBUyxlQUFlQyxDQUFDLEVBQUU7UUFDZDNCLDREQUFpQixDQUFDLElBQUksRUFBRTJCO1FBQ3hCLE9BQU8sSUFBSTtJQUNmO0lBRUFFLFVBQVVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUU7UUFDM0IsSUFBSSxDQUFDN0IsR0FBRyxDQUFDMkIsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUUsRUFBRUMsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUUsRUFBRUMsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUU7UUFDakcsT0FBTyxJQUFJO0lBQ2Y7SUFFQUMsVUFBa0I7WUFBVmhCLElBQUFBLGlFQUFJLElBQUk7UUFDWmpCLDBEQUFlLENBQUMsSUFBSSxFQUFFaUI7UUFDdEIsT0FBTyxJQUFJO0lBQ2Y7SUFFQWtCLGdCQUFnQmxCLENBQUMsRUFBRTtRQUNmakIsa0VBQXVCLENBQUMsSUFBSSxFQUFFaUI7UUFDOUIsT0FBTyxJQUFJO0lBQ2Y7SUFwRUFvQixZQUFZakMsTUFBTSxDQUFDLEVBQUVDLE1BQU0sQ0FBQyxFQUFFQyxNQUFNLENBQUMsRUFBRUMsTUFBTSxDQUFDLEVBQUVDLE1BQU0sQ0FBQyxFQUFFQyxNQUFNLENBQUMsRUFBRUMsTUFBTSxDQUFDLEVBQUVDLE1BQU0sQ0FBQyxFQUFFQyxNQUFNLENBQUMsQ0FBRTtRQUN6RixLQUFLLENBQUNSLEtBQUtDLEtBQUtDLEtBQUtDLEtBQUtDLEtBQUtDLEtBQUtDLEtBQUtDLEtBQUtDO1FBQzlDLE9BQU8sSUFBSTtJQUNmO0FBa0VKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvTWF0My5qcz9hODJjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIE1hdDNGdW5jIGZyb20gJy4vZnVuY3Rpb25zL01hdDNGdW5jLmpzJztcblxuZXhwb3J0IGNsYXNzIE1hdDMgZXh0ZW5kcyBBcnJheSB7XG4gICAgY29uc3RydWN0b3IobTAwID0gMSwgbTAxID0gMCwgbTAyID0gMCwgbTEwID0gMCwgbTExID0gMSwgbTEyID0gMCwgbTIwID0gMCwgbTIxID0gMCwgbTIyID0gMSkge1xuICAgICAgICBzdXBlcihtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2V0KG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpIHtcbiAgICAgICAgaWYgKG0wMC5sZW5ndGgpIHJldHVybiB0aGlzLmNvcHkobTAwKTtcbiAgICAgICAgTWF0M0Z1bmMuc2V0KHRoaXMsIG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0cmFuc2xhdGUodiwgbSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMudHJhbnNsYXRlKHRoaXMsIG0sIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByb3RhdGUodiwgbSA9IHRoaXMpIHtcbiAgICAgICAgTWF0M0Z1bmMucm90YXRlKHRoaXMsIG0sIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzY2FsZSh2LCBtID0gdGhpcykge1xuICAgICAgICBNYXQzRnVuYy5zY2FsZSh0aGlzLCBtLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbXVsdGlwbHkobWEsIG1iKSB7XG4gICAgICAgIGlmIChtYikge1xuICAgICAgICAgICAgTWF0M0Z1bmMubXVsdGlwbHkodGhpcywgbWEsIG1iKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE1hdDNGdW5jLm11bHRpcGx5KHRoaXMsIHRoaXMsIG1hKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZGVudGl0eSgpIHtcbiAgICAgICAgTWF0M0Z1bmMuaWRlbnRpdHkodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkobSkge1xuICAgICAgICBNYXQzRnVuYy5jb3B5KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tTWF0cml4NChtKSB7XG4gICAgICAgIE1hdDNGdW5jLmZyb21NYXQ0KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tUXVhdGVybmlvbihxKSB7XG4gICAgICAgIE1hdDNGdW5jLmZyb21RdWF0KHRoaXMsIHEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tQmFzaXModmVjM2EsIHZlYzNiLCB2ZWMzYykge1xuICAgICAgICB0aGlzLnNldCh2ZWMzYVswXSwgdmVjM2FbMV0sIHZlYzNhWzJdLCB2ZWMzYlswXSwgdmVjM2JbMV0sIHZlYzNiWzJdLCB2ZWMzY1swXSwgdmVjM2NbMV0sIHZlYzNjWzJdKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaW52ZXJzZShtID0gdGhpcykge1xuICAgICAgICBNYXQzRnVuYy5pbnZlcnQodGhpcywgbSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldE5vcm1hbE1hdHJpeChtKSB7XG4gICAgICAgIE1hdDNGdW5jLm5vcm1hbEZyb21NYXQ0KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiTWF0M0Z1bmMiLCJNYXQzIiwiQXJyYXkiLCJzZXQiLCJtMDAiLCJtMDEiLCJtMDIiLCJtMTAiLCJtMTEiLCJtMTIiLCJtMjAiLCJtMjEiLCJtMjIiLCJsZW5ndGgiLCJjb3B5IiwidHJhbnNsYXRlIiwidiIsIm0iLCJyb3RhdGUiLCJzY2FsZSIsIm11bHRpcGx5IiwibWEiLCJtYiIsImlkZW50aXR5IiwiZnJvbU1hdHJpeDQiLCJmcm9tTWF0NCIsImZyb21RdWF0ZXJuaW9uIiwicSIsImZyb21RdWF0IiwiZnJvbUJhc2lzIiwidmVjM2EiLCJ2ZWMzYiIsInZlYzNjIiwiaW52ZXJzZSIsImludmVydCIsImdldE5vcm1hbE1hdHJpeCIsIm5vcm1hbEZyb21NYXQ0IiwiY29uc3RydWN0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/math/Mat3.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/math/Mat4.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/math/Mat4.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mat4: function() { return /* binding */ Mat4; }\n/* harmony export */ });\n/* harmony import */ var _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/Mat4Func.js */ \"(app-pages-browser)/./node_modules/ogl/src/math/functions/Mat4Func.js\");\n\nclass Mat4 extends Array {\n    get x() {\n        return this[12];\n    }\n    get y() {\n        return this[13];\n    }\n    get z() {\n        return this[14];\n    }\n    get w() {\n        return this[15];\n    }\n    set x(v) {\n        this[12] = v;\n    }\n    set y(v) {\n        this[13] = v;\n    }\n    set z(v) {\n        this[14] = v;\n    }\n    set w(v) {\n        this[15] = v;\n    }\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n        if (m00.length) return this.copy(m00);\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n    translate(v) {\n        let m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this;\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.translate(this, m, v);\n        return this;\n    }\n    rotate(v, axis) {\n        let m = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this;\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.rotate(this, m, v, axis);\n        return this;\n    }\n    scale(v) {\n        let m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this;\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, m, typeof v === \"number\" ? [\n            v,\n            v,\n            v\n        ] : v);\n        return this;\n    }\n    add(ma, mb) {\n        if (mb) _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.add(this, ma, mb);\n        else _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.add(this, this, ma);\n        return this;\n    }\n    sub(ma, mb) {\n        if (mb) _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.subtract(this, ma, mb);\n        else _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.subtract(this, this, ma);\n        return this;\n    }\n    multiply(ma, mb) {\n        if (!ma.length) {\n            _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.multiplyScalar(this, this, ma);\n        } else if (mb) {\n            _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, ma, mb);\n        } else {\n            _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, this, ma);\n        }\n        return this;\n    }\n    identity() {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.identity(this);\n        return this;\n    }\n    copy(m) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.copy(this, m);\n        return this;\n    }\n    fromPerspective() {\n        let { fov, aspect, near, far } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.perspective(this, fov, aspect, near, far);\n        return this;\n    }\n    fromOrthogonal(param) {\n        let { left, right, bottom, top, near, far } = param;\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.ortho(this, left, right, bottom, top, near, far);\n        return this;\n    }\n    fromQuaternion(q) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.fromQuat(this, q);\n        return this;\n    }\n    setPosition(v) {\n        this.x = v[0];\n        this.y = v[1];\n        this.z = v[2];\n        return this;\n    }\n    inverse() {\n        let m = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this;\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.invert(this, m);\n        return this;\n    }\n    compose(q, pos, scale) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.compose(this, q, pos, scale);\n        return this;\n    }\n    decompose(q, pos, scale) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.decompose(this, q, pos, scale);\n        return this;\n    }\n    getRotation(q) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.getRotation(q, this);\n        return this;\n    }\n    getTranslation(pos) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.getTranslation(pos, this);\n        return this;\n    }\n    getScaling(scale) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.getScaling(scale, this);\n        return this;\n    }\n    getMaxScaleOnAxis() {\n        return _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.getMaxScaleOnAxis(this);\n    }\n    lookAt(eye, target, up) {\n        _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.targetTo(this, eye, target, up);\n        return this;\n    }\n    determinant() {\n        return _functions_Mat4Func_js__WEBPACK_IMPORTED_MODULE_0__.determinant(this);\n    }\n    fromArray(a) {\n        let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this[4] = a[o + 4];\n        this[5] = a[o + 5];\n        this[6] = a[o + 6];\n        this[7] = a[o + 7];\n        this[8] = a[o + 8];\n        this[9] = a[o + 9];\n        this[10] = a[o + 10];\n        this[11] = a[o + 11];\n        this[12] = a[o + 12];\n        this[13] = a[o + 13];\n        this[14] = a[o + 14];\n        this[15] = a[o + 15];\n        return this;\n    }\n    toArray() {\n        let a = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        a[o + 4] = this[4];\n        a[o + 5] = this[5];\n        a[o + 6] = this[6];\n        a[o + 7] = this[7];\n        a[o + 8] = this[8];\n        a[o + 9] = this[9];\n        a[o + 10] = this[10];\n        a[o + 11] = this[11];\n        a[o + 12] = this[12];\n        a[o + 13] = this[13];\n        a[o + 14] = this[14];\n        a[o + 15] = this[15];\n        return a;\n    }\n    constructor(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m10 = 0, m11 = 1, m12 = 0, m13 = 0, m20 = 0, m21 = 0, m22 = 1, m23 = 0, m30 = 0, m31 = 0, m32 = 0, m33 = 1){\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/math/Mat4.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/math/Quat.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/math/Quat.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Quat: function() { return /* binding */ Quat; }\n/* harmony export */ });\n/* harmony import */ var _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/QuatFunc.js */ \"(app-pages-browser)/./node_modules/ogl/src/math/functions/QuatFunc.js\");\n\nclass Quat extends Array {\n    get x() {\n        return this[0];\n    }\n    get y() {\n        return this[1];\n    }\n    get z() {\n        return this[2];\n    }\n    get w() {\n        return this[3];\n    }\n    set x(v) {\n        this._target[0] = v;\n        this.onChange();\n    }\n    set y(v) {\n        this._target[1] = v;\n        this.onChange();\n    }\n    set z(v) {\n        this._target[2] = v;\n        this.onChange();\n    }\n    set w(v) {\n        this._target[3] = v;\n        this.onChange();\n    }\n    identity() {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.identity(this._target);\n        this.onChange();\n        return this;\n    }\n    set(x, y, z, w) {\n        if (x.length) return this.copy(x);\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.set(this._target, x, y, z, w);\n        this.onChange();\n        return this;\n    }\n    rotateX(a) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.rotateX(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n    rotateY(a) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.rotateY(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n    rotateZ(a) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.rotateZ(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n    inverse() {\n        let q = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this._target;\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.invert(this._target, q);\n        this.onChange();\n        return this;\n    }\n    conjugate() {\n        let q = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this._target;\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.conjugate(this._target, q);\n        this.onChange();\n        return this;\n    }\n    copy(q) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.copy(this._target, q);\n        this.onChange();\n        return this;\n    }\n    normalize() {\n        let q = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this._target;\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.normalize(this._target, q);\n        this.onChange();\n        return this;\n    }\n    multiply(qA, qB) {\n        if (qB) {\n            _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this._target, qA, qB);\n        } else {\n            _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this._target, this._target, qA);\n        }\n        this.onChange();\n        return this;\n    }\n    dot(v) {\n        return _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.dot(this._target, v);\n    }\n    fromMatrix3(matrix3) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.fromMat3(this._target, matrix3);\n        this.onChange();\n        return this;\n    }\n    fromEuler(euler, isInternal) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.fromEuler(this._target, euler, euler.order);\n        // Avoid infinite recursion\n        if (!isInternal) this.onChange();\n        return this;\n    }\n    fromAxisAngle(axis, a) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.setAxisAngle(this._target, axis, a);\n        this.onChange();\n        return this;\n    }\n    slerp(q, t) {\n        _functions_QuatFunc_js__WEBPACK_IMPORTED_MODULE_0__.slerp(this._target, this._target, q, t);\n        this.onChange();\n        return this;\n    }\n    fromArray(a) {\n        let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        this._target[0] = a[o];\n        this._target[1] = a[o + 1];\n        this._target[2] = a[o + 2];\n        this._target[3] = a[o + 3];\n        this.onChange();\n        return this;\n    }\n    toArray() {\n        let a = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n    constructor(x = 0, y = 0, z = 0, w = 1){\n        super(x, y, z, w);\n        this.onChange = ()=>{};\n        // Keep reference to proxy target to avoid triggering onChange internally\n        this._target = this;\n        // Return a proxy to trigger onChange when array elements are edited directly\n        const triggerProps = [\n            \"0\",\n            \"1\",\n            \"2\",\n            \"3\"\n        ];\n        return new Proxy(this, {\n            set (target, property) {\n                const success = Reflect.set(...arguments);\n                if (success && triggerProps.includes(property)) target.onChange();\n                return success;\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/math/Quat.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/math/Vec3.js":
/*!*******************************************!*\
  !*** ./node_modules/ogl/src/math/Vec3.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Vec3: function() { return /* binding */ Vec3; }\n/* harmony export */ });\n/* harmony import */ var _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functions/Vec3Func.js */ \"(app-pages-browser)/./node_modules/ogl/src/math/functions/Vec3Func.js\");\n\nclass Vec3 extends Array {\n    get x() {\n        return this[0];\n    }\n    get y() {\n        return this[1];\n    }\n    get z() {\n        return this[2];\n    }\n    set x(v) {\n        this[0] = v;\n    }\n    set y(v) {\n        this[1] = v;\n    }\n    set z(v) {\n        this[2] = v;\n    }\n    set(x) {\n        let y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : x, z = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : x;\n        if (x.length) return this.copy(x);\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.set(this, x, y, z);\n        return this;\n    }\n    copy(v) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.copy(this, v);\n        return this;\n    }\n    add(va, vb) {\n        if (vb) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.add(this, va, vb);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.add(this, this, va);\n        return this;\n    }\n    sub(va, vb) {\n        if (vb) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.subtract(this, va, vb);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.subtract(this, this, va);\n        return this;\n    }\n    multiply(v) {\n        if (v.length) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.multiply(this, this, v);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, this, v);\n        return this;\n    }\n    divide(v) {\n        if (v.length) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.divide(this, this, v);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, this, 1 / v);\n        return this;\n    }\n    inverse() {\n        let v = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this;\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.inverse(this, v);\n        return this;\n    }\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.length(this);\n    }\n    distance(v) {\n        if (v) return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.distance(this, v);\n        else return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.length(this);\n    }\n    squaredLen() {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.squaredLength(this);\n    }\n    squaredDistance(v) {\n        if (v) return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.squaredDistance(this, v);\n        else return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.squaredLength(this);\n    }\n    negate() {\n        let v = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this;\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.negate(this, v);\n        return this;\n    }\n    cross(va, vb) {\n        if (vb) _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.cross(this, va, vb);\n        else _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.cross(this, this, va);\n        return this;\n    }\n    scale(v) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.scale(this, this, v);\n        return this;\n    }\n    normalize() {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.normalize(this, this);\n        return this;\n    }\n    dot(v) {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.dot(this, v);\n    }\n    equals(v) {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.exactEquals(this, v);\n    }\n    applyMatrix3(mat3) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.transformMat3(this, this, mat3);\n        return this;\n    }\n    applyMatrix4(mat4) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.transformMat4(this, this, mat4);\n        return this;\n    }\n    scaleRotateMatrix4(mat4) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.scaleRotateMat4(this, this, mat4);\n        return this;\n    }\n    applyQuaternion(q) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.transformQuat(this, this, q);\n        return this;\n    }\n    angle(v) {\n        return _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.angle(this, v);\n    }\n    lerp(v, t) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.lerp(this, this, v, t);\n        return this;\n    }\n    smoothLerp(v, decay, dt) {\n        _functions_Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.smoothLerp(this, this, v, decay, dt);\n        return this;\n    }\n    clone() {\n        return new Vec3(this[0], this[1], this[2]);\n    }\n    fromArray(a) {\n        let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n    toArray() {\n        let a = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n    transformDirection(mat4) {\n        const x = this[0];\n        const y = this[1];\n        const z = this[2];\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n        return this.normalize();\n    }\n    constructor(x = 0, y = x, z = x){\n        super(x, y, z);\n        return this;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/math/Vec3.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/math/functions/ColorFunc.js":
/*!**********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/ColorFunc.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hexToRGB: function() { return /* binding */ hexToRGB; },\n/* harmony export */   numberToRGB: function() { return /* binding */ numberToRGB; },\n/* harmony export */   parseColor: function() { return /* binding */ parseColor; }\n/* harmony export */ });\nconst NAMES = {\n    black: \"#000000\",\n    white: \"#ffffff\",\n    red: \"#ff0000\",\n    green: \"#00ff00\",\n    blue: \"#0000ff\",\n    fuchsia: \"#ff00ff\",\n    cyan: \"#00ffff\",\n    yellow: \"#ffff00\",\n    orange: \"#ff8000\"\n};\nfunction hexToRGB(hex) {\n    if (hex.length === 4) hex = hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];\n    const rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    if (!rgb) console.warn(\"Unable to convert hex string \".concat(hex, \" to rgb values\"));\n    return [\n        parseInt(rgb[1], 16) / 255,\n        parseInt(rgb[2], 16) / 255,\n        parseInt(rgb[3], 16) / 255\n    ];\n}\nfunction numberToRGB(num) {\n    num = parseInt(num);\n    return [\n        (num >> 16 & 255) / 255,\n        (num >> 8 & 255) / 255,\n        (num & 255) / 255\n    ];\n}\nfunction parseColor(color) {\n    // Empty\n    if (color === undefined) return [\n        0,\n        0,\n        0\n    ];\n    // Decimal\n    if (arguments.length === 3) return arguments;\n    // Number\n    if (!isNaN(color)) return numberToRGB(color);\n    // Hex\n    if (color[0] === \"#\") return hexToRGB(color);\n    // Names\n    if (NAMES[color.toLowerCase()]) return hexToRGB(NAMES[color.toLowerCase()]);\n    console.warn(\"Color format not recognised\");\n    return [\n        0,\n        0,\n        0\n    ];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL0NvbG9yRnVuYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSxRQUFRO0lBQ1ZDLE9BQU87SUFDUEMsT0FBTztJQUNQQyxLQUFLO0lBQ0xDLE9BQU87SUFDUEMsTUFBTTtJQUNOQyxTQUFTO0lBQ1RDLE1BQU07SUFDTkMsUUFBUTtJQUNSQyxRQUFRO0FBQ1o7QUFFTyxTQUFTQyxTQUFTQyxHQUFHO0lBQ3hCLElBQUlBLElBQUlDLE1BQU0sS0FBSyxHQUFHRCxNQUFNQSxHQUFHLENBQUMsRUFBRSxHQUFHQSxHQUFHLENBQUMsRUFBRSxHQUFHQSxHQUFHLENBQUMsRUFBRSxHQUFHQSxHQUFHLENBQUMsRUFBRSxHQUFHQSxHQUFHLENBQUMsRUFBRSxHQUFHQSxHQUFHLENBQUMsRUFBRSxHQUFHQSxHQUFHLENBQUMsRUFBRTtJQUN4RixNQUFNRSxNQUFNLDRDQUE0Q0MsSUFBSSxDQUFDSDtJQUM3RCxJQUFJLENBQUNFLEtBQUtFLFFBQVFDLElBQUksQ0FBQyxnQ0FBb0MsT0FBSkwsS0FBSTtJQUMzRCxPQUFPO1FBQUNNLFNBQVNKLEdBQUcsQ0FBQyxFQUFFLEVBQUUsTUFBTTtRQUFLSSxTQUFTSixHQUFHLENBQUMsRUFBRSxFQUFFLE1BQU07UUFBS0ksU0FBU0osR0FBRyxDQUFDLEVBQUUsRUFBRSxNQUFNO0tBQUk7QUFDL0Y7QUFFTyxTQUFTSyxZQUFZQyxHQUFHO0lBQzNCQSxNQUFNRixTQUFTRTtJQUNmLE9BQU87UUFBRSxRQUFRLEtBQU0sR0FBRSxJQUFLO1FBQU0sUUFBUSxJQUFLLEdBQUUsSUFBSztRQUFNQSxDQUFBQSxNQUFNLEdBQUUsSUFBSztLQUFJO0FBQ25GO0FBRU8sU0FBU0MsV0FBV0MsS0FBSztJQUM1QixRQUFRO0lBQ1IsSUFBSUEsVUFBVUMsV0FBVyxPQUFPO1FBQUM7UUFBRztRQUFHO0tBQUU7SUFFekMsVUFBVTtJQUNWLElBQUlDLFVBQVVYLE1BQU0sS0FBSyxHQUFHLE9BQU9XO0lBRW5DLFNBQVM7SUFDVCxJQUFJLENBQUNDLE1BQU1ILFFBQVEsT0FBT0gsWUFBWUc7SUFFdEMsTUFBTTtJQUNOLElBQUlBLEtBQUssQ0FBQyxFQUFFLEtBQUssS0FBSyxPQUFPWCxTQUFTVztJQUV0QyxRQUFRO0lBQ1IsSUFBSXJCLEtBQUssQ0FBQ3FCLE1BQU1JLFdBQVcsR0FBRyxFQUFFLE9BQU9mLFNBQVNWLEtBQUssQ0FBQ3FCLE1BQU1JLFdBQVcsR0FBRztJQUUxRVYsUUFBUUMsSUFBSSxDQUFDO0lBQ2IsT0FBTztRQUFDO1FBQUc7UUFBRztLQUFFO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL0NvbG9yRnVuYy5qcz83ZDdjIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE5BTUVTID0ge1xuICAgIGJsYWNrOiAnIzAwMDAwMCcsXG4gICAgd2hpdGU6ICcjZmZmZmZmJyxcbiAgICByZWQ6ICcjZmYwMDAwJyxcbiAgICBncmVlbjogJyMwMGZmMDAnLFxuICAgIGJsdWU6ICcjMDAwMGZmJyxcbiAgICBmdWNoc2lhOiAnI2ZmMDBmZicsXG4gICAgY3lhbjogJyMwMGZmZmYnLFxuICAgIHllbGxvdzogJyNmZmZmMDAnLFxuICAgIG9yYW5nZTogJyNmZjgwMDAnLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGhleFRvUkdCKGhleCkge1xuICAgIGlmIChoZXgubGVuZ3RoID09PSA0KSBoZXggPSBoZXhbMF0gKyBoZXhbMV0gKyBoZXhbMV0gKyBoZXhbMl0gKyBoZXhbMl0gKyBoZXhbM10gKyBoZXhbM107XG4gICAgY29uc3QgcmdiID0gL14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaS5leGVjKGhleCk7XG4gICAgaWYgKCFyZ2IpIGNvbnNvbGUud2FybihgVW5hYmxlIHRvIGNvbnZlcnQgaGV4IHN0cmluZyAke2hleH0gdG8gcmdiIHZhbHVlc2ApO1xuICAgIHJldHVybiBbcGFyc2VJbnQocmdiWzFdLCAxNikgLyAyNTUsIHBhcnNlSW50KHJnYlsyXSwgMTYpIC8gMjU1LCBwYXJzZUludChyZ2JbM10sIDE2KSAvIDI1NV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBudW1iZXJUb1JHQihudW0pIHtcbiAgICBudW0gPSBwYXJzZUludChudW0pO1xuICAgIHJldHVybiBbKChudW0gPj4gMTYpICYgMjU1KSAvIDI1NSwgKChudW0gPj4gOCkgJiAyNTUpIC8gMjU1LCAobnVtICYgMjU1KSAvIDI1NV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNvbG9yKGNvbG9yKSB7XG4gICAgLy8gRW1wdHlcbiAgICBpZiAoY29sb3IgPT09IHVuZGVmaW5lZCkgcmV0dXJuIFswLCAwLCAwXTtcblxuICAgIC8vIERlY2ltYWxcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykgcmV0dXJuIGFyZ3VtZW50cztcblxuICAgIC8vIE51bWJlclxuICAgIGlmICghaXNOYU4oY29sb3IpKSByZXR1cm4gbnVtYmVyVG9SR0IoY29sb3IpO1xuXG4gICAgLy8gSGV4XG4gICAgaWYgKGNvbG9yWzBdID09PSAnIycpIHJldHVybiBoZXhUb1JHQihjb2xvcik7XG5cbiAgICAvLyBOYW1lc1xuICAgIGlmIChOQU1FU1tjb2xvci50b0xvd2VyQ2FzZSgpXSkgcmV0dXJuIGhleFRvUkdCKE5BTUVTW2NvbG9yLnRvTG93ZXJDYXNlKCldKTtcblxuICAgIGNvbnNvbGUud2FybignQ29sb3IgZm9ybWF0IG5vdCByZWNvZ25pc2VkJyk7XG4gICAgcmV0dXJuIFswLCAwLCAwXTtcbn1cbiJdLCJuYW1lcyI6WyJOQU1FUyIsImJsYWNrIiwid2hpdGUiLCJyZWQiLCJncmVlbiIsImJsdWUiLCJmdWNoc2lhIiwiY3lhbiIsInllbGxvdyIsIm9yYW5nZSIsImhleFRvUkdCIiwiaGV4IiwibGVuZ3RoIiwicmdiIiwiZXhlYyIsImNvbnNvbGUiLCJ3YXJuIiwicGFyc2VJbnQiLCJudW1iZXJUb1JHQiIsIm51bSIsInBhcnNlQ29sb3IiLCJjb2xvciIsInVuZGVmaW5lZCIsImFyZ3VtZW50cyIsImlzTmFOIiwidG9Mb3dlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/math/functions/ColorFunc.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/math/functions/EulerFunc.js":
/*!**********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/EulerFunc.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromRotationMatrix: function() { return /* binding */ fromRotationMatrix; }\n/* harmony export */ });\n// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nfunction fromRotationMatrix(out, m) {\n    let order = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"YXZ\";\n    if (order === \"XYZ\") {\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\n        if (Math.abs(m[8]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[2] = Math.atan2(-m[4], m[0]);\n        } else {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[2] = 0;\n        }\n    } else if (order === \"YXZ\") {\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\n        if (Math.abs(m[9]) < 0.99999) {\n            out[1] = Math.atan2(m[8], m[10]);\n            out[2] = Math.atan2(m[1], m[5]);\n        } else {\n            out[1] = Math.atan2(-m[2], m[0]);\n            out[2] = 0;\n        }\n    } else if (order === \"ZXY\") {\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\n        if (Math.abs(m[6]) < 0.99999) {\n            out[1] = Math.atan2(-m[2], m[10]);\n            out[2] = Math.atan2(-m[4], m[5]);\n        } else {\n            out[1] = 0;\n            out[2] = Math.atan2(m[1], m[0]);\n        }\n    } else if (order === \"ZYX\") {\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\n        if (Math.abs(m[2]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[10]);\n            out[2] = Math.atan2(m[1], m[0]);\n        } else {\n            out[0] = 0;\n            out[2] = Math.atan2(-m[4], m[5]);\n        }\n    } else if (order === \"YZX\") {\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\n        if (Math.abs(m[1]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[5]);\n            out[1] = Math.atan2(-m[2], m[0]);\n        } else {\n            out[0] = 0;\n            out[1] = Math.atan2(m[8], m[10]);\n        }\n    } else if (order === \"XZY\") {\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\n        if (Math.abs(m[4]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[1] = Math.atan2(m[8], m[0]);\n        } else {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[1] = 0;\n        }\n    }\n    return out;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL0V1bGVyRnVuYy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsdUVBQXVFO0FBQ2hFLFNBQVNBLG1CQUFtQkMsR0FBRyxFQUFFQyxDQUFDO1FBQUVDLFFBQUFBLGlFQUFRO0lBQy9DLElBQUlBLFVBQVUsT0FBTztRQUNqQkYsR0FBRyxDQUFDLEVBQUUsR0FBR0csS0FBS0MsSUFBSSxDQUFDRCxLQUFLRSxHQUFHLENBQUNGLEtBQUtHLEdBQUcsQ0FBQ0wsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUk7UUFDaEQsSUFBSUUsS0FBS0ksR0FBRyxDQUFDTixDQUFDLENBQUMsRUFBRSxJQUFJLFNBQVM7WUFDMUJELEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEtBQUtLLEtBQUssQ0FBQyxDQUFDUCxDQUFDLENBQUMsRUFBRSxFQUFFQSxDQUFDLENBQUMsR0FBRztZQUNoQ0QsR0FBRyxDQUFDLEVBQUUsR0FBR0csS0FBS0ssS0FBSyxDQUFDLENBQUNQLENBQUMsQ0FBQyxFQUFFLEVBQUVBLENBQUMsQ0FBQyxFQUFFO1FBQ25DLE9BQU87WUFDSEQsR0FBRyxDQUFDLEVBQUUsR0FBR0csS0FBS0ssS0FBSyxDQUFDUCxDQUFDLENBQUMsRUFBRSxFQUFFQSxDQUFDLENBQUMsRUFBRTtZQUM5QkQsR0FBRyxDQUFDLEVBQUUsR0FBRztRQUNiO0lBQ0osT0FBTyxJQUFJRSxVQUFVLE9BQU87UUFDeEJGLEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEtBQUtDLElBQUksQ0FBQyxDQUFDRCxLQUFLRSxHQUFHLENBQUNGLEtBQUtHLEdBQUcsQ0FBQ0wsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUk7UUFDakQsSUFBSUUsS0FBS0ksR0FBRyxDQUFDTixDQUFDLENBQUMsRUFBRSxJQUFJLFNBQVM7WUFDMUJELEdBQUcsQ0FBQyxFQUFFLEdBQUdHLEtBQUtLLEtBQUssQ0FBQ1AsQ0FBQyxD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LENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJO1FBQ2pELElBQUlFLEtBQUtJLEdBQUcsQ0FBQ04sQ0FBQyxDQUFDLEVBQUUsSUFBSSxTQUFTO1lBQzFCRCxHQUFHLENBQUMsRUFBRSxHQUFHRyxLQUFLSyxLQUFLLENBQUNQLENBQUMsQ0FBQyxFQUFFLEVBQUVBLENBQUMsQ0FBQyxFQUFFO1lBQzlCRCxHQUFHLENBQUMsRUFBRSxHQUFHRyxLQUFLSyxLQUFLLENBQUNQLENBQUMsQ0FBQyxFQUFFLEVBQUVBLENBQUMsQ0FBQyxFQUFFO1FBQ2xDLE9BQU87WUFDSEQsR0FBRyxDQUFDLEVBQUUsR0FBR0csS0FBS0ssS0FBSyxDQUFDLENBQUNQLENBQUMsQ0FBQyxFQUFFLEVBQUVBLENBQUMsQ0FBQyxHQUFHO1lBQ2hDRCxHQUFHLENBQUMsRUFBRSxHQUFHO1FBQ2I7SUFDSjtJQUVBLE9BQU9BO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvRXVsZXJGdW5jLmpzP2NiMzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gYXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZClcbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25NYXRyaXgob3V0LCBtLCBvcmRlciA9ICdZWFonKSB7XG4gICAgaWYgKG9yZGVyID09PSAnWFlaJykge1xuICAgICAgICBvdXRbMV0gPSBNYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgobVs4XSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzhdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIoLW1bOV0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIoLW1bNF0sIG1bMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzBdID0gTWF0aC5hdGFuMihtWzZdLCBtWzVdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IDA7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVhaJykge1xuICAgICAgICBvdXRbMF0gPSBNYXRoLmFzaW4oLU1hdGgubWluKE1hdGgubWF4KG1bOV0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVs5XSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKG1bOF0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIobVsxXSwgbVs1XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKC1tWzJdLCBtWzBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IDA7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWlhZJykge1xuICAgICAgICBvdXRbMF0gPSBNYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgobVs2XSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzZdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFsxXSA9IE1hdGguYXRhbjIoLW1bMl0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIoLW1bNF0sIG1bNV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzFdID0gMDtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIobVsxXSwgbVswXSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWllYJykge1xuICAgICAgICBvdXRbMV0gPSBNYXRoLmFzaW4oLU1hdGgubWluKE1hdGgubWF4KG1bMl0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVsyXSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKG1bNl0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIobVsxXSwgbVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMF0gPSAwO1xuICAgICAgICAgICAgb3V0WzJdID0gTWF0aC5hdGFuMigtbVs0XSwgbVs1XSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVpYJykge1xuICAgICAgICBvdXRbMl0gPSBNYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgobVsxXSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzFdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIoLW1bOV0sIG1bNV0pO1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMigtbVsyXSwgbVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMF0gPSAwO1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMihtWzhdLCBtWzEwXSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWFpZJykge1xuICAgICAgICBvdXRbMl0gPSBNYXRoLmFzaW4oLU1hdGgubWluKE1hdGgubWF4KG1bNF0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVs0XSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKG1bNl0sIG1bNV0pO1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMihtWzhdLCBtWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIoLW1bOV0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsxXSA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuIl0sIm5hbWVzIjpbImZyb21Sb3RhdGlvbk1hdHJpeCIsIm91dCIsIm0iLCJvcmRlciIsIk1hdGgiLCJhc2luIiwibWluIiwibWF4IiwiYWJzIiwiYXRhbjIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/math/functions/EulerFunc.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/math/functions/Mat3Func.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/Mat3Func.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: function() { return /* binding */ add; },\n/* harmony export */   copy: function() { return /* binding */ copy; },\n/* harmony export */   determinant: function() { return /* binding */ determinant; },\n/* harmony export */   fromMat4: function() { return /* binding */ fromMat4; },\n/* harmony export */   fromQuat: function() { return /* binding */ fromQuat; },\n/* harmony export */   identity: function() { return /* binding */ identity; },\n/* harmony export */   invert: function() { return /* binding */ invert; },\n/* harmony export */   multiply: function() { return /* binding */ multiply; },\n/* harmony export */   multiplyScalar: function() { return /* binding */ multiplyScalar; },\n/* harmony export */   normalFromMat4: function() { return /* binding */ normalFromMat4; },\n/* harmony export */   projection: function() { return /* binding */ projection; },\n/* harmony export */   rotate: function() { return /* binding */ rotate; },\n/* harmony export */   scale: function() { return /* binding */ scale; },\n/* harmony export */   set: function() { return /* binding */ set; },\n/* harmony export */   subtract: function() { return /* binding */ subtract; },\n/* harmony export */   translate: function() { return /* binding */ translate; },\n/* harmony export */   transpose: function() { return /* binding */ transpose; }\n/* harmony export */ });\nconst EPSILON = 0.000001;\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */ function fromMat4(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */ function fromQuat(out, q) {\n    let x = q[0], y = q[1], z = q[2], w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n    return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */ function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */ function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */ function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n    return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */ function invert(out, a) {\n    let a00 = a[0], a01 = a[1], a02 = a[2];\n    let a10 = a[3], a11 = a[4], a12 = a[5];\n    let a20 = a[6], a21 = a[7], a22 = a[8];\n    let b01 = a22 * a11 - a12 * a21;\n    let b11 = -a22 * a10 + a12 * a20;\n    let b21 = a21 * a10 - a11 * a20;\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */ function determinant(a) {\n    let a00 = a[0], a01 = a[1], a02 = a[2];\n    let a10 = a[3], a11 = a[4], a12 = a[5];\n    let a20 = a[6], a21 = a[7], a22 = a[8];\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */ function multiply(out, a, b) {\n    let a00 = a[0], a01 = a[1], a02 = a[2];\n    let a10 = a[3], a11 = a[4], a12 = a[5];\n    let a20 = a[6], a21 = a[7], a22 = a[8];\n    let b00 = b[0], b01 = b[1], b02 = b[2];\n    let b10 = b[3], b11 = b[4], b12 = b[5];\n    let b20 = b[6], b21 = b[7], b22 = b[8];\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */ function translate(out, a, v) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], x = v[0], y = v[1];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */ function rotate(out, a, rad) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], s = Math.sin(rad), c = Math.cos(rad);\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/ function scale(out, a, v) {\n    let x = v[0], y = v[1];\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */ function normalFromMat4(out, a) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */ function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */ function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/math/functions/Mat3Func.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/math/functions/Mat4Func.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/Mat4Func.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: function() { return /* binding */ add; },\n/* harmony export */   compose: function() { return /* binding */ compose; },\n/* harmony export */   copy: function() { return /* binding */ copy; },\n/* harmony export */   decompose: function() { return /* binding */ decompose; },\n/* harmony export */   determinant: function() { return /* binding */ determinant; },\n/* harmony export */   fromQuat: function() { return /* binding */ fromQuat; },\n/* harmony export */   fromRotationTranslationScale: function() { return /* binding */ fromRotationTranslationScale; },\n/* harmony export */   getMaxScaleOnAxis: function() { return /* binding */ getMaxScaleOnAxis; },\n/* harmony export */   getRotation: function() { return /* binding */ getRotation; },\n/* harmony export */   getScaling: function() { return /* binding */ getScaling; },\n/* harmony export */   getTranslation: function() { return /* binding */ getTranslation; },\n/* harmony export */   identity: function() { return /* binding */ identity; },\n/* harmony export */   invert: function() { return /* binding */ invert; },\n/* harmony export */   multiply: function() { return /* binding */ multiply; },\n/* harmony export */   multiplyScalar: function() { return /* binding */ multiplyScalar; },\n/* harmony export */   ortho: function() { return /* binding */ ortho; },\n/* harmony export */   perspective: function() { return /* binding */ perspective; },\n/* harmony export */   rotate: function() { return /* binding */ rotate; },\n/* harmony export */   scale: function() { return /* binding */ scale; },\n/* harmony export */   set: function() { return /* binding */ set; },\n/* harmony export */   subtract: function() { return /* binding */ subtract; },\n/* harmony export */   targetTo: function() { return /* binding */ targetTo; },\n/* harmony export */   translate: function() { return /* binding */ translate; },\n/* harmony export */   transpose: function() { return /* binding */ transpose; }\n/* harmony export */ });\n/* harmony import */ var _Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec3Func.js */ \"(app-pages-browser)/./node_modules/ogl/src/math/functions/Vec3Func.js\");\n\nconst EPSILON = 0.000001;\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */ function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */ function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */ function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1], a02 = a[2], a03 = a[3];\n        let a12 = a[6], a13 = a[7];\n        let a23 = a[11];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n    return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */ function invert(out, a) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n    return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */ function determinant(a) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */ function multiply(out, a, b) {\n    let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    // Cache only the current line of the second matrix\n    let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */ function translate(out, a, v) {\n    let x = v[0], y = v[1], z = v[2];\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n    return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/ function scale(out, a, v) {\n    let x = v[0], y = v[1], z = v[2];\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */ function rotate(out, a, rad, axis) {\n    let x = axis[0], y = axis[1], z = axis[2];\n    let len = Math.hypot(x, y, z);\n    let s, c, t;\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    let b00, b01, b02;\n    let b10, b11, b12;\n    let b20, b21, b22;\n    if (Math.abs(len) < EPSILON) {\n        return null;\n    }\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */ function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n    return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */ function getScaling(out, mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n    return out;\n}\nfunction getMaxScaleOnAxis(mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\n    return Math.sqrt(Math.max(x, y, z));\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */ const getRotation = function() {\n    const temp = [\n        1,\n        1,\n        1\n    ];\n    return function(out, mat) {\n        let scaling = temp;\n        getScaling(scaling, mat);\n        let is1 = 1 / scaling[0];\n        let is2 = 1 / scaling[1];\n        let is3 = 1 / scaling[2];\n        let sm11 = mat[0] * is1;\n        let sm12 = mat[1] * is2;\n        let sm13 = mat[2] * is3;\n        let sm21 = mat[4] * is1;\n        let sm22 = mat[5] * is2;\n        let sm23 = mat[6] * is3;\n        let sm31 = mat[8] * is1;\n        let sm32 = mat[9] * is2;\n        let sm33 = mat[10] * is3;\n        let trace = sm11 + sm22 + sm33;\n        let S = 0;\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (sm23 - sm32) / S;\n            out[1] = (sm31 - sm13) / S;\n            out[2] = (sm12 - sm21) / S;\n        } else if (sm11 > sm22 && sm11 > sm33) {\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n            out[3] = (sm23 - sm32) / S;\n            out[0] = 0.25 * S;\n            out[1] = (sm12 + sm21) / S;\n            out[2] = (sm31 + sm13) / S;\n        } else if (sm22 > sm33) {\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n            out[3] = (sm31 - sm13) / S;\n            out[0] = (sm12 + sm21) / S;\n            out[1] = 0.25 * S;\n            out[2] = (sm23 + sm32) / S;\n        } else {\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n            out[3] = (sm12 - sm21) / S;\n            out[0] = (sm31 + sm13) / S;\n            out[1] = (sm23 + sm32) / S;\n            out[2] = 0.25 * S;\n        }\n        return out;\n    };\n}();\n/**\n * From glTF-Transform\n * https://github.com/donmccurdy/glTF-Transform/blob/main/packages/core/src/utils/math-utils.ts\n *\n * Decompose a mat4 to TRS properties.\n *\n * Equivalent to the Matrix4 decompose() method in three.js, and intentionally not using the\n * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param {mat4} srcMat Matrix element, to be decomposed to TRS properties.\n * @param {quat4} dstRotation Rotation element, to be overwritten.\n * @param {vec3} dstTranslation Translation element, to be overwritten.\n * @param {vec3} dstScale Scale element, to be overwritten\n */ function decompose(srcMat, dstRotation, dstTranslation, dstScale) {\n    let sx = _Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.length([\n        srcMat[0],\n        srcMat[1],\n        srcMat[2]\n    ]);\n    const sy = _Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.length([\n        srcMat[4],\n        srcMat[5],\n        srcMat[6]\n    ]);\n    const sz = _Vec3Func_js__WEBPACK_IMPORTED_MODULE_0__.length([\n        srcMat[8],\n        srcMat[9],\n        srcMat[10]\n    ]);\n    // if determine is negative, we need to invert one scale\n    const det = determinant(srcMat);\n    if (det < 0) sx = -sx;\n    dstTranslation[0] = srcMat[12];\n    dstTranslation[1] = srcMat[13];\n    dstTranslation[2] = srcMat[14];\n    // scale the rotation part\n    const _m1 = srcMat.slice();\n    const invSX = 1 / sx;\n    const invSY = 1 / sy;\n    const invSZ = 1 / sz;\n    _m1[0] *= invSX;\n    _m1[1] *= invSX;\n    _m1[2] *= invSX;\n    _m1[4] *= invSY;\n    _m1[5] *= invSY;\n    _m1[6] *= invSY;\n    _m1[8] *= invSZ;\n    _m1[9] *= invSZ;\n    _m1[10] *= invSZ;\n    getRotation(dstRotation, _m1);\n    dstScale[0] = sx;\n    dstScale[1] = sy;\n    dstScale[2] = sz;\n}\n/**\n * From glTF-Transform\n * https://github.com/donmccurdy/glTF-Transform/blob/main/packages/core/src/utils/math-utils.ts\n *\n * Compose TRS properties to a mat4.\n *\n * Equivalent to the Matrix4 compose() method in three.js, and intentionally not using the\n * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param {mat4} dstMat Matrix element, to be modified and returned.\n * @param {quat4} srcRotation Rotation element of matrix.\n * @param {vec3} srcTranslation Translation element of matrix.\n * @param {vec3} srcScale Scale element of matrix.\n * @returns {mat4} dstMat, overwritten to mat4 equivalent of given TRS properties.\n */ function compose(dstMat, srcRotation, srcTranslation, srcScale) {\n    const te = dstMat;\n    const x = srcRotation[0], y = srcRotation[1], z = srcRotation[2], w = srcRotation[3];\n    const x2 = x + x, y2 = y + y, z2 = z + z;\n    const xx = x * x2, xy = x * y2, xz = x * z2;\n    const yy = y * y2, yz = y * z2, zz = z * z2;\n    const wx = w * x2, wy = w * y2, wz = w * z2;\n    const sx = srcScale[0], sy = srcScale[1], sz = srcScale[2];\n    te[0] = (1 - (yy + zz)) * sx;\n    te[1] = (xy + wz) * sx;\n    te[2] = (xz - wy) * sx;\n    te[3] = 0;\n    te[4] = (xy - wz) * sy;\n    te[5] = (1 - (xx + zz)) * sy;\n    te[6] = (yz + wx) * sy;\n    te[7] = 0;\n    te[8] = (xz + wy) * sz;\n    te[9] = (yz - wx) * sz;\n    te[10] = (1 - (xx + yy)) * sz;\n    te[11] = 0;\n    te[12] = srcTranslation[0];\n    te[13] = srcTranslation[1];\n    te[14] = srcTranslation[2];\n    te[15] = 1;\n    return te;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */ function fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    let x = q[0], y = q[1], z = q[2], w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = s[0];\n    let sy = s[1];\n    let sz = s[2];\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */ function fromQuat(out, q) {\n    let x = q[0], y = q[1], z = q[2], w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */ function perspective(out, fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 2 * far * near * nf;\n    out[15] = 0;\n    return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */ function ortho(out, left, right, bottom, top, near, far) {\n    let lr = 1 / (left - right);\n    let bt = 1 / (bottom - top);\n    let nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} target Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */ function targetTo(out, eye, target, up) {\n    let eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];\n    let z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len === 0) {\n        // eye and target are in the same position\n        z2 = 1;\n    } else {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n    let x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len === 0) {\n        // up and z are parallel\n        if (upz) {\n            upx += 1e-6;\n        } else if (upy) {\n            upz += 1e-6;\n        } else {\n            upy += 1e-6;\n        }\n        x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;\n        len = x0 * x0 + x1 * x1 + x2 * x2;\n    }\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */ function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/math/functions/Mat4Func.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/math/functions/QuatFunc.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/QuatFunc.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: function() { return /* binding */ add; },\n/* harmony export */   conjugate: function() { return /* binding */ conjugate; },\n/* harmony export */   copy: function() { return /* binding */ copy; },\n/* harmony export */   dot: function() { return /* binding */ dot; },\n/* harmony export */   fromEuler: function() { return /* binding */ fromEuler; },\n/* harmony export */   fromMat3: function() { return /* binding */ fromMat3; },\n/* harmony export */   identity: function() { return /* binding */ identity; },\n/* harmony export */   invert: function() { return /* binding */ invert; },\n/* harmony export */   length: function() { return /* binding */ length; },\n/* harmony export */   lerp: function() { return /* binding */ lerp; },\n/* harmony export */   multiply: function() { return /* binding */ multiply; },\n/* harmony export */   normalize: function() { return /* binding */ normalize; },\n/* harmony export */   rotateX: function() { return /* binding */ rotateX; },\n/* harmony export */   rotateY: function() { return /* binding */ rotateY; },\n/* harmony export */   rotateZ: function() { return /* binding */ rotateZ; },\n/* harmony export */   scale: function() { return /* binding */ scale; },\n/* harmony export */   set: function() { return /* binding */ set; },\n/* harmony export */   setAxisAngle: function() { return /* binding */ setAxisAngle; },\n/* harmony export */   slerp: function() { return /* binding */ slerp; }\n/* harmony export */ });\n/* harmony import */ var _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vec4Func.js */ \"(app-pages-browser)/./node_modules/ogl/src/math/functions/Vec4Func.js\");\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */ function identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/ function setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    let s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */ function multiply(out, a, b) {\n    let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */ function rotateX(out, a, rad) {\n    rad *= 0.5;\n    let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    let bx = Math.sin(rad), bw = Math.cos(rad);\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */ function rotateY(out, a, rad) {\n    rad *= 0.5;\n    let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    let by = Math.sin(rad), bw = Math.cos(rad);\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */ function rotateZ(out, a, rad) {\n    rad *= 0.5;\n    let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    let bz = Math.sin(rad), bw = Math.cos(rad);\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */ function slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n    let omega, cosom, sinom, scale0, scale1;\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */ function invert(out, a) {\n    let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    let invDot = dot ? 1.0 / dot : 0;\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */ function conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */ function fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    let fTrace = m[0] + m[4] + m[8];\n    let fRoot;\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        let j = (i + 1) % 3;\n        let k = (i + 2) % 3;\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n    return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */ function fromEuler(out, euler) {\n    let order = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"YXZ\";\n    let sx = Math.sin(euler[0] * 0.5);\n    let cx = Math.cos(euler[0] * 0.5);\n    let sy = Math.sin(euler[1] * 0.5);\n    let cy = Math.cos(euler[1] * 0.5);\n    let sz = Math.sin(euler[2] * 0.5);\n    let cz = Math.cos(euler[2] * 0.5);\n    if (order === \"XYZ\") {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === \"YXZ\") {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === \"ZXY\") {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === \"ZYX\") {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === \"YZX\") {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === \"XZY\") {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    }\n    return out;\n}\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */ const copy = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */ const set = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */ const add = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.add;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */ const scale = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */ const dot = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */ const lerp = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */ const length = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.length;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */ const normalize = _Vec4Func_js__WEBPACK_IMPORTED_MODULE_0__.normalize;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/math/functions/QuatFunc.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/math/functions/Vec3Func.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/Vec3Func.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: function() { return /* binding */ add; },\n/* harmony export */   angle: function() { return /* binding */ angle; },\n/* harmony export */   copy: function() { return /* binding */ copy; },\n/* harmony export */   cross: function() { return /* binding */ cross; },\n/* harmony export */   distance: function() { return /* binding */ distance; },\n/* harmony export */   divide: function() { return /* binding */ divide; },\n/* harmony export */   dot: function() { return /* binding */ dot; },\n/* harmony export */   exactEquals: function() { return /* binding */ exactEquals; },\n/* harmony export */   inverse: function() { return /* binding */ inverse; },\n/* harmony export */   length: function() { return /* binding */ length; },\n/* harmony export */   lerp: function() { return /* binding */ lerp; },\n/* harmony export */   multiply: function() { return /* binding */ multiply; },\n/* harmony export */   negate: function() { return /* binding */ negate; },\n/* harmony export */   normalize: function() { return /* binding */ normalize; },\n/* harmony export */   scale: function() { return /* binding */ scale; },\n/* harmony export */   scaleRotateMat4: function() { return /* binding */ scaleRotateMat4; },\n/* harmony export */   set: function() { return /* binding */ set; },\n/* harmony export */   smoothLerp: function() { return /* binding */ smoothLerp; },\n/* harmony export */   squaredDistance: function() { return /* binding */ squaredDistance; },\n/* harmony export */   squaredLength: function() { return /* binding */ squaredLength; },\n/* harmony export */   subtract: function() { return /* binding */ subtract; },\n/* harmony export */   transformMat3: function() { return /* binding */ transformMat3; },\n/* harmony export */   transformMat4: function() { return /* binding */ transformMat4; },\n/* harmony export */   transformQuat: function() { return /* binding */ transformQuat; }\n/* harmony export */ });\nconst EPSILON = 0.000001;\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */ function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */ function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */ function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */ function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */ function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */ function distance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */ function squaredDistance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */ function squaredLength(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */ function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */ function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */ function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */ function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */ function cross(out, a, b) {\n    let ax = a[0], ay = a[1], az = a[2];\n    let bx = b[0], by = b[1], bz = b[2];\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */ function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n/**\n * Performs a frame rate independant, linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} decay decay constant for interpolation. useful range between 1 and 25, from slow to fast.\n * @param {Number} dt delta time\n * @returns {vec3} out\n */ function smoothLerp(out, a, b, decay, dt) {\n    const exp = Math.exp(-decay * dt);\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = b[0] + (ax - b[0]) * exp;\n    out[1] = b[1] + (ay - b[1]) * exp;\n    out[2] = b[2] + (az - b[2]) * exp;\n    return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */ function transformMat4(out, a, m) {\n    let x = a[0], y = a[1], z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n/**\n * Same as above but doesn't apply translation.\n * Useful for rays.\n */ function scaleRotateMat4(out, a, m) {\n    let x = a[0], y = a[1], z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n    return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */ function transformMat3(out, a, m) {\n    let x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */ function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let x = a[0], y = a[1], z = a[2];\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let uvx = qy * z - qz * y;\n    let uvy = qz * x - qx * z;\n    let uvz = qx * y - qy * x;\n    let uuvx = qy * uvz - qz * uvy;\n    let uuvy = qz * uvx - qx * uvz;\n    let uuvz = qx * uvy - qy * uvx;\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */ const angle = function() {\n    const tempA = [\n        0,\n        0,\n        0\n    ];\n    const tempB = [\n        0,\n        0,\n        0\n    ];\n    return function(a, b) {\n        copy(tempA, a);\n        copy(tempB, b);\n        normalize(tempA, tempA);\n        normalize(tempB, tempB);\n        let cosine = dot(tempA, tempB);\n        if (cosine > 1.0) {\n            return 0;\n        } else if (cosine < -1.0) {\n            return Math.PI;\n        } else {\n            return Math.acos(cosine);\n        }\n    };\n}();\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */ function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/math/functions/Vec3Func.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ogl/src/math/functions/Vec4Func.js":
/*!*********************************************************!*\
  !*** ./node_modules/ogl/src/math/functions/Vec4Func.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: function() { return /* binding */ add; },\n/* harmony export */   copy: function() { return /* binding */ copy; },\n/* harmony export */   dot: function() { return /* binding */ dot; },\n/* harmony export */   length: function() { return /* binding */ length; },\n/* harmony export */   lerp: function() { return /* binding */ lerp; },\n/* harmony export */   normalize: function() { return /* binding */ normalize; },\n/* harmony export */   scale: function() { return /* binding */ scale; },\n/* harmony export */   set: function() { return /* binding */ set; }\n/* harmony export */ });\nconst EPSILON = 0.000001;\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */ function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */ function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */ function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */ function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */ function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */ function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL1ZlYzRGdW5jLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsTUFBTUEsVUFBVTtBQUVoQjs7Ozs7O0NBTUMsR0FDTSxTQUFTQyxLQUFLQyxHQUFHLEVBQUVDLENBQUM7SUFDdkJELEdBQUcsQ0FBQyxFQUFFLEdBQUdDLENBQUMsQ0FBQyxFQUFFO0lBQ2JELEdBQUcsQ0FBQyxFQUFFLEdBQUdDLENBQUMsQ0FBQyxFQUFFO0lBQ2JELEdBQUcsQ0FBQyxFQUFFLEdBQUdDLENBQUMsQ0FBQyxFQUFFO0lBQ2JELEdBQUcsQ0FBQyxFQUFFLEdBQUdDLENBQUMsQ0FBQyxFQUFFO0lBQ2IsT0FBT0Q7QUFDWDtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNNLFNBQVNFLElBQUlGLEdBQUcsRUFBRUcsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQztJQUMvQk4sR0FBRyxDQUFDLEVBQUUsR0FBR0c7SUFDVEgsR0FBRyxDQUFDLEVBQUUsR0FBR0k7SUFDVEosR0FBRyxDQUFDLEVBQUUsR0FBR0s7SUFDVEwsR0FBRyxDQUFDLEVBQUUsR0FBR007SUFDVCxPQUFPTjtBQUNYO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNPLElBQUlQLEdBQUcsRUFBRUMsQ0FBQyxFQUFFTyxDQUFDO0lBQ3pCUixHQUFHLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRSxHQUFHTyxDQUFDLENBQUMsRUFBRTtJQUNwQlIsR0FBRyxDQUFDLEVBQUUsR0FBR0MsQ0FBQyxDQUFDLEVBQUUsR0FBR08sQ0FBQyxDQUFDLEVBQUU7SUFDcEJSLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLENBQUMsQ0FBQyxFQUFFLEdBQUdPLENBQUMsQ0FBQyxFQUFFO0lBQ3BCUixHQUFHLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRSxHQUFHTyxDQUFDLENBQUMsRUFBRTtJQUNwQixPQUFPUjtBQUNYO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNTLE1BQU1ULEdBQUcsRUFBRUMsQ0FBQyxFQUFFTyxDQUFDO0lBQzNCUixHQUFHLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRSxHQUFHTztJQUNoQlIsR0FBRyxDQUFDLEVBQUUsR0FBR0MsQ0FBQyxDQUFDLEVBQUUsR0FBR087SUFDaEJSLEdBQUcsQ0FBQyxFQUFFLEdBQUdDLENBQUMsQ0FBQyxFQUFFLEdBQUdPO0lBQ2hCUixHQUFHLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRSxHQUFHTztJQUNoQixPQUFPUjtBQUNYO0FBRUE7Ozs7O0NBS0MsR0FDTSxTQUFTVSxPQUFPVCxDQUFDO0lBQ3BCLElBQUlFLElBQUlGLENBQUMsQ0FBQyxFQUFFO0lBQ1osSUFBSUcsSUFBSUgsQ0FBQyxDQUFDLEVBQUU7SUFDWixJQUFJSSxJQUFJSixDQUFDLENBQUMsRUFBRTtJQUNaLElBQUlLLElBQUlMLENBQUMsQ0FBQyxFQUFFO0lBQ1osT0FBT1UsS0FBS0MsSUFBSSxDQUFDVCxJQUFJQSxJQUFJQyxJQUFJQSxJQUFJQyxJQUFJQSxJQUFJQyxJQUFJQTtBQUNqRDtBQUVBOzs7Ozs7Q0FNQyxHQUNNLFNBQVNPLFVBQVViLEdBQUcsRUFBRUMsQ0FBQztJQUM1QixJQUFJRSxJQUFJRixDQUFDLENBQUMsRUFBRTtJQUNaLElBQUlHLElBQUlILENBQUMsQ0FBQyxFQUFFO0lBQ1osSUFBSUksSUFBSUosQ0FBQyxDQUFDLEVBQUU7SUFDWixJQUFJSyxJQUFJTCxDQUFDLENBQUMsRUFBRTtJQUNaLElBQUlhLE1BQU1YLElBQUlBLElBQUlDLElBQUlBLElBQUlDLElBQUlBLElBQUlDLElBQUlBO0lBQ3RDLElBQUlRLE1BQU0sR0FBRztRQUNUQSxNQUFNLElBQUlILEtBQUtDLElBQUksQ0FBQ0U7SUFDeEI7SUFDQWQsR0FBRyxDQUFDLEVBQUUsR0FBR0csSUFBSVc7SUFDYmQsR0FBRyxDQUFDLEVBQUUsR0FBR0ksSUFBSVU7SUFDYmQsR0FBRyxDQUFDLEVBQUUsR0FBR0ssSUFBSVM7SUFDYmQsR0FBRyxDQUFDLEVBQUUsR0FBR00sSUFBSVE7SUFDYixPQUFPZDtBQUNYO0FBRUE7Ozs7OztDQU1DLEdBQ00sU0FBU2UsSUFBSWQsQ0FBQyxFQUFFTyxDQUFDO0lBQ3BCLE9BQU9QLENBQUMsQ0FBQyxFQUFFLEdBQUdPLENBQUMsQ0FBQyxFQUFFLEdBQUdQLENBQUMsQ0FBQyxFQUFFLEdBQUdPLENBQUMsQ0FBQyxFQUFFLEdBQUdQLENBQUMsQ0FBQyxFQUFFLEdBQUdPLENBQUMsQ0FBQyxFQUFFLEdBQUdQLENBQUMsQ0FBQyxFQUFFLEdBQUdPLENBQUMsQ0FBQyxFQUFFO0FBQ2hFO0FBRUE7Ozs7Ozs7O0NBUUMsR0FDTSxTQUFTUSxLQUFLaEIsR0FBRyxFQUFFQyxDQUFDLEVBQUVPLENBQUMsRUFBRVMsQ0FBQztJQUM3QixJQUFJQyxLQUFLakIsQ0FBQyxDQUFDLEVBQUU7SUFDYixJQUFJa0IsS0FBS2xCLENBQUMsQ0FBQyxFQUFFO0lBQ2IsSUFBSW1CLEtBQUtuQixDQUFDLENBQUMsRUFBRTtJQUNiLElBQUlvQixLQUFLcEIsQ0FBQyxDQUFDLEVBQUU7SUFDYkQsR0FBRyxDQUFDLEVBQUUsR0FBR2tCLEtBQUtELElBQUtULENBQUFBLENBQUMsQ0FBQyxFQUFFLEdBQUdVLEVBQUM7SUFDM0JsQixHQUFHLENBQUMsRUFBRSxHQUFHbUIsS0FBS0YsSUFBS1QsQ0FBQUEsQ0FBQyxDQUFDLEVBQUUsR0FBR1csRUFBQztJQUMzQm5CLEdBQUcsQ0FBQyxFQUFFLEdBQUdvQixLQUFLSCxJQUFLVCxDQUFBQSxDQUFDLENBQUMsRUFBRSxHQUFHWSxFQUFDO0lBQzNCcEIsR0FBRyxDQUFDLEVBQUUsR0FBR3FCLEtBQUtKLElBQUtULENBQUFBLENBQUMsQ0FBQyxFQUFFLEdBQUdhLEVBQUM7SUFDM0IsT0FBT3JCO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvVmVjNEZ1bmMuanM/OGFkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBFUFNJTE9OID0gMC4wMDAwMDE7XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzQgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzQgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSwgeiwgdykge1xuICAgIG91dFswXSA9IHg7XG4gICAgb3V0WzFdID0geTtcbiAgICBvdXRbMl0gPSB6O1xuICAgIG91dFszXSA9IHc7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBBZGRzIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gICAgb3V0WzNdID0gYVszXSArIGJbM107XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTY2FsZXMgYSB2ZWM0IGJ5IGEgc2NhbGFyIG51bWJlclxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIHZlY3RvciB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSB2ZWN0b3IgYnlcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKiBiO1xuICAgIG91dFsxXSA9IGFbMV0gKiBiO1xuICAgIG91dFsyXSA9IGFbMl0gKiBiO1xuICAgIG91dFszXSA9IGFbM10gKiBiO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aChhKSB7XG4gICAgbGV0IHggPSBhWzBdO1xuICAgIGxldCB5ID0gYVsxXTtcbiAgICBsZXQgeiA9IGFbMl07XG4gICAgbGV0IHcgPSBhWzNdO1xuICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHcpO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHZlYzRcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBub3JtYWxpemVcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGEpIHtcbiAgICBsZXQgeCA9IGFbMF07XG4gICAgbGV0IHkgPSBhWzFdO1xuICAgIGxldCB6ID0gYVsyXTtcbiAgICBsZXQgdyA9IGFbM107XG4gICAgbGV0IGxlbiA9IHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xuICAgIGlmIChsZW4gPiAwKSB7XG4gICAgICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICB9XG4gICAgb3V0WzBdID0geCAqIGxlbjtcbiAgICBvdXRbMV0gPSB5ICogbGVuO1xuICAgIG91dFsyXSA9IHogKiBsZW47XG4gICAgb3V0WzNdID0gdyAqIGxlbjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRvdChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXSArIGFbM10gKiBiWzNdO1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjNCdzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgICBsZXQgYXggPSBhWzBdO1xuICAgIGxldCBheSA9IGFbMV07XG4gICAgbGV0IGF6ID0gYVsyXTtcbiAgICBsZXQgYXcgPSBhWzNdO1xuICAgIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xuICAgIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xuICAgIG91dFsyXSA9IGF6ICsgdCAqIChiWzJdIC0gYXopO1xuICAgIG91dFszXSA9IGF3ICsgdCAqIChiWzNdIC0gYXcpO1xuICAgIHJldHVybiBvdXQ7XG59XG4iXSwibmFtZXMiOlsiRVBTSUxPTiIsImNvcHkiLCJvdXQiLCJhIiwic2V0IiwieCIsInkiLCJ6IiwidyIsImFkZCIsImIiLCJzY2FsZSIsImxlbmd0aCIsIk1hdGgiLCJzcXJ0Iiwibm9ybWFsaXplIiwibGVuIiwiZG90IiwibGVycCIsInQiLCJheCIsImF5IiwiYXoiLCJhdyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ogl/src/math/functions/Vec4Func.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uvcanvas/dist/components/novatrix/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/uvcanvas/dist/components/novatrix/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Novatrix: function() { return /* binding */ Novatrix; }\n/* harmony export */ });\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ogl */ \"(app-pages-browser)/./node_modules/ogl/src/core/Renderer.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ogl */ \"(app-pages-browser)/./node_modules/ogl/src/extras/Triangle.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ogl */ \"(app-pages-browser)/./node_modules/ogl/src/core/Program.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ogl */ \"(app-pages-browser)/./node_modules/ogl/src/math/Color.js\");\n/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ogl */ \"(app-pages-browser)/./node_modules/ogl/src/core/Mesh.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* __next_internal_client_entry_do_not_use__ Novatrix auto */ var _s = $RefreshSig$();\n\n\nvar styles = {\n    \"gradient-canvas\": \"uvc__gradient-canvas\"\n};\nvar vert = \"\\nattribute vec2 uv;\\nattribute vec2 position;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = vec4(position, 0, 1);\\n}\";\nvar frag = \"precision highp float;\\n\\nuniform float uTime;\\nuniform vec3 uColor;\\nuniform vec3 uResolution;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n    float mr = min(uResolution.x, uResolution.y);\\n    vec2 uv = (vUv.xy * 2.0 - 1.0) * uResolution.xy / mr;\\n\\n    float d = -uTime * 0.5;\\n    float a = 0.0;\\n    for (float i = 0.0; i < 8.0; ++i) {\\n        a += cos(i - d - a * uv.x);\\n        d += sin(uv.y * i + a);\\n    }\\n    d += uTime * 0.5;\\n    vec3 col = vec3(cos(uv * vec2(d, a)) * 0.6 + 0.4, cos(a + d) * 0.5 + 0.5);\\n    col = cos(col * cos(vec3(d, a, 2.5)) * 0.5 + 0.5);\\n    gl_FragColor = vec4(col,1.0);\\n\\n}\";\nfunction Novatrix(props) {\n    _s();\n    const ctnDom = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { color, ...rest } = props;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!ctnDom.current) {\n            return;\n        }\n        const ctn = ctnDom.current;\n        const renderer = new ogl__WEBPACK_IMPORTED_MODULE_1__.Renderer();\n        const gl = renderer.gl;\n        gl.clearColor(1, 1, 1, 1);\n        function resize() {\n            const scale = 1;\n            // camera.perspective({\n            //   aspect: gl.canvas.width / gl.canvas.height,\n            // });\n            renderer.setSize(ctn.offsetWidth * scale, ctn.offsetHeight * scale);\n        }\n        window.addEventListener(\"resize\", resize, false);\n        resize();\n        const geometry = new ogl__WEBPACK_IMPORTED_MODULE_2__.Triangle(gl);\n        const program = new ogl__WEBPACK_IMPORTED_MODULE_3__.Program(gl, {\n            vertex: vert,\n            fragment: frag,\n            uniforms: {\n                uTime: {\n                    value: 0\n                },\n                uColor: {\n                    value: new ogl__WEBPACK_IMPORTED_MODULE_4__.Color(...color || [\n                        0.3,\n                        0.2,\n                        0.5\n                    ])\n                },\n                uResolution: {\n                    value: new ogl__WEBPACK_IMPORTED_MODULE_4__.Color(gl.canvas.width, gl.canvas.height, gl.canvas.width / gl.canvas.height)\n                }\n            }\n        });\n        const mesh = new ogl__WEBPACK_IMPORTED_MODULE_5__.Mesh(gl, {\n            geometry,\n            program\n        });\n        let animateId;\n        animateId = requestAnimationFrame(update);\n        function update(t) {\n            animateId = requestAnimationFrame(update);\n            program.uniforms.uTime.value = t * 0.001;\n            // Don't need a camera if camera uniforms aren't required\n            renderer.render({\n                scene: mesh\n            });\n        }\n        ctn.appendChild(gl.canvas);\n        return ()=>{\n            var _gl_getExtension;\n            cancelAnimationFrame(animateId);\n            window.removeEventListener(\"resize\", resize);\n            ctn.removeChild(gl.canvas);\n            (_gl_getExtension = gl.getExtension(\"WEBGL_lose_context\")) === null || _gl_getExtension === void 0 ? void 0 : _gl_getExtension.loseContext();\n        };\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: ctnDom,\n        className: styles.gradientCanvas,\n        style: {\n            width: \"100%\",\n            height: \"100%\"\n        },\n        ...rest\n    });\n}\n_s(Novatrix, \"RK9NRNXyqwE64a4o6Ka2phRjmok=\");\n_c = Novatrix;\n\nvar _c;\n$RefreshReg$(_c, \"Novatrix\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dmNhbnZhcy9kaXN0L2NvbXBvbmVudHMvbm92YXRyaXgvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDK0Q7QUFDZDtBQUVqRCxJQUFJUSxTQUFTO0lBQUMsbUJBQWtCO0FBQXNCO0FBRXRELElBQUlDLE9BQU87QUFFWCxJQUFJQyxPQUFPO0FBRVgsU0FBU0MsU0FBU0MsS0FBSzs7SUFDbkIsTUFBTUMsU0FBU1AsNkNBQU1BLENBQUM7SUFDdEIsTUFBTSxFQUFFUSxLQUFLLEVBQUUsR0FBR0MsTUFBTSxHQUFHSDtJQUMzQkwsZ0RBQVNBLENBQUM7UUFDTixJQUFJLENBQUNNLE9BQU9HLE9BQU8sRUFBRTtZQUNqQjtRQUNKO1FBQ0EsTUFBTUMsTUFBTUosT0FBT0csT0FBTztRQUMxQixNQUFNRSxXQUFXLElBQUlsQix5Q0FBUUE7UUFDN0IsTUFBTW1CLEtBQUtELFNBQVNDLEVBQUU7UUFDdEJBLEdBQUdDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsR0FBRztRQUN2QixTQUFTQztZQUNMLE1BQU1DLFFBQVE7WUFDZCx1QkFBdUI7WUFDdkIsZ0RBQWdEO1lBQ2hELE1BQU07WUFDTkosU0FBU0ssT0FBTyxDQUFDTixJQUFJTyxXQUFXLEdBQUdGLE9BQU9MLElBQUlRLFlBQVksR0FBR0g7UUFDakU7UUFDQUksT0FBT0MsZ0JBQWdCLENBQUMsVUFBVU4sUUFBUTtRQUMxQ0E7UUFDQSxNQUFNTyxXQUFXLElBQUkzQix5Q0FBUUEsQ0FBQ2tCO1FBQzlCLE1BQU1VLFVBQVUsSUFBSTNCLHdDQUFPQSxDQUFDaUIsSUFBSTtZQUM1QlcsUUFBUXJCO1lBQ1JzQixVQUFVckI7WUFDVnNCLFVBQVU7Z0JBQ05DLE9BQU87b0JBQUVDLE9BQU87Z0JBQUU7Z0JBQ2xCQyxRQUFRO29CQUFFRCxPQUFPLElBQUkvQixzQ0FBS0EsSUFBS1csU0FBUzt3QkFBQzt3QkFBSzt3QkFBSztxQkFBSTtnQkFBRztnQkFDMURzQixhQUFhO29CQUNURixPQUFPLElBQUkvQixzQ0FBS0EsQ0FBQ2dCLEdBQUdrQixNQUFNLENBQUNDLEtBQUssRUFBRW5CLEdBQUdrQixNQUFNLENBQUNFLE1BQU0sRUFBRXBCLEdBQUdrQixNQUFNLENBQUNDLEtBQUssR0FBR25CLEdBQUdrQixNQUFNLENBQUNFLE1BQU07Z0JBQzFGO1lBQ0o7UUFDSjtRQUNBLE1BQU1DLE9BQU8sSUFBSXBDLHFDQUFJQSxDQUFDZSxJQUFJO1lBQUVTO1lBQVVDO1FBQVE7UUFDOUMsSUFBSVk7UUFDSkEsWUFBWUMsc0JBQXNCQztRQUNsQyxTQUFTQSxPQUFPQyxDQUFDO1lBQ2JILFlBQVlDLHNCQUFzQkM7WUFDbENkLFFBQVFHLFFBQVEsQ0FBQ0MsS0FBSyxDQUFDQyxLQUFLLEdBQUdVLElBQUk7WUFDbkMseURBQXlEO1lBQ3pEMUIsU0FBUzJCLE1BQU0sQ0FBQztnQkFBRUMsT0FBT047WUFBSztRQUNsQztRQUNBdkIsSUFBSThCLFdBQVcsQ0FBQzVCLEdBQUdrQixNQUFNO1FBQ3pCLE9BQU87Z0JBSUhsQjtZQUhBNkIscUJBQXFCUDtZQUNyQmYsT0FBT3VCLG1CQUFtQixDQUFDLFVBQVU1QjtZQUNyQ0osSUFBSWlDLFdBQVcsQ0FBQy9CLEdBQUdrQixNQUFNO2FBQ3pCbEIsbUJBQUFBLEdBQUdnQyxZQUFZLENBQUMsbUNBQWhCaEMsdUNBQUFBLGlCQUF1Q2lDLFdBQVc7UUFDdEQ7SUFDSixHQUFHLEVBQUU7SUFDTCxxQkFBUS9DLGdEQUFtQixDQUFDLE9BQU87UUFBRWlELEtBQUt6QztRQUFRMEMsV0FBVy9DLE9BQU9nRCxjQUFjO1FBQUVDLE9BQU87WUFDbkZuQixPQUFPO1lBQ1BDLFFBQVE7UUFDWjtRQUFHLEdBQUd4QixJQUFJO0lBQUM7QUFDbkI7R0FyRFNKO0tBQUFBO0FBdURXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy91dmNhbnZhcy9kaXN0L2NvbXBvbmVudHMvbm92YXRyaXgvaW5kZXguanM/ZGM2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIlxuaW1wb3J0IHsgUmVuZGVyZXIsIFRyaWFuZ2xlLCBQcm9ncmFtLCBDb2xvciwgTWVzaCB9IGZyb20gJ29nbCc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbnZhciBzdHlsZXMgPSB7XCJncmFkaWVudC1jYW52YXNcIjpcInV2Y19fZ3JhZGllbnQtY2FudmFzXCJ9O1xuXG52YXIgdmVydCA9IFwiXFxuYXR0cmlidXRlIHZlYzIgdXY7XFxuYXR0cmlidXRlIHZlYzIgcG9zaXRpb247XFxuXFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG52b2lkIG1haW4oKSB7XFxuICAgIHZVdiA9IHV2O1xcbiAgICBnbF9Qb3NpdGlvbiA9IHZlYzQocG9zaXRpb24sIDAsIDEpO1xcbn1cIjtcblxudmFyIGZyYWcgPSBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG5cXG51bmlmb3JtIGZsb2F0IHVUaW1lO1xcbnVuaWZvcm0gdmVjMyB1Q29sb3I7XFxudW5pZm9ybSB2ZWMzIHVSZXNvbHV0aW9uO1xcblxcbnZhcnlpbmcgdmVjMiB2VXY7XFxuXFxudm9pZCBtYWluKCkge1xcblxcbiAgICBmbG9hdCBtciA9IG1pbih1UmVzb2x1dGlvbi54LCB1UmVzb2x1dGlvbi55KTtcXG4gICAgdmVjMiB1diA9ICh2VXYueHkgKiAyLjAgLSAxLjApICogdVJlc29sdXRpb24ueHkgLyBtcjtcXG5cXG4gICAgZmxvYXQgZCA9IC11VGltZSAqIDAuNTtcXG4gICAgZmxvYXQgYSA9IDAuMDtcXG4gICAgZm9yIChmbG9hdCBpID0gMC4wOyBpIDwgOC4wOyArK2kpIHtcXG4gICAgICAgIGEgKz0gY29zKGkgLSBkIC0gYSAqIHV2LngpO1xcbiAgICAgICAgZCArPSBzaW4odXYueSAqIGkgKyBhKTtcXG4gICAgfVxcbiAgICBkICs9IHVUaW1lICogMC41O1xcbiAgICB2ZWMzIGNvbCA9IHZlYzMoY29zKHV2ICogdmVjMihkLCBhKSkgKiAwLjYgKyAwLjQsIGNvcyhhICsgZCkgKiAwLjUgKyAwLjUpO1xcbiAgICBjb2wgPSBjb3MoY29sICogY29zKHZlYzMoZCwgYSwgMi41KSkgKiAwLjUgKyAwLjUpO1xcbiAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KGNvbCwxLjApO1xcblxcbn1cIjtcblxuZnVuY3Rpb24gTm92YXRyaXgocHJvcHMpIHtcbiAgICBjb25zdCBjdG5Eb20gPSB1c2VSZWYobnVsbCk7XG4gICAgY29uc3QgeyBjb2xvciwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFjdG5Eb20uY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGN0biA9IGN0bkRvbS5jdXJyZW50O1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IG5ldyBSZW5kZXJlcigpO1xuICAgICAgICBjb25zdCBnbCA9IHJlbmRlcmVyLmdsO1xuICAgICAgICBnbC5jbGVhckNvbG9yKDEsIDEsIDEsIDEpO1xuICAgICAgICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICAgICAgICBjb25zdCBzY2FsZSA9IDE7XG4gICAgICAgICAgICAvLyBjYW1lcmEucGVyc3BlY3RpdmUoe1xuICAgICAgICAgICAgLy8gICBhc3BlY3Q6IGdsLmNhbnZhcy53aWR0aCAvIGdsLmNhbnZhcy5oZWlnaHQsXG4gICAgICAgICAgICAvLyB9KTtcbiAgICAgICAgICAgIHJlbmRlcmVyLnNldFNpemUoY3RuLm9mZnNldFdpZHRoICogc2NhbGUsIGN0bi5vZmZzZXRIZWlnaHQgKiBzY2FsZSk7XG4gICAgICAgIH1cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplLCBmYWxzZSk7XG4gICAgICAgIHJlc2l6ZSgpO1xuICAgICAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUcmlhbmdsZShnbCk7XG4gICAgICAgIGNvbnN0IHByb2dyYW0gPSBuZXcgUHJvZ3JhbShnbCwge1xuICAgICAgICAgICAgdmVydGV4OiB2ZXJ0LFxuICAgICAgICAgICAgZnJhZ21lbnQ6IGZyYWcsXG4gICAgICAgICAgICB1bmlmb3Jtczoge1xuICAgICAgICAgICAgICAgIHVUaW1lOiB7IHZhbHVlOiAwIH0sXG4gICAgICAgICAgICAgICAgdUNvbG9yOiB7IHZhbHVlOiBuZXcgQ29sb3IoLi4uKGNvbG9yIHx8IFswLjMsIDAuMiwgMC41XSkpIH0sXG4gICAgICAgICAgICAgICAgdVJlc29sdXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ldyBDb2xvcihnbC5jYW52YXMud2lkdGgsIGdsLmNhbnZhcy5oZWlnaHQsIGdsLmNhbnZhcy53aWR0aCAvIGdsLmNhbnZhcy5oZWlnaHQpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbWVzaCA9IG5ldyBNZXNoKGdsLCB7IGdlb21ldHJ5LCBwcm9ncmFtIH0pO1xuICAgICAgICBsZXQgYW5pbWF0ZUlkO1xuICAgICAgICBhbmltYXRlSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlKTtcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlKHQpIHtcbiAgICAgICAgICAgIGFuaW1hdGVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpO1xuICAgICAgICAgICAgcHJvZ3JhbS51bmlmb3Jtcy51VGltZS52YWx1ZSA9IHQgKiAwLjAwMTtcbiAgICAgICAgICAgIC8vIERvbid0IG5lZWQgYSBjYW1lcmEgaWYgY2FtZXJhIHVuaWZvcm1zIGFyZW4ndCByZXF1aXJlZFxuICAgICAgICAgICAgcmVuZGVyZXIucmVuZGVyKHsgc2NlbmU6IG1lc2ggfSk7XG4gICAgICAgIH1cbiAgICAgICAgY3RuLmFwcGVuZENoaWxkKGdsLmNhbnZhcyk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRlSWQpO1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplKTtcbiAgICAgICAgICAgIGN0bi5yZW1vdmVDaGlsZChnbC5jYW52YXMpO1xuICAgICAgICAgICAgZ2wuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfbG9zZV9jb250ZXh0XCIpPy5sb3NlQ29udGV4dCgpO1xuICAgICAgICB9O1xuICAgIH0sIFtdKTtcbiAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyByZWY6IGN0bkRvbSwgY2xhc3NOYW1lOiBzdHlsZXMuZ3JhZGllbnRDYW52YXMsIHN0eWxlOiB7XG4gICAgICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICB9LCAuLi5yZXN0IH0pKTtcbn1cblxuZXhwb3J0IHsgTm92YXRyaXggfTtcbiJdLCJuYW1lcyI6WyJSZW5kZXJlciIsIlRyaWFuZ2xlIiwiUHJvZ3JhbSIsIkNvbG9yIiwiTWVzaCIsIlJlYWN0IiwidXNlUmVmIiwidXNlRWZmZWN0Iiwic3R5bGVzIiwidmVydCIsImZyYWciLCJOb3ZhdHJpeCIsInByb3BzIiwiY3RuRG9tIiwiY29sb3IiLCJyZXN0IiwiY3VycmVudCIsImN0biIsInJlbmRlcmVyIiwiZ2wiLCJjbGVhckNvbG9yIiwicmVzaXplIiwic2NhbGUiLCJzZXRTaXplIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiZ2VvbWV0cnkiLCJwcm9ncmFtIiwidmVydGV4IiwiZnJhZ21lbnQiLCJ1bmlmb3JtcyIsInVUaW1lIiwidmFsdWUiLCJ1Q29sb3IiLCJ1UmVzb2x1dGlvbiIsImNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwibWVzaCIsImFuaW1hdGVJZCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInVwZGF0ZSIsInQiLCJyZW5kZXIiLCJzY2VuZSIsImFwcGVuZENoaWxkIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlQ2hpbGQiLCJnZXRFeHRlbnNpb24iLCJsb3NlQ29udGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJyZWYiLCJjbGFzc05hbWUiLCJncmFkaWVudENhbnZhcyIsInN0eWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uvcanvas/dist/components/novatrix/index.js\n"));

/***/ })

});